genes_symbol = as.data.frame(genes_symbol)
View(genes_symbol)
genes_symbol = stringr::str_remove_all(genes_symbol$V2, " gene_symbol ")
interest_genes = unique(genes_symbol)
cds
p = plot_genes_by_group(cds, markers = interest_genes, norm_method = 'log', group_cells_by = 'cell_type', ordering_type = 'none') +
xlab("Cell Types") +
ylab("Genes") +
coord_flip() +
scale_x_discrete(limits = c('Unknown 2', 'Unknown 1', 'Late Germ Cells', 'Middle Germ Cells 2', 'Middle Germ Cells 1', 'Early Germ Cells')) +
theme(text = element_text(size = 24))
p = plot_genes_by_group(monocle3_obj, markers = interest_genes, norm_method = 'log', group_cells_by = 'subtypes', ordering_type = 'none') +
xlab("Cell Types") +
ylab("Genes") +
coord_flip() +
scale_x_discrete(limits = c('Unknown 2', 'Unknown 1', 'Late Germ Cells', 'Middle Germ Cells 2', 'Middle Germ Cells 1', 'Early Germ Cells')) +
theme(text = element_text(size = 24))
p
norm_exp = monocle3::normalized_counts(monocle3_obj)
norm_exp = norm_exp[interest_genes, ]
apply(norm_exp, MARGIN = 1, FUN = sum)
apply(norm_exp, MARGIN = 1, FUN = max)
norm_exp = monocle3::exprs(monocle3_obj)
norm_exp = norm_exp[interest_genes, ]
apply(norm_exp, MARGIN = 1, FUN = max)
# Y chromosome genes
set_genes = c('FDY', 'Ppr-Y')
p = plot_genes_by_group(cds, markers = set_genes, norm_method = 'log', group_cells_by = 'cell_type', ordering_type = 'none') +
xlab("Cell Types") +
ylab("Genes") +
coord_flip() +
scale_x_discrete(limits = c('Unknown 2', 'Unknown 1', 'Late Germ Cells', 'Middle Germ Cells 2', 'Middle Germ Cells 1', 'Early Germ Cells')) +
theme(text = element_text(size = 24))
##### make the dotplots #####
cds = readRDS(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_germ", "monocle3_no_batch_correct_object.rds"))
cds@colData$cell_type = NA
cds@colData[clusters(cds) == '1', 'cell_type'] = 'Unknown 1'
cds@colData[clusters(cds) == '3', 'cell_type'] = 'Unknown 2'
cds@colData[clusters(cds) == '5', 'cell_type'] = 'Early Germ Cells'
cds@colData[clusters(cds) == '6', 'cell_type'] = 'Interm. Germ Cells 1'
cds@colData[clusters(cds) == '2', 'cell_type'] = 'Interm. Germ Cells 2'
cds@colData[clusters(cds) == '4', 'cell_type'] = 'Late Germ Cells'
# Y chromosome genes
set_genes = c('FDY', 'Ppr-Y')
p = plot_genes_by_group(cds, markers = set_genes, norm_method = 'log', group_cells_by = 'cell_type', ordering_type = 'none') +
xlab("Cell Types") +
ylab("Genes") +
coord_flip() +
scale_x_discrete(limits = c('Unknown 2', 'Unknown 1', 'Late Germ Cells', 'Middle Germ Cells 2', 'Middle Germ Cells 1', 'Early Germ Cells')) +
theme(text = element_text(size = 24))
p
y_genes_chrom = genes_chrom[genes_chrom$V1 == 'X', ]
genes_symbol = stringr::str_split(y_genes_chrom$V9, ";", simplify = TRUE)
genes_symbol = as.data.frame(genes_symbol)
genes_symbol = stringr::str_remove_all(genes_symbol$V2, " gene_symbol ")
interest_genes = unique(genes_symbol)
norm_exp = monocle3::exprs(monocle3_obj)
norm_exp = norm_exp[interest_genes, ]
apply(norm_exp, MARGIN = 1, FUN = max)
TARGET_dir = file.path("results", ANALYSIS_VERSION, "x_chromosome_germ_cells")
##### load in all the data #####
monocle3_obj = readRDS("results/v18/refined_wt_late_early_germ/monocle3_no_batch_correct_object.rds")
monocle3_obj@colData[clusters(monocle3_obj) == 1, 'subtypes'] = 'Unknown 1'
monocle3_obj@colData[clusters(monocle3_obj) == 3, 'subtypes'] = 'Unknown 2'
monocle3_obj@colData[clusters(monocle3_obj) == 5, 'subtypes'] = 'Early Germ Cells'
monocle3_obj@colData[clusters(monocle3_obj) == 6, 'subtypes'] = 'Interm. Germ Cells 1'
monocle3_obj@colData[clusters(monocle3_obj) == 2, 'subtypes'] = 'Interm. Germ Cells 2'
monocle3_obj@colData[clusters(monocle3_obj) == 4, 'subtypes'] = 'Late Germ Cells'
##### get X chromosome genes #####
genes_chrom = read.csv("../quantification/reference_genome_info/dmel-all-r6.33.gtf", header = FALSE, sep = '\t')
get_x_ratio <- function(seurat_obj, genes_chrom) {
chrom_labels = c("3L", "3R", '2L', "2R", '4', "X", 'Y')
gene_chrom_exp = matrix(data = NA, nrow = length(unique(seurat_obj$seurat_clusters)), ncol = length(chrom_labels))
rownames(gene_chrom_exp) = unique(seurat_obj$seurat_clusters)
colnames(gene_chrom_exp) = chrom_labels
for(chrom_label in chrom_labels) {
sub_genes_chrom = genes_chrom[genes_chrom$V1 == chrom_label, ]
genes_symbol = stringr::str_split(sub_genes_chrom$V9, ";", simplify = TRUE)
genes_symbol = as.data.frame(genes_symbol)
genes_symbol = stringr::str_remove_all(genes_symbol$V2, " gene_symbol ")
interest_genes = unique(genes_symbol)
for(cluster in unique(seurat_obj$seurat_clusters)) {
temp_object = subset(seurat_obj, subset = seurat_clusters == cluster)
temp_exp = temp_object@assays$RNA@data
temp_exp = temp_exp[intersect(rownames(temp_exp), interest_genes), ]
gene_chrom_exp[cluster, chrom_label] = mean(apply(temp_exp, FUN = mean, MARGIN = 1))
}
}
return(gene_chrom_exp)
}
##### get Y chromosome genes #####
genes_chrom = read.csv("../quantification/reference_genome_info/dmel-all-r6.33.gtf", header = FALSE, sep = '\t')
y_genes_chrom = genes_chrom[genes_chrom$V1 == 'Y', ]
genes_symbol = stringr::str_split(y_genes_chrom$V9, ";", simplify = TRUE)
genes_symbol = as.data.frame(genes_symbol)
genes_symbol = stringr::str_remove_all(genes_symbol$V2, " gene_symbol ")
interest_genes = unique(genes_symbol)
norm_exp = monocle3::exprs(monocle3_obj)
norm_exp = norm_exp[interest_genes, ]
apply(norm_exp, MARGIN = 1, FUN = max)
p = plot_genes_by_group(monocle3_obj, markers = interest_genes, norm_method = 'log', group_cells_by = 'subtypes', ordering_type = 'none') +
xlab("Cell Types") +
ylab("Genes") +
coord_flip() +
scale_x_discrete(limits = c('Unknown 2', 'Unknown 1', 'Late Germ Cells', 'Middle Germ Cells 2', 'Middle Germ Cells 1', 'Early Germ Cells')) +
theme(text = element_text(size = 24))
p
p = plot_genes_by_group(monocle3_obj, markers = interest_genes, norm_method = 'log', group_cells_by = 'subtypes', ordering_type = 'none') +
xlab("Cell Types") +
ylab("Genes") +
scale_x_discrete(limits = c('Unknown 2', 'Unknown 1', 'Late Germ Cells', 'Middle Germ Cells 2', 'Middle Germ Cells 1', 'Early Germ Cells')) +
theme(text = element_text(size = 24))
p
ggsave(filename = file.path(TARGET_dir, "Y_chromosome_genes.png"), height = 10, width = 4)
ggsave(filename = file.path(TARGET_dir, "Y_chromosome_genes.png"), height = 15, width = 10)
ggsave(filename = file.path(TARGET_dir, "Y_chromosome_genes.png"), height = 18, width = 10)
p = plot_genes_by_group(monocle3_obj, markers = interest_genes, norm_method = 'log', group_cells_by = 'subtypes', ordering_type = 'none') +
xlab("Cell Types") +
ylab("Genes") +
scale_x_discrete(limits = c('Unknown 2', 'Unknown 1', 'Late Germ Cells', 'Middle Germ Cells 2', 'Middle Germ Cells 1', 'Early Germ Cells')) +
theme(text = element_text(size = 20))
ggsave(filename = file.path(TARGET_dir, "Y_chromosome_genes.png"), height = 18, width = 10)
ggsave(filename = file.path(TARGET_dir, "Y_chromosome_genes.png"), height = 20, width = 10)
library(openxlsx)
TARGET_dir = file.path("results", ANALYSIS_VERSION, "figure_plots", 'supplementary_tabs')
# get the trachea
DE_genes = read.csv("results/v18/refined_wt_late_early_trachea/rank_sum_test.csv")
View(DE_genes)
# get the trachea
DE_genes = read.csv("results/v18/refined_wt_late_early_trachea/rank_sum_test.csv", row.names = 1)
View(DE_genes)
colnaems(DE_genes)
colnaems(DE_genes)
colnames(DE_genes)
DE_genes[DE_genes$group == 'Branching Trachea Cells', 'group'] = 'Tracheal Tip Cells'
DE_genes[DE_genes$group == 'Late Trachea Cells', 'group'] = 'Late Tracheal Cells'
DE_genes[DE_genes$group == 'Middle Trachea Cells', 'group'] = 'Interm. Tracheal Cells'
DE_genes[DE_genes$group == 'Early Trachea Cells', 'group'] = 'Early Tracheal Cells'
TARGET_dir
write.csv(DE_genes, file.path(TARGET_dir, "trachea_subtype_genes.csv"))
# get the salivary
DE_genes = read.csv("results/v18/refined_wt_late_early_salivary_gland/rank_sum_test.csv", row.names = 1)
DE_genes[DE_genes$group == 2, 'group'] = "Earlier Salivary Gland Cells"
DE_genes[DE_genes$group == 1, 'group'] = "Later Salivary Gland Cells"
write.csv(DE_genes, file.path(TARGET_dir, "salivary_subtype_genes.csv"))
DE_genes = read.csv("results/v18/refined_wt_late_early_salivary_gland/rank_sum_test.csv", row.names = 1)
DE_genes[DE_genes$group == 2, 'group'] = "Earlier Salivary Gland Cells"
DE_genes[DE_genes$group == 1, 'group'] = "Later Salivary Gland Cells"
write.csv(DE_genes, file.path(TARGET_dir, "salivary_subtype_genes.csv"))
# get the salivary
DE_genes = read.csv("results/v18/refined_wt_late_early_germ/rank_sum_test.csv", row.names = 1)
DE_genes = read.csv("results/v18/refined_wt_late_early_germ/rank_sum_test.csv", row.names = 1)
DE_genes[DE_genes$group == '1', 'group'] = 'Unknown 1'
DE_genes[DE_genes$group == '3', 'group'] = 'Unknown 2'
DE_genes[DE_genes$group == '5', 'group'] = 'Early Germ Cells'
DE_genes[DE_genes$group == '6', 'group'] = 'Interm. Germ Cells 1'
DE_genes[DE_genes$group == '2', 'group'] = 'Interm. Germ Cells 2'
DE_genes[DE_genes$group == '4', 'group'] = 'Late Germ Cells'
write.csv(DE_genes, file.path(TARGET_dir, "germ_subtype_genes.csv"))
modified_dotPlot_df <- function(
object,
assay = NULL,
features,
cols = c("lightgrey", "blue"),
col.min = -2.5,
col.max = 2.5,
dot.min = 0,
dot.scale = 6,
idents = NULL,
group.by = NULL,
split.by = NULL,
cluster.idents = FALSE,
scale = TRUE,
scale.by = 'radius',
scale.min = NA,
scale.max = NA
) {
assay <- assay %||% DefaultAssay(object = object)
DefaultAssay(object = object) <- assay
split.colors <- !is.null(x = split.by) && !any(cols %in% rownames(x = brewer.pal.info))
scale.func <- switch(
EXPR = scale.by,
'size' = scale_size,
'radius' = scale_radius,
stop("'scale.by' must be either 'size' or 'radius'")
)
feature.groups <- NULL
if (is.list(features) | any(!is.na(names(features)))) {
feature.groups <- unlist(x = sapply(
X = 1:length(features),
FUN = function(x) {
return(rep(x = names(x = features)[x], each = length(features[[x]])))
}
))
if (any(is.na(x = feature.groups))) {
warning(
"Some feature groups are unnamed.",
call. = FALSE,
immediate. = TRUE
)
}
features <- unlist(x = features)
names(x = feature.groups) <- features
}
cells <- unlist(x = CellsByIdentities(object = object, idents = idents))
data.features <- FetchData(object = object, vars = features, cells = cells)
data.features$id <- if (is.null(x = group.by)) {
Idents(object = object)[cells, drop = TRUE]
} else {
object[[group.by, drop = TRUE]][cells, drop = TRUE]
}
if (!is.factor(x = data.features$id)) {
data.features$id <- factor(x = data.features$id)
}
id.levels <- levels(x = data.features$id)
data.features$id <- as.vector(x = data.features$id)
if (!is.null(x = split.by)) {
splits <- object[[split.by, drop = TRUE]][cells, drop = TRUE]
if (split.colors) {
if (length(x = unique(x = splits)) > length(x = cols)) {
stop("Not enough colors for the number of groups")
}
cols <- cols[1:length(x = unique(x = splits))]
names(x = cols) <- unique(x = splits)
}
data.features$id <- paste(data.features$id, splits, sep = '_')
unique.splits <- unique(x = splits)
id.levels <- paste0(rep(x = id.levels, each = length(x = unique.splits)), "_", rep(x = unique(x = splits), times = length(x = id.levels)))
}
data.plot <- lapply(
X = unique(x = data.features$id),
FUN = function(ident) {
data.use <- data.features[data.features$id == ident, 1:(ncol(x = data.features) - 1), drop = FALSE]
avg.exp <- apply(
X = data.use,
MARGIN = 2,
FUN = function(x) {
return(mean(x = expm1(x = x)))
}
)
pct.exp <- apply(X = data.use, MARGIN = 2, FUN = PercentAbove, threshold = 0)
return(list(avg.exp = avg.exp, pct.exp = pct.exp))
}
)
names(x = data.plot) <- unique(x = data.features$id)
if (cluster.idents) {
mat <- do.call(
what = rbind,
args = lapply(X = data.plot, FUN = unlist)
)
mat <- scale(x = mat)
id.levels <- id.levels[hclust(d = dist(x = mat))$order]
}
data.plot <- lapply(
X = names(x = data.plot),
FUN = function(x) {
data.use <- as.data.frame(x = data.plot[[x]])
data.use$features.plot <- rownames(x = data.use)
data.use$id <- x
return(data.use)
}
)
data.plot <- do.call(what = 'rbind', args = data.plot)
if (!is.null(x = id.levels)) {
data.plot$id <- factor(x = data.plot$id, levels = id.levels)
}
ngroup <- length(x = levels(x = data.plot$id))
if (ngroup == 1) {
scale <- FALSE
warning(
"Only one identity present, the expression values will be not scaled",
call. = FALSE,
immediate. = TRUE
)
} else if (ngroup < 5 & scale) {
warning(
"Scaling data with a low number of groups may produce misleading results",
call. = FALSE,
immediate. = TRUE
)
}
avg.exp.scaled <- sapply(
X = unique(x = data.plot$features.plot),
FUN = function(x) {
data.use <- data.plot[data.plot$features.plot == x, 'avg.exp']
if (scale) {
data.use <- scale(x = data.use)
data.use <- MinMax(data = data.use, min = col.min, max = col.max)
} else {
data.use <- log1p(x = data.use)
}
return(data.use)
}
)
avg.exp.scaled <- as.vector(x = t(x = avg.exp.scaled))
if (split.colors) {
avg.exp.scaled <- as.numeric(x = cut(x = avg.exp.scaled, breaks = 20))
}
data.plot$avg.exp.scaled <- avg.exp.scaled
data.plot$features.plot <- factor(
x = data.plot$features.plot,
levels = features
)
data.plot$pct.exp[data.plot$pct.exp < dot.min] <- NA
data.plot$pct.exp <- data.plot$pct.exp * 100
if (split.colors) {
splits.use <- vapply(
X = as.character(x = data.plot$id),
FUN = gsub,
FUN.VALUE = character(length = 1L),
pattern =  paste0(
'^((',
paste(sort(x = levels(x = object), decreasing = TRUE), collapse = '|'),
')_)'
),
replacement = '',
USE.NAMES = FALSE
)
data.plot$colors <- mapply(
FUN = function(color, value) {
return(colorRampPalette(colors = c('grey', color))(20)[value])
},
color = cols[splits.use],
value = avg.exp.scaled
)
}
color.by <- ifelse(test = split.colors, yes = 'colors', no = 'avg.exp.scaled')
if (!is.na(x = scale.min)) {
data.plot[data.plot$pct.exp < scale.min, 'pct.exp'] <- scale.min
}
if (!is.na(x = scale.max)) {
data.plot[data.plot$pct.exp > scale.max, 'pct.exp'] <- scale.max
}
if (!is.null(x = feature.groups)) {
data.plot$feature.groups <- factor(
x = feature.groups[data.plot$features.plot],
levels = unique(x = feature.groups)
)
}
return(data.plot)
}
##### to get the matrisome genes for stage12 #####
object = readRDS("results/v18/manual_annotation_early_wt12/manual_celltype_object1.rds")
gene_list = list()
gene_list[['collagen']] = c("vkg", "Col4a1")
gene_list[['Hydroxylase']] = c("Plod", "PH4alphaEFB")
gene_list[['laminins']] = c("LanA", "LanB1", "LanB2")
gene_list[['basement']] = c("Ppn", "Pxn", "SPARC", 'Tig')
gene_list[['phagocytic_receptor']] = c("drpr", 'crq', 'NimC4', 'Sr-CI', 'PGRP-LC')
gene_list[['Thioester-containing']] = c("NimB1", 'NimB3', "NimB4", "NimB5")
gene_list[['engulfment']] = c("SCAR", "Rac1", "Rac2", 'chic')
gene_list[['rabs']] = c("Rab5", "Rab7", "Lamp1")
gene_list[['cathepsin']] = c("cathD", "CtsB1")
gene_list[['insulin']] = c("Ilp4", "Ilp6")
genes_df = data.frame()
for(temp_cat in names(gene_list)) {
temp_plot_df = modified_dotPlot_df(object, features = gene_list[[temp_cat]], group.by = 'manual_celltypes')
temp_plot_df$matrisome_type = temp_cat
genes_df = rbind(genes_df, temp_plot_df)
}
View(genes_df)
write.csv(genes_df, file = file.path(TARGET_dir, "stage10-12_main_matrisome.csv"))
matrisome_df = read.csv("accessory_data/matrisome_data/drosophila_matrisome.csv")
gene_list = list()
gene_list[['collagen']] = c("vkg", "Col4a1")
gene_list[['Hydroxylase']] = c("Plod", "PH4alphaEFB")
gene_list[['laminins']] = c("LanA", "LanB1", "LanB2")
gene_list[['basement']] = c("Ppn", "Pxn", "SPARC", 'Tig')
gene_list[['phagocytic_receptor']] = c("drpr", 'crq', 'NimC4', 'Sr-CI', 'PGRP-LC')
gene_list[['Thioester-containing']] = c("NimB1", 'NimB3', "NimB4", "NimB5")
gene_list[['engulfment']] = c("SCAR", "Rac1", "Rac2", 'chic')
gene_list[['rabs']] = c("Rab5", "Rab7", "Lamp1")
gene_list[['cathepsin']] = c("cathD", "CtsB1")
gene_list[['insulin']] = c("Ilp4", "Ilp6")
gene_list[['antimicrobial']] = c("Drs", "Dro", "DptA", "DptB",'CecA1', "CecA2",
"Def", 'Mtk', 'BomS4', 'BomBc2', 'BomT1', 'BomS3',
'BomBc1', 'BomS2', 'BomT3', 'BomBc3', 'BomS6',
'BomS1', 'BomT2', 'BomS5')
genes_df = data.frame()
for(temp_cat in names(gene_list)) {
temp_plot_df = modified_dotPlot_df(object, features = gene_list[[temp_cat]], group.by = 'manual_celltypes')
temp_plot_df$matrisome_type = temp_cat
genes_df = rbind(genes_df, temp_plot_df)
}
interesting_cat_list = c("Cuticle; Tweedle", "Cuticle", "Chitin-binding-domain-containing Proteins", "Cuticle; R&R Chitin-binding-domain-containing Proteins")
for(temp_cat in interesting_cat_list) {
if(temp_cat == 'Other') {
matrisome_genes = c('Ppn', 'Pxn', 'SPARC', 'Tig')
}
else {
temp_matrisome_df = matrisome_df[matrisome_df$Matrisome.Class...Protein.Family == temp_cat, ]
matrisome_genes = temp_matrisome_df$Gene.Name
matrisome_genes = intersect(matrisome_genes, rownames(object))
}
temp_plot_df = modified_dotPlot_df(object, features = matrisome_genes, group.by = 'manual_celltypes')
#temp_plot_df$avg.exp.scaled = NULL
temp_plot_df$matrisome_type = temp_cat
good_genes = filter_genes(temp_plot_df)
temp_plot_df = temp_plot_df[temp_plot_df$features.plot %in% good_genes, ]
genes_df = rbind(genes_df, temp_plot_df)
}
filter_genes <- function(plot_df) {
good_genes = c()
for(temp_gene in unique(plot_df$features.plot)) {
subset_plot_df = plot_df[plot_df$features.plot == temp_gene, ]
if(max(subset_plot_df$pct.exp) > 1) {
good_genes = c(good_genes, temp_gene)
}
}
return(good_genes)
}
matrisome_df = read.csv("accessory_data/matrisome_data/drosophila_matrisome.csv")
interesting_cat_list = c("Cuticle; Tweedle", "Cuticle", "Chitin-binding-domain-containing Proteins", "Cuticle; R&R Chitin-binding-domain-containing Proteins")
for(temp_cat in interesting_cat_list) {
if(temp_cat == 'Other') {
matrisome_genes = c('Ppn', 'Pxn', 'SPARC', 'Tig')
}
else {
temp_matrisome_df = matrisome_df[matrisome_df$Matrisome.Class...Protein.Family == temp_cat, ]
matrisome_genes = temp_matrisome_df$Gene.Name
matrisome_genes = intersect(matrisome_genes, rownames(object))
}
temp_plot_df = modified_dotPlot_df(object, features = matrisome_genes, group.by = 'manual_celltypes')
#temp_plot_df$avg.exp.scaled = NULL
temp_plot_df$matrisome_type = temp_cat
good_genes = filter_genes(temp_plot_df)
temp_plot_df = temp_plot_df[temp_plot_df$features.plot %in% good_genes, ]
genes_df = rbind(genes_df, temp_plot_df)
}
View(genes_df)
write.csv(genes_df, file = file.path(TARGET_dir, "stage10-12_matrisome.csv"))
##### to get the matrisome genes for stage12 #####
object = readRDS("results/v18/manual_annotation_early_wt12/manual_celltype_object1.rds")
gene_list = list()
gene_list[['collagen']] = c("vkg", "Col4a1")
gene_list[['Hydroxylase']] = c("Plod", "PH4alphaEFB")
gene_list[['laminins']] = c("LanA", "LanB1", "LanB2")
gene_list[['basement']] = c("Ppn", "Pxn", "SPARC", 'Tig')
gene_list[['phagocytic_receptor']] = c("drpr", 'crq', 'NimC4', 'Sr-CI', 'PGRP-LC')
gene_list[['Thioester-containing']] = c("NimB1", 'NimB3', "NimB4", "NimB5")
gene_list[['engulfment']] = c("SCAR", "Rac1", "Rac2", 'chic')
gene_list[['rabs']] = c("Rab5", "Rab7", "Lamp1")
gene_list[['cathepsin']] = c("cathD", "CtsB1")
gene_list[['insulin']] = c("Ilp4", "Ilp6")
gene_list[['antimicrobial']] = c("Drs", "Dro", "DptA", "DptB",'CecA1', "CecA2",
"Def", 'Mtk', 'BomS4', 'BomBc2', 'BomT1', 'BomS3',
'BomBc1', 'BomS2', 'BomT3', 'BomBc3', 'BomS6',
'BomS1', 'BomT2', 'BomS5')
genes_df = data.frame()
for(temp_cat in names(gene_list)) {
temp_plot_df = modified_dotPlot_df(object, features = gene_list[[temp_cat]], group.by = 'manual_celltypes')
temp_plot_df$matrisome_type = temp_cat
genes_df = rbind(genes_df, temp_plot_df)
}
interesting_cat_list = c("Cuticle; Tweedle", "Cuticle", "Chitin-binding-domain-containing Proteins", "Cuticle; R&R Chitin-binding-domain-containing Proteins")
for(temp_cat in interesting_cat_list) {
if(temp_cat == 'Other') {
matrisome_genes = c('Ppn', 'Pxn', 'SPARC', 'Tig')
}
else {
temp_matrisome_df = matrisome_df[matrisome_df$Matrisome.Class...Protein.Family == temp_cat, ]
matrisome_genes = temp_matrisome_df$Gene.Name
matrisome_genes = intersect(matrisome_genes, rownames(object))
}
temp_plot_df = modified_dotPlot_df(object, features = matrisome_genes, group.by = 'manual_celltypes')
#temp_plot_df$avg.exp.scaled = NULL
temp_plot_df$matrisome_type = temp_cat
good_genes = filter_genes(temp_plot_df)
temp_plot_df = temp_plot_df[temp_plot_df$features.plot %in% good_genes, ]
genes_df = rbind(genes_df, temp_plot_df)
}
write.csv(genes_df, file = file.path(TARGET_dir, "stage10-12_matrisome.csv"))
##### to get the matrisome genes for stage13-16 #####
object = readRDS("results/v18/manual_annotation_wt13/manual_celltype_object4.rds")
gene_list = list()
gene_list[['collagen']] = c("vkg", "Col4a1")
gene_list[['Hydroxylase']] = c("Plod", "PH4alphaEFB")
gene_list[['laminins']] = c("LanA", "LanB1", "LanB2")
gene_list[['basement']] = c("Ppn", "Pxn", "SPARC", 'Tig')
gene_list[['phagocytic_receptor']] = c("drpr", 'crq', 'NimC4', 'Sr-CI', 'PGRP-LC')
gene_list[['Thioester-containing']] = c("NimB1", 'NimB3', "NimB4", "NimB5")
gene_list[['engulfment']] = c("SCAR", "Rac1", "Rac2", 'chic')
gene_list[['rabs']] = c("Rab5", "Rab7", "Lamp1")
gene_list[['cathepsin']] = c("cathD", "CtsB1")
gene_list[['insulin']] = c("Ilp4", "Ilp6")
gene_list[['antimicrobial']] = c("Drs", "Dro", "DptA", "DptB",'CecA1', "CecA2",
"Def", 'Mtk', 'BomS4', 'BomBc2', 'BomT1', 'BomS3',
'BomBc1', 'BomS2', 'BomT3', 'BomBc3', 'BomS6',
'BomS1', 'BomT2', 'BomS5')
genes_df = data.frame()
for(temp_cat in names(gene_list)) {
temp_plot_df = modified_dotPlot_df(object, features = gene_list[[temp_cat]], group.by = 'manual_celltypes')
temp_plot_df$matrisome_type = temp_cat
genes_df = rbind(genes_df, temp_plot_df)
}
interesting_cat_list = c("Cuticle; Tweedle", "Cuticle", "Chitin-binding-domain-containing Proteins", "Cuticle; R&R Chitin-binding-domain-containing Proteins")
for(temp_cat in interesting_cat_list) {
if(temp_cat == 'Other') {
matrisome_genes = c('Ppn', 'Pxn', 'SPARC', 'Tig')
}
else {
temp_matrisome_df = matrisome_df[matrisome_df$Matrisome.Class...Protein.Family == temp_cat, ]
matrisome_genes = temp_matrisome_df$Gene.Name
matrisome_genes = intersect(matrisome_genes, rownames(object))
}
temp_plot_df = modified_dotPlot_df(object, features = matrisome_genes, group.by = 'manual_celltypes')
temp_plot_df$matrisome_type = temp_cat
good_genes = filter_genes(temp_plot_df)
temp_plot_df = temp_plot_df[temp_plot_df$features.plot %in% good_genes, ]
genes_df = rbind(genes_df, temp_plot_df)
}
write.csv(genes_df, file = file.path(TARGET_dir, "stage13-16_matrisome.csv"))
