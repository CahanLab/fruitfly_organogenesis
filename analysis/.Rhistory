View(stTrain)
system.time(class_info<-scn_train(stTrain = stTrain,
expTrain = expTrain,
nTopGenes = 15,
nRand = 70,
nTrees = 1000,
nTopGenePairs = 25, dLevel = "cell_type",
colName_samp = "barcode"))
expTrain
expTrain = as.matrix(expTrain)
system.time(class_info<-scn_train(stTrain = stTrain,
expTrain = expTrain,
nTopGenes = 15,
nRand = 70,
nTrees = 1000,
nTopGenePairs = 25, dLevel = "cell_type",
colName_samp = "barcode"))
system.time(class_info<-scn_train(stTrain = stTrain,
expTrain = expTrain,
nTopGenes = 15,
nRand = 70,
nTrees = 1000,
nTopGenePairs = 30, dLevel = "cell_type",
colName_samp = "barcode"))
TARGET_dir = file.path("results", ANALYSIS_VERSION, 'seroka_germ_classification')
dir.create(TARGET_dir, recursive = TRUE)
train_exp = train_exp[i_genes, ]
query_exp = query_exp[i_genes, ]
withr::with_dir(
file.path(TARGET_dir),
{
write(colnames(train_exp), file = "raw_train_colnames.txt")
write(rownames(train_exp), file = "raw_train_rownames.txt")
Matrix::writeMM(train_exp, "raw_train_exp.txt")
write.csv(train_st, file = 'raw_meta_tab.csv')
}
)
withr::with_dir(
file.path(TARGET_dir),
{
write(colnames(query_exp), file = file.path("raw_query_colnames.txt"))
write(rownames(query_exp), file = file.path("raw_query_rownames.txt"))
Matrix::writeMM(query_exp, file.path("raw_query_exp.txt"))
}
)
class_profile = read.csv("SCN_classification.csv")
class_profile = read.csv(file.path(TARGET_dir, "SCN_classification.csv"))
View(class_profile)
class_profile = read.csv(file.path(TARGET_dir, "SCN_classification.csv"), row.names = 1)
View(class_profile)
class_profile = class_profile[rownames(germ_Seroka_object), ]
germ_Seroka_object@meta.data$SCN_class = class_profile$SCN_class
View(class_profile)
class_profile = read.csv(file.path(TARGET_dir, "SCN_classification.csv"), row.names = 1)
class_profile = class_profile[colnames(germ_Seroka_object), ]
germ_Seroka_object@meta.data$SCN_class = class_profile$SCN_class
DimPlot(germ_Seroka_object, group.by = 'SCN_class')
germ_Seroka_object@meta.data = cbind(germ_Seroka_object@meta.data, class_profile)
View(class_profile)
colnames(class_profile)
FeaturePlot(object, features = 'Unknown.1')
FeaturePlot(germ_Seroka_object, features = 'Unknown.1')
FeaturePlot(germ_Seroka_object, features = 'Unknown.2')
FeaturePlot(germ_Seroka_object, features = 'ULate.Germ.Cells')
FeaturePlot(germ_Seroka_object, features = 'Late.Germ.Cells')
FeaturePlot(germ_Seroka_object, features = 'Unknown.1')
FeaturePlot(germ_Seroka_object, features = 'Interm..Germ.Cells.2')
FeaturePlot(germ_Seroka_object, features = 'Interm..Germ.Cells.1')
FeaturePlot(germ_Seroka_object, features = 'Unknown.1')
FeaturePlot(germ_Seroka_object, features = 'Unknown.2')
FeaturePlot(germ_Seroka_object, features = 'Early.Germ.Cells')
FeaturePlot(germ_Seroka_object, features = 'Interm..Germ.Cells.1')
FeaturePlot(germ_Seroka_object, features = 'Interm..Germ.Cells.2')
FeaturePlot(germ_Seroka_object, features = 'Late.Germ.Cells')
FeaturePlot(germ_Seroka_object, features = 'Interm..Germ.Cells.2')
FeaturePlot(germ_Seroka_object, features = 'Unknown.1')
FeaturePlot(germ_Seroka_object, features = 'Unknown.2')
FeaturePlot(germ_Seroka_object, features = 'Unknown.1')
FeaturePlot(germ_Seroka_object, features = 'Early.Germ.Cells')
germ_Seroka_object <- NormalizeData(germ_Seroka_object)
germ_Seroka_object <- FindVariableFeatures(germ_Seroka_object, selection.method = "vst", nfeatures = 2000)
germ_Seroka_object <- ScaleData(germ_Seroka_object)
germ_Seroka_object <- RunPCA(germ_Seroka_object, features = VariableFeatures(object = germ_Seroka_object))
germ_Seroka_object <- RunUMAP(germ_Seroka_object, dims = 1:10)
FeaturePlot(germ_Seroka_object, features = 'Unknown.1')
FeaturePlot(germ_Seroka_object, features = 'Unknown.2')
FeaturePlot(germ_Seroka_object, features = 'Late.Germ.Cells')
FeaturePlot(germ_Seroka_object, features = 'Interm..Germ.Cells.2')
FeaturePlot(germ_Seroka_object, features = 'Interm..Germ.Cells.1')
FeaturePlot(germ_Seroka_object, features = 'Early.Germ.Cells')
DimPlot(germ_Seroka_object, group.by = 'SCN_class')
germ_Seroka_object = Seroka_object[, Seroka_object$cell_type == 'germline cells']
class_profile = read.csv(file.path(TARGET_dir, "SCN_classification.csv"), row.names = 1)
class_profile = class_profile[colnames(germ_Seroka_object), ]
germ_Seroka_object@meta.data = cbind(germ_Seroka_object@meta.data, class_profile)
DimPlot(germ_Seroka_object, group.by = 'SCN_class')
FeaturePlot(germ_Seroka_object, features = 'Unknown.1')
FeaturePlot(germ_Seroka_object, features = 'Unknown.2')
FeaturePlot(germ_Seroka_object, features = 'Late.Germ.Cells')
FeaturePlot(germ_Seroka_object, features = 'Interm..Germ.Cells.2')
FeaturePlot(germ_Seroka_object, features = 'Interm..Germ.Cells.1')
FeaturePlot(germ_Seroka_object, features = 'Early.Germ.Cells')
germ_Seroka_object <- NormalizeData(germ_Seroka_object)
germ_Seroka_object <- FindVariableFeatures(germ_Seroka_object, selection.method = "vst", nfeatures = 2000)
germ_Seroka_object <- ScaleData(germ_Seroka_object)
germ_Seroka_object <- RunPCA(germ_Seroka_object, features = VariableFeatures(object = germ_Seroka_object))
germ_Seroka_object <- RunUMAP(germ_Seroka_object, dims = 1:10)
DimPlot(germ_Seroka_object, group.by = 'SCN_class')
germ_Seroka_object = Seroka_object[, Seroka_object$cell_type == 'germline cells']
class_profile = read.csv(file.path(TARGET_dir, "SCN_classification.csv"), row.names = 1)
class_profile = class_profile[colnames(germ_Seroka_object), ]
germ_Seroka_object@meta.data = cbind(germ_Seroka_object@meta.data, class_profile)
DimPlot(germ_Seroka_object, group.by = 'SCN_class')
FeaturePlot(germ_Seroka_object, features = 'Unknown.1')
FeaturePlot(germ_Seroka_object, features = 'Unknown.2')
FeaturePlot(germ_Seroka_object, features = 'Late.Germ.Cells')
FeaturePlot(germ_Seroka_object, features = 'Interm..Germ.Cells.2')
FeaturePlot(germ_Seroka_object, features = 'Interm..Germ.Cells.1')
FeaturePlot(germ_Seroka_object, features = 'Early.Germ.Cells')
ggsave(filename = file.path(TARGET_dir, "SCN_class.png"))
FeaturePlot(germ_Seroka_object, features = 'Unknown.1')
ggsave(filename = file.path(TARGET_dir, "unknown_1.png"))
FeaturePlot(germ_Seroka_object, features = 'Unknown.2')
ggsave(filename = file.path(TARGET_dir, "unknown_2.png"))
ggsave(filename = file.path(TARGET_dir, "late_germ.png"))
DimPlot(germ_Seroka_object, group.by = 'SCN_class')
ggsave(filename = file.path(TARGET_dir, "SCN_class.png"))
FeaturePlot(germ_Seroka_object, features = 'Unknown.1')
ggsave(filename = file.path(TARGET_dir, "unknown_1.png"))
FeaturePlot(germ_Seroka_object, features = 'Unknown.2')
ggsave(filename = file.path(TARGET_dir, "unknown_2.png"))
FeaturePlot(germ_Seroka_object, features = 'Late.Germ.Cells')
ggsave(filename = file.path(TARGET_dir, "late_germ.png"))
FeaturePlot(germ_Seroka_object, features = 'Interm..Germ.Cells.2')
ggsave(filename = file.path(TARGET_dir, "interm2_germ.png"))
FeaturePlot(germ_Seroka_object, features = 'Interm..Germ.Cells.1')
ggsave(filename = file.path(TARGET_dir, "interm1_germ.png"))
FeaturePlot(germ_Seroka_object, features = 'Early.Germ.Cells')
ggsave(filename = file.path(TARGET_dir, "early_germ.png"))
# To reproduce our work, run this script.
# We used Ubuntu 20.04 with an R package environment managed by renv.
# We used R version 4.1.2.
# Make it work on each of our computers
try({setwd("~/Dropbox/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("~/Dropbox (CahanLab)/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("c:/Users/DAndrewLab/Desktop/fruitfly_organogenesis/analysis/")}, silent = T)
renv::activate()
ANALYSIS_VERSION = "v18" # Where to put output
metadata = read.table(header = T, text=
"sample cellranger
wt_rep1 2021-10-27_scRNA_10x_3prime
wt_rep3 2022-08-11_scRNA_10x_3prime_CellRanger6.1.2
wt_early_rep1 2022-12-07_scRNA_10x_3prime_WT_early
wt_early_rep2 2022-12-13_scRNA_10x_3prime_WT_early2")
SAMPLE = "all"
source("R/set_up_environment.R")
library(monocle3)
library(ggplot2)
library(RColorBrewer)
library(dbplyr)
library(ggsignif)
TARGET_dir = file.path("results", ANALYSIS_VERSION, "figure_plots", 'refined_wt13_early12_germ')
cds = readRDS(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_germ", "monocle3_no_batch_correct_object.rds"))
##### test the sequencing depth #####
UMAP_coord = cds@int_colData$reducedDims$UMAP
colnames(UMAP_coord) = c("UMAP_1", "UMAP_2")
UMAP_coord = as.data.frame(UMAP_coord)
UMAP_coord$clusters = as.vector(monocle3::clusters(cds))
UMAP_coord$pseudotime = as.vector(monocle3::pseudotime(cds))
UMAP_coord$batch = as.vector(cds@colData$batch)
UMAP_coord[UMAP_coord$batch == 'early_rep_1', 'batch'] = 'Stage 10-12 rep 1'
UMAP_coord[UMAP_coord$batch == 'early_rep_2', 'batch'] = 'Stage 10-12 rep 2'
UMAP_coord[UMAP_coord$batch == 'late_rep_1', 'batch'] = 'Stage 13-16 rep 1'
UMAP_coord[UMAP_coord$batch == 'late_rep_3', 'batch'] = 'Stage 13-16 rep 2'
UMAP_coord$cell_type = UMAP_coord$clusters
UMAP_coord[UMAP_coord$clusters == '1', 'cell_type'] = 'Unknown 1'
UMAP_coord[UMAP_coord$clusters == '3', 'cell_type'] = 'Unknown 2'
UMAP_coord[UMAP_coord$clusters == '5', 'cell_type'] = 'Early Germ Cells'
UMAP_coord[UMAP_coord$clusters == '6', 'cell_type'] = 'Interm. Germ Cells 1'
UMAP_coord[UMAP_coord$clusters == '2', 'cell_type'] = 'Interm. Germ Cells 2'
UMAP_coord[UMAP_coord$clusters == '4', 'cell_type'] = 'Late Germ Cells'
UMAP_coord$clusters <- factor(UMAP_coord$clusters, levels = c("Early Germ Cells",
"Interm. Germ Cells 1",
"Interm. Germ Cells 2",
"Late Germ Cells",
"Unknown 1",
"Unknown 2"))
UMAP_coord$log10_ngenes = log(cds@colData$nCount_RNA)
UMAP_coord$ngenes = cds@colData$nCount_RNA
p = ggplot(UMAP_coord, aes(x=reorder(cell_type, -log10_ngenes), y=log10_ngenes, fill = cell_type)) +
geom_violin() +
guides(fill=guide_legend(title="")) +
geom_boxplot(width=0.1) +
theme_minimal() +
scale_fill_brewer(palette = 'Set2') +
ylab("log10(UMI Counts)") +
xlab("cell type") +
theme(text = element_text(size = 18), axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
geom_signif(comparisons = list(c("Unknown 2", "Late Germ Cells"),
c("Unknown 2", "Interm. Germ Cells 1"),
c("Unknown 2", "Interm. Germ Cells 2"),
c('Late Germ Cells', 'Unknown 1'),
c('Interm. Germ Cells 1', 'Unknown 1'),
c('Interm. Germ Cells 2', 'Unknown 1'),
c('Unknown 1', 'Early Germ Cells'),
c('Unknown 2', 'Early Germ Cells')), map_signif_level=TRUE, step_increase = 0.075)
p = ggplot(UMAP_coord, aes(x=reorder(cell_type, -log10_ngenes), y=log10_ngenes, fill = cell_type)) +
geom_violin() +
guides(fill=guide_legend(title="")) +
geom_boxplot(width=0.1) +
theme_minimal() +
scale_fill_brewer(palette = 'Set2') +
ylab("log(UMI Counts)") +
xlab("cell type") +
theme(text = element_text(size = 18), axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
geom_signif(comparisons = list(c("Unknown 2", "Late Germ Cells"),
c("Unknown 2", "Interm. Germ Cells 1"),
c("Unknown 2", "Interm. Germ Cells 2"),
c('Late Germ Cells', 'Unknown 1'),
c('Interm. Germ Cells 1', 'Unknown 1'),
c('Interm. Germ Cells 2', 'Unknown 1'),
c('Unknown 1', 'Early Germ Cells'),
c('Unknown 2', 'Early Germ Cells')), map_signif_level=TRUE, step_increase = 0.075)
ggsave(filename = file.path(TARGET_dir, 'read_depth.png'), plot = p, width = 10, height = 5)
# To reproduce our work, run this script.
# We used Ubuntu 20.04 with an R package environment managed by renv.
# We used R version 4.1.2.
# Make it work on each of our computers
try({setwd("~/Dropbox/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("~/Dropbox (CahanLab)/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("c:/Users/DAndrewLab/Desktop/fruitfly_organogenesis/analysis/")}, silent = T)
renv::activate()
ANALYSIS_VERSION = "v18" # Where to put output
metadata = read.table(header = T, text=
"sample cellranger
wt_rep1 2021-10-27_scRNA_10x_3prime
wt_rep3 2022-08-11_scRNA_10x_3prime_CellRanger6.1.2
wt_early_rep1 2022-12-07_scRNA_10x_3prime_WT_early
wt_early_rep2 2022-12-13_scRNA_10x_3prime_WT_early2")
SAMPLE = "all"
source("R/set_up_environment.R")
library(openxlsx)
TARGET_dir = file.path("results", ANALYSIS_VERSION, "figure_plots", 'supplementary_tabs')
dir.create(TARGET_dir, recursive = TRUE)
##### make the marker genes with the corresponding cell types #####
marker_gene_list = list()
marker_gene_tab = read.csv("results/v18/wt13_integrated/marker_genes.csv")
marker_gene_tab$X = NULL
marker_gene_tab$cell_types = NA
seurat_object = readRDS("results/v18/manual_annotation_wt13/manual_celltype_object4.rds")
seurat_meta = seurat_object@meta.data
for(temp_cluster in unique(marker_gene_tab$cluster)) {
marker_gene_tab[marker_gene_tab$cluster == temp_cluster, 'cell_types'] = unique(seurat_meta[seurat_meta$seurat_clusters == temp_cluster, "manual_celltypes"])
}
marker_gene_list[['stage 13-16']] = marker_gene_tab
# write in the stage 10-12
marker_gene_tab = read.csv("results/v18/early_wt12_integrated/marker_genes.csv")
marker_gene_tab$X = NULL
marker_gene_tab$cell_types = NA
seurat_object = readRDS("results/v18/manual_annotation_early_wt12/manual_celltype_object1.rds")
seurat_meta = seurat_object@meta.data
for(temp_cluster in unique(marker_gene_tab$cluster)) {
marker_gene_tab[marker_gene_tab$cluster == temp_cluster, 'cell_types'] = unique(seurat_meta[seurat_meta$seurat_clusters == temp_cluster, "manual_celltypes"])
}
marker_gene_list[['stage 10-12']] = marker_gene_tab
write.xlsx(marker_gene_list, file = file.path(TARGET_dir, "Table_2.xlsx"))
##### plot out the SG, trachea and GC #####
run_file_list = list()
run_file_list[['Stage13-16_SG']] = file.path("results", ANALYSIS_VERSION, "wt13_enrichment/Salivary Gland/gsea_results_wt.csv")
run_file_list[['Stage13-16_Tr']] = file.path("results", ANALYSIS_VERSION, "wt13_enrichment/Trachea/gsea_results_wt.csv")
run_file_list[['Stage13-16_GC']] = file.path("results", ANALYSIS_VERSION, "wt13_enrichment/Germ Cells/gsea_results_wt.csv")
run_file_list[['Stage10-12_SG']] = file.path("results", ANALYSIS_VERSION, "early_wt12_enrichment/Salivary Gland/gsea_results_wt.csv")
run_file_list[['Stage10-12_Tr']] = file.path("results", ANALYSIS_VERSION, "early_wt12_enrichment/Trachea/gsea_results_wt.csv")
run_file_list[['Stage10-12_GC']] = file.path("results", ANALYSIS_VERSION, "early_wt12_enrichment/Germ Cells/gsea_results_wt.csv")
table_list = list()
for(temp_name in names(run_file_list)) {
gsea_results = read.csv(run_file_list[[temp_name]], row.names = 1)
gsea_results = gsea_results[order(gsea_results$NES, decreasing = TRUE), ]
table_list[[temp_name]] = gsea_results
}
write.xlsx(table_list, file = file.path(TARGET_dir, "Table_3.xlsx"))
library(ggplot2)
# To reproduce our work, run this script.
# We used Ubuntu 20.04 with an R package environment managed by renv.
# We used R version 4.1.2.
# Make it work on each of our computers
try({setwd("~/Dropbox/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("~/Dropbox (CahanLab)/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("c:/Users/DAndrewLab/Desktop/fruitfly_organogenesis/analysis/")}, silent = T)
renv::activate()
ANALYSIS_VERSION = "v18" # Where to put output
metadata = read.table(header = T, text=
"sample cellranger
wt_rep1 2021-10-27_scRNA_10x_3prime
wt_rep3 2022-08-11_scRNA_10x_3prime_CellRanger6.1.2
wt_early_rep1 2022-12-07_scRNA_10x_3prime_WT_early
wt_early_rep2 2022-12-13_scRNA_10x_3prime_WT_early2")
SAMPLE = "all"
source("R/set_up_environment.R")
library(monocle3)
library(ggplot2)
library(RColorBrewer)
library(dbplyr)
library(ggsignif)
TARGET_dir = file.path("results", ANALYSIS_VERSION, "figure_plots", 'refined_wt13_early12_germ')
cds = readRDS(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_germ", "monocle3_no_batch_correct_object.rds"))
plot_cells(cds, genes = 'Rox1', cell_size = 1)
plot_cells(cds, genes = 'roX1', cell_size = 1)
plot_cells(cds, genes = 'CR32777', cell_size = 1)
grep('roX', rownames(cds))
rownames(cds)[grep('roX', rownames(cds))]
plot_cells(cds, genes = "lncRNA:roX1", cell_size = 1)
library(monocle3)
library(ggplot2)
library(RColorBrewer)
library(dbplyr)
library(ggsignif)
TARGET_dir = file.path("results", ANALYSIS_VERSION, "figure_plots", 'refined_wt13_early12_germ')
dir.create(TARGET_dir, recursive = TRUE)
rank_sum = read.csv(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_germ", "rank_sum_test.csv"), row.names = 1)
rank_sum = rank_sum[rank_sum$logFC > 0, ]
rank_sum[rank_sum$group == '1', 'group'] = 'Unknown 1'
rank_sum[rank_sum$group == '3', 'group'] = 'Unknown 2'
rank_sum[rank_sum$group == '5', 'group'] = 'Early Germ Cells'
rank_sum[rank_sum$group == '6', 'group'] = 'Interm. Germ Cells 1'
rank_sum[rank_sum$group == '2', 'group'] = 'Interm. Germ Cells 2'
rank_sum[rank_sum$group == '4', 'group'] = 'Late Germ Cells'
write.csv(rank_sum, file = file.path(TARGET_dir, 'DE_genes.csv'))
cds = readRDS(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_germ", "monocle3_no_batch_correct_object.rds"))
plot_cells(cds, genes = 'BigH1', cell_size = 1)
plot_cells(cds, genes = "lncRNA:roX1", cell_size = 1)
# this is to plot out the dead cells
plot_cells(cds, genes = c('nos', 'wun2', 'Lsd-1', 'Lsd-2'), cell_size = 1, show_trajectory_graph = FALSE)
UMAP_coord = cds@int_colData$reducedDims$UMAP
colnames(UMAP_coord) = c("UMAP_1", "UMAP_2")
UMAP_coord = as.data.frame(UMAP_coord)
UMAP_coord$clusters = as.vector(monocle3::clusters(cds))
UMAP_coord$pseudotime = as.vector(monocle3::pseudotime(cds))
UMAP_coord$batch = as.vector(cds@colData$batch)
UMAP_coord[UMAP_coord$batch == 'early_rep_1', 'batch'] = 'Stage 10-12 rep 1'
UMAP_coord[UMAP_coord$batch == 'early_rep_2', 'batch'] = 'Stage 10-12 rep 2'
UMAP_coord[UMAP_coord$batch == 'late_rep_1', 'batch'] = 'Stage 13-16 rep 1'
UMAP_coord[UMAP_coord$batch == 'late_rep_3', 'batch'] = 'Stage 13-16 rep 2'
UMAP_coord$cell_type = UMAP_coord$clusters
UMAP_coord[UMAP_coord$clusters == '1', 'cell_type'] = 'Unknown 1'
UMAP_coord[UMAP_coord$clusters == '3', 'cell_type'] = 'Unknown 2'
UMAP_coord[UMAP_coord$clusters == '5', 'cell_type'] = 'Early Germ Cells'
UMAP_coord[UMAP_coord$clusters == '6', 'cell_type'] = 'Interm. Germ Cells 1'
UMAP_coord[UMAP_coord$clusters == '2', 'cell_type'] = 'Interm. Germ Cells 2'
UMAP_coord[UMAP_coord$clusters == '4', 'cell_type'] = 'Late Germ Cells'
p = ggplot(UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color = pseudotime)) +
geom_point() +
theme_minimal() +
scale_color_viridis_c(option = "plasma") +
guides(fill=guide_legend(title="pseudo-time")) +
theme(text = element_text(size = 24))
ggsave(filename = file.path(TARGET_dir, "pseudotime.png"), plot = p, width = 8, height = 6)
p = ggplot(UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color = batch)) +
geom_point() +
theme_minimal() +
scale_color_brewer(palette = 'Set1') +
theme(text = element_text(size = 24))
ggsave(filename = file.path(TARGET_dir, "batch.png"), plot = p, width = 8, height = 6)
p = ggplot(UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color = clusters)) +
geom_point() +
theme_minimal() +
scale_color_brewer(palette = 'Set3') +
theme(text = element_text(size = 24))
ggsave(filename = file.path(TARGET_dir, "cluster.png"), plot = p, width = 8, height = 6)
p = ggplot(UMAP_coord, aes(x=reorder(batch, pseudotime), y=pseudotime, fill = batch)) +
geom_violin() +
geom_boxplot(width=0.1) +
theme_minimal() +
scale_fill_brewer(palette = 'Set1') +
ylab("pseudotime") +
xlab("batch") +
theme(text = element_text(size = 20), axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggsave(filename = file.path(TARGET_dir, "violin_pseudotime.png"), plot = p, width = 8, height = 6)
UMAP_coord$cell_type <- factor(UMAP_coord$cell_type, levels = c("Early Germ Cells",
"Interm. Germ Cells 1",
"Interm. Germ Cells 2",
"Late Germ Cells",
"Unknown 1",
"Unknown 2"))
p = ggplot(UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color = cell_type)) +
guides(color=guide_legend(title="")) +
geom_point() +
theme_minimal() +
scale_color_brewer(palette = 'Set2') +
theme(text = element_text(size = 24))
ggsave(filename = file.path(TARGET_dir, "celltypes.png"), plot = p, width = 8, height = 6)
##### plotting the gene sets results #####
norm_exp = monocle3::normalized_counts(cds)
gene_interest_list = c('eya', 'wg', 'tkv', 'Dl', 'shg', 'Prosalpha5', 'Sod1', 'BigH1', 'bru1', 'dsx', 'dhd', 'vas', 'pum',
'nos', 'bam', 'osk', 'pgc', 'gcl', 'nos', 'dpp', 'N', 'Pomp')
for(gene_interest in gene_interest_list) {
UMAP_coord$gene_exp = norm_exp[gene_interest, ]
p = ggplot(UMAP_coord, aes(x=reorder(cell_type, -gene_exp), y=gene_exp, fill = cell_type)) +
geom_violin() +
guides(fill=guide_legend(title="")) +
geom_boxplot(width=0.1) +
theme_minimal() +
scale_fill_brewer(palette = 'Set2') +
ylab(paste0(gene_interest, " normalized expression")) +
xlab("cell type") +
theme(text = element_text(size = 18), axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggsave(filename = file.path(TARGET_dir, paste0("violin_", gene_interest, ".png")), plot = p, width = 8, height = 6)
}
gene_interest_list = c('bam', 'bgcn', 'zpg', 'stg', 'esg', 'kmg', 'Rbp4', 'Pp2C1', 'CG6701', 'Parp16', 'Glut3')
for(gene_interest in gene_interest_list) {
UMAP_coord$gene_exp = norm_exp[gene_interest, ]
p = ggplot(UMAP_coord, aes(x=reorder(cell_type, -gene_exp), y=gene_exp, fill = cell_type)) +
geom_violin() +
guides(fill=guide_legend(title="")) +
geom_boxplot(width=0.1) +
theme_minimal() +
scale_fill_brewer(palette = 'Set2') +
ylab(paste0(gene_interest, " normalized expression")) +
xlab("cell type") +
theme(text = element_text(size = 18), axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggsave(filename = file.path(TARGET_dir, paste0("violin_", gene_interest, ".png")), plot = p, width = 8, height = 6)
}
gene_interest_list = c("lncRNA:roX1", "lncRNA:roX2")
for(gene_interest in gene_interest_list) {
UMAP_coord$gene_exp = norm_exp[gene_interest, ]
p = ggplot(UMAP_coord, aes(x=reorder(cell_type, -gene_exp), y=gene_exp, fill = cell_type)) +
geom_violin() +
guides(fill=guide_legend(title="")) +
geom_boxplot(width=0.1) +
theme_minimal() +
scale_fill_brewer(palette = 'Set2') +
ylab(paste0(gene_interest, " normalized expression")) +
xlab("cell type") +
theme(text = element_text(size = 18), axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggsave(filename = file.path(TARGET_dir, paste0("violin_", gene_interest, ".png")), plot = p, width = 8, height = 6)
}
plot_cells(cds, genes = "lncRNA:roX1", cell_size = 1)
plot_cells(cds, genes = c("lncRNA:roX1", "lncRNA:roX2"), cell_size = 1)
?plot_cells
plot_cells(cds, genes = c("lncRNA:roX1", "lncRNA:roX2"), cell_size = 1, scale_to_range = FALSE)
plot_cells(cds, genes = c("lncRNA:roX1", "lncRNA:roX2"), cell_size = 1, scale_to_range = FALSE, show_trajectory_graph = FALSE)
plot_cells(cds, genes = c("CG6701", "Pp2c1"), cell_size = 1, scale_to_range = FALSE, show_trajectory_graph = FALSE)
plot_cells(cds, genes = c("CG6701", "Pp2C1"), cell_size = 1, scale_to_range = FALSE, show_trajectory_graph = FALSE)
plot_cells(cds, genes = c("CG6701", "Pp2C1", 'ovo', 'otu', 'Sxl'), cell_size = 1, scale_to_range = FALSE, show_trajectory_graph = FALSE)
TARGET_dir = file.path("results", ANALYSIS_VERSION, "manual_annotation_wt13")
# To reproduce our work, run this script.
# We used Ubuntu 20.04 with an R package environment managed by renv.
# We used R version 4.1.2.
# Make it work on each of our computers
try({setwd("~/Dropbox/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("~/Dropbox (CahanLab)/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("c:/Users/DAndrewLab/Desktop/fruitfly_organogenesis/analysis/")}, silent = T)
renv::activate()
ANALYSIS_VERSION = "v18" # Where to put output
metadata = read.table(header = T, text=
"sample cellranger
wt_rep1 2021-10-27_scRNA_10x_3prime
wt_rep3 2022-08-11_scRNA_10x_3prime_CellRanger6.1.2
wt_early_rep1 2022-12-07_scRNA_10x_3prime_WT_early
wt_early_rep2 2022-12-13_scRNA_10x_3prime_WT_early2")
SAMPLE = "all"
source("R/set_up_environment.R")
TARGET_dir = file.path("results", ANALYSIS_VERSION, "manual_annotation_wt13")
object = readRDS(file.path("results", ANALYSIS_VERSION, "wt13_integrated/BDGP_automated_annotation_object.rds"))
# Make plots of late stage wildtype
# Figure 1b, Supp Fig 1a, 1b
TARGET_dir = file.path("results", ANALYSIS_VERSION, "figure_plots", 'wt_late_UMAP_proportion')
dir.create(TARGET_dir, recursive = TRUE)
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
qual_col_pals = qual_col_pals[rownames(qual_col_pals) != 'Dark2', ]
qual_col_pals = qual_col_pals[rownames(qual_col_pals) != 'Set2', ]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
col_vector = col_vector[col_vector != col_vector[4]]
col_vector = col_vector[col_vector != col_vector[4]]
wt_object = readRDS(file.path('results', ANALYSIS_VERSION, 'manual_annotation_wt13/manual_celltype_object4.rds'))
wt_object@meta.data[wt_object@meta.data$batch == 'rep_3', 'batch'] = 'rep_2'
withr::with_dir(TARGET_dir, {
# modifying the
p = DimPlot(wt_object, group.by = 'manual_celltypes', label = FALSE, label.size = 5) +
ggtitle("Stage 13 – 16 Drosophila Embryonic Cell Type Labels") +
xlim(c(-8, 12)) +
theme(text = element_text(size = 18))
ggsave(file.path("cell_type_UMAP_Unlabelled.png"), plot = p, width = 17, height = 10)
p = DimPlot(wt_object, group.by = 'manual_celltypes', label = TRUE, label.size = 5) +
ggtitle("Stage 13 – 16 Drosophila Embryonic Cell Type Labels") +
xlim(c(-8, 12)) +
theme(text = element_text(size = 18))
ggsave(file.path("cell_type_UMAP.png"), plot = p, width = 17, height = 10)
p = DimPlot(wt_object, group.by = 'batch', label = FALSE, label.size = 5) +
ggtitle("Stage 13 - 16: Batch") +
xlim(c(-8, 12)) +
theme(text = element_text(size = 22), legend.text=element_text(size=22))
ggsave(file.path("Batch_UMAP.png"), plot = p, width = 10, height = 8)
p = DimPlot(wt_object, group.by = 'seurat_clusters', label = TRUE, label.size = 8) +
ggtitle("Stage 13 - 16: Seurat Clusters") +
xlim(c(-8, 12)) +
theme(text = element_text(size = 22), legend.text=element_text(size=22))
ggsave(file.path("clusters_UMAP.png"), plot = p, width = 10, height = 8)
})
# plot out the proportion of each cell type
withr::with_dir(TARGET_dir, {
proportion_df = data.frame("cell_types" = names(table(wt_object@meta.data$manual_celltypes)),
"number_cells" = as.vector(table(wt_object@meta.data$manual_celltypes)))
proportion_df$cell_proportion = proportion_df$number_cells / sum(proportion_df$number_cells)
p<-ggplot(data=proportion_df, aes(x=reorder(cell_types, cell_proportion), y=cell_proportion, fill = cell_types)) +
scale_fill_discrete(name = "Cell Types") +
geom_bar(stat="identity") + theme_bw() + coord_flip() +
ylab("Stage 13 - 16: Total Cell Proportion") +
xlab("Cell Types") +
theme(text = element_text(size = 24), legend.position="none")
ggsave(filename = file.path("cell_proportion_bar.png"), plot = p, width = 10, height = 10)
})
