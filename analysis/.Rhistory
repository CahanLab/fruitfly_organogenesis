our_avg = our_avg_matrix[, our_ct]
other_avg = other_avg_matrix[, other_ct]
combination_df[temp_index, "spearman_correlation"] = cor(our_avg, other_avg, method = 'spearman')
}
our_ct
colnames(our_avg_matrix)
our_avg = our_avg_matrix[, as.vector(our_ct)]
for(temp_index in rownames(combination_df)) {
print(temp_index)
our_ct = combination_df[temp_index, 'our_ct']
other_ct = combination_df[temp_index, 'other_ct']
our_avg = our_avg_matrix[, as.vector(our_ct)]
other_avg = other_avg_matrix[, other_ct]
combination_df[temp_index, "spearman_correlation"] = cor(our_avg, other_avg, method = 'spearman')
}
combination_df
library(viridis)
p = ggplot(combination_df, aes(our_ct, other_ct, fill= spearman_correlation)) +
geom_tile() +
scale_fill_viridis(discrete=FALSE) + scale_x_discrete(guide = guide_axis(angle = 45)) +
ggtitle("compare_neural_df")
p
DimPlot(our_object)
DimPlot(our_data, group.by = 'Seurat_cluster')
DimPlot(our_data, group.by = 'Seurat_clusters')
DimPlot(our_data, group.by = 'seurat_clusters')
TARGET_dir
ggsave(filename = file.path(TARGET_dir, 'seroka_cell_correlation.png'), plot = p, width = 14, height = 6)
DimPlot(our_data)
ggsave(filename = file.path(TARGET_dir, 'neural_UMAP.png'), plot = p, width = 14, height = 6)
Idents(NB7_1,  WhichCells(NB7_1, idents=c('3', '11')))<-'newborn.N'
Idents(our_data,  WhichCells(our_data, idents=c('4', '15')))<-'old.N'
DimPlot(our_data)
Idents(our_data,  WhichCells(our_data, idents=33))<-'Enteric Neuron'
Idents(our_data,  WhichCells(our_data, idents=c(3, 11)))<-'newborn.N'
Idents(our_data,  WhichCells(our_data, idents=c(4, 15)))<-'old.N'
our_data = readRDS(file.path("results", ANALYSIS_VERSION, "manual_annotation_wt13/manual_celltype_object3.rds"))
our_data = our_data[, our_data$manual_celltypes == 'CNS']
Idents(our_data,  WhichCells(our_data, idents=33))<-'Enteric Neuron'
Idents(our_data,  WhichCells(our_data, idents=c(3, 11)))<-'newborn.N'
Idents(our_data,  WhichCells(our_data, idents=c(4, 15)))<-'old.N'
DimPlot(our_data)
ggsave(filename = file.path(TARGET_dir, 'neural_ct_UMAP.png'), plot = p, width = 14, height = 6)
p = DimPlot(our_data)
ggsave(filename = file.path(TARGET_dir, 'neural_UMAP.png'), plot = p, width = 14, height = 6)
p = DimPlot(our_data)
ggsave(filename = file.path(TARGET_dir, 'neural_ct_UMAP.png'), plot = p, width = 14, height = 6)
seurat_data = readRDS("accessory_data/Doe_Drosophila_Embryo_Atlas/script/neuronal_subtype_Doe.rds")
p = DimPlot(our_data)
ggsave(filename = file.path(TARGET_dir, 'neural_UMAP.png'), plot = p, width = 14, height = 6)
Idents(our_data,  WhichCells(our_data, idents=33))<-'Enteric Neuron'
Idents(our_data,  WhichCells(our_data, idents=c(3, 11)))<-'newborn.N'
Idents(our_data,  WhichCells(our_data, idents=c(4, 15)))<-'old.N'
p = DimPlot(our_data)
seurat_data = readRDS("accessory_data/Doe_Drosophila_Embryo_Atlas/script/neuronal_subtype_Doe.rds")
our_data = readRDS(file.path("results", ANALYSIS_VERSION, "manual_annotation_wt13/manual_celltype_object3.rds"))
our_data = our_data[, our_data$manual_celltypes == 'CNS']
p = DimPlot(our_data)
ggsave(filename = file.path(TARGET_dir, 'neural_UMAP.png'), plot = p, width = 14, height = 6)
Idents(our_data,  WhichCells(our_data, idents=33))<-'Enteric Neuron'
Idents(our_data,  WhichCells(our_data, idents=c(3, 11)))<-'newborn.N'
Idents(our_data,  WhichCells(our_data, idents=c(4, 15)))<-'old.N'
p = DimPlot(our_data)
ggsave(filename = file.path(TARGET_dir, 'neural_ct_UMAP.png'), plot = p, width = 14, height = 6)
library(Seurat)
# To reproduce our work, run this script.
# We used Ubuntu 20.04 with an R package environment managed by renv.
# We used R version 4.1.2.
# Make it work on each of our computers
try({setwd("~/Dropbox/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("~/Dropbox (CahanLab)/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("c:/Users/DAndrewLab/Desktop/fruitfly_organogenesis/analysis/")}, silent = T)
renv::activate()
ANALYSIS_VERSION = "v18" # Where to put output
metadata = read.table(header = T, text=
"sample cellranger
wt_rep1 2021-10-27_scRNA_10x_3prime
wt_rep3 2022-08-11_scRNA_10x_3prime_CellRanger6.1.2
wt_early_rep1 2022-12-07_scRNA_10x_3prime_WT_early
wt_early_rep2 2022-12-13_scRNA_10x_3prime_WT_early2")
SAMPLE = "all"
source("R/set_up_environment.R")
early_wt_object = readRDS("results/v18/manual_annotation_early_wt12/manual_celltype_object1.rds")
DimPlot(early_wt_object)
DimPlot(early_wt_object, label = TRUE)
sub_early_object = early_wt_object[, early_wt_object$seurat_clusters %in% c(32, 24)]
DimPlot(sub_early_object)
markers = SeuratWrappers::RunPresto(sub_early_object, ident.1 = 32, logfc.threshold = 0, min.pct = 0.1, group.by = 'seurat_clusters')
View(markers)
makers_32 = markers[markers$p_val_adj < 0.05 & markers$avg_log2FC > 0, ]
makers_24 = markers[markers$p_val_adj < 0.05 & markers$avg_log2FC < 0, ]
View(makers_24)
View(makers_32)
TARGET_dir = file.path("results", ANALYSIS_VERSION, "germ_cell_exploration")
dir.create(TARGET_dir)
early_wt_object = readRDS("results/v18/manual_annotation_early_wt12/manual_celltype_object1.rds")
sub_early_object = early_wt_object[, early_wt_object$seurat_clusters %in% c(32, 24)]
DimPlot(sub_early_object)
markers = SeuratWrappers::RunPresto(sub_early_object, ident.1 = 32, logfc.threshold = 0, min.pct = 0.1, group.by = 'seurat_clusters')
makers_32 = markers[markers$p_val_adj < 0.05 & markers$avg_log2FC > 0, ]
makers_24 = markers[markers$p_val_adj < 0.05 & markers$avg_log2FC < 0, ]
write.csv(markers_32, file = file.path(TARGET_dir, "markers_32_genes.csv"))
markers_32 = markers[markers$p_val_adj < 0.05 & markers$avg_log2FC > 0, ]
markers_24 = markers[markers$p_val_adj < 0.05 & markers$avg_log2FC < 0, ]
write.csv(markers_32, file = file.path(TARGET_dir, "markers_32_genes.csv"))
write.csv(markers_24, file = file.path(TARGET_dir, "markers_24_genes.csv"))
library(enrichR)
enrichR::setEnrichrSite("FlyEnrichr")
markers_24
enrichment_results = enrichR::enrichr(
genes = rownames(markers_24),
databases = c(
"GO_Biological_Process_2018",
"GO_Molecular_Function_2018"
)
)
biological_analysis = enrichment_results$GO_Biological_Process_2018
biological_analysis = biological_analysis[biological_analysis$Adjusted.P.value < 0.05, ]
View(biological_analysis)
write.csv(biological_analysis, file = file.path(TARGET_dir, "GO_24_enrichment.csv"))
# cluster 32
enrichment_results = enrichR::enrichr(
genes = rownames(markers_32),
databases = c(
"GO_Biological_Process_2018",
"GO_Molecular_Function_2018"
)
)
biological_analysis = enrichment_results$GO_Biological_Process_2018
biological_analysis = biological_analysis[biological_analysis$Adjusted.P.value < 0.05, ]
View(biological_analysis)
# cluster 32
enrichment_results = enrichR::enrichr(
genes = rownames(markers_32),
databases = c(
"GO_Biological_Process_2018",
"GO_Molecular_Function_2018"
)
)
biological_analysis = enrichment_results$GO_Biological_Process_2018
biological_analysis = biological_analysis[biological_analysis$Adjusted.P.value < 0.05, ]
View(biological_analysis)
write.csv(biological_analysis, file = file.path(TARGET_dir, "GO_32_enrichment.csv"))
DimPlot(sub_early_object)
#######################################
late_wt_object = readRDS("results/v18/manual_annotation_wt13/manual_celltype_object3.rds")
table(late_wt_object$manual_celltypes)
sub_late_object = late_wt_object[, late_wt_object$manual_celltypes == 'Germ Cell']
DimPlot(sub_late_object)
DimPlot(sub_late_object, group.by = 'manual_celltypes')
#######################################
late_wt_object = readRDS("results/v18/manual_annotation_wt13/manual_celltype_object3.rds")
DimPlot(sub_late_object, group.by = 'manual_celltypes')
DimPlot(late_wt_object, group.by = 'manual_celltypes')
sub_late_object = late_wt_object[, late_wt_object$manual_celltypes == 'Germ Cell']
DimPlot(sub_late_object, group.by = 'manual_celltypes')
sub_late_object %<>% FindVariableFeatures(selection.method = "vst", nfeatures = 2000)
sub_late_object %<>% ScaleData(features = VariableFeatures(object = object))
sub_late_object %<>% ScaleData(features = VariableFeatures(object = sub_late_object))
sub_late_object %<>% RunPCA(features = VariableFeatures(object = sub_late_object), npcs = 100)
sub_late_object %<>% FindNeighbors(dims = 1:num_pc)
num_pc = 20
sub_late_object %<>% FindNeighbors(dims = 1:num_pc)
sub_late_object %<>% RunUMAP(dim = 1:num_pc)
sub_late_object %<>% FindClusters()
DimPlot(sub_late_object)
sub_late_object = late_wt_object[, late_wt_object$manual_celltypes == 'Germ Cell']
DimPlot(sub_late_object, group.by = 'manual_celltypes')
sub_late_object %<>% FindClusters(resolution = 1)
sub_late_object %<>% FindClusters(resolution = 1)
sub_late_object %<>% FindClusters()
late_wt_object %<>% FindClusters()
DimPlot(late_wt_object)
late_wt_object %<>% FindClusters(resolution = 1)
DimPlot(late_wt_object)
late_wt_object %<>% FindClusters(resolution = 2)
DimPlot(late_wt_object)
late_wt_object %<>% FindClusters(resolution = 4)
DimPlot(late_wt_object)
#######################################
late_wt_object = readRDS("results/v18/manual_annotation_wt13/manual_celltype_object3.rds")
TARGET_dir = file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_germ")
dir.create(TARGET_dir)
wt_late_object = readRDS(file.path("results", ANALYSIS_VERSION, "manual_annotation_wt13/manual_celltype_object3.rds"))
##########################
# TODO the below will be changed as time goes on
wt_early_object = readRDS(file.path("results", ANALYSIS_VERSION, "early_wt12_integrated/BDGP_automated_annotation_object.rds"))
sub_wt_early_object = subset(wt_early_object, subset = Integrated_tentativeCellType == 'germ cell')
sub_wt_early_object$experimental_condition = 'early'
sub_wt_late_object = subset(wt_late_object, subset = manual_celltypes == "Germ Cell")
sub_wt_late_object$experimental_condition = 'late'
combined_ct_object = merge(sub_wt_early_object, sub_wt_late_object)
object = Seurat::CreateSeuratObject(combined_ct_object@assays$RNA@counts, project = 'Germ Cell')
object@meta.data$experimental_condition = combined_ct_object@meta.data$experimental_condition
object@meta.data$batch = paste0(combined_ct_object@meta.data$experimental_condition, "_", combined_ct_object@meta.data$batch)
object = Seurat::NormalizeData(object)
cellCycleMarkers = read.csv("accessory_data/cellCycleMarkers.csv", skip = 1, header = T)
object %<>% CellCycleScoring(s.features = cellCycleMarkers$S.phase.markers., g2m.features = cellCycleMarkers$G2.M.phase.markers.)
# start monocle3
expression_matrix = object@assays$RNA@counts
cell_metadata = object@meta.data
gene_annotation = object@assays$RNA@meta.features
gene_annotation$gene_short_name = rownames(gene_annotation)
cds <- new_cell_data_set(expression_matrix,
cell_metadata = cell_metadata,
gene_metadata = gene_annotation)
library(monocle3)
set.seed(123)
TARGET_dir = file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_germ")
dir.create(TARGET_dir)
wt_late_object = readRDS(file.path("results", ANALYSIS_VERSION, "manual_annotation_wt13/manual_celltype_object3.rds"))
##########################
# TODO the below will be changed as time goes on
wt_early_object = readRDS(file.path("results", ANALYSIS_VERSION, "early_wt12_integrated/BDGP_automated_annotation_object.rds"))
sub_wt_early_object = subset(wt_early_object, subset = Integrated_tentativeCellType == 'germ cell')
sub_wt_early_object$experimental_condition = 'early'
sub_wt_late_object = subset(wt_late_object, subset = manual_celltypes == "Germ Cell")
sub_wt_late_object$experimental_condition = 'late'
combined_ct_object = merge(sub_wt_early_object, sub_wt_late_object)
object = Seurat::CreateSeuratObject(combined_ct_object@assays$RNA@counts, project = 'Germ Cell')
object@meta.data$experimental_condition = combined_ct_object@meta.data$experimental_condition
object@meta.data$batch = paste0(combined_ct_object@meta.data$experimental_condition, "_", combined_ct_object@meta.data$batch)
object = Seurat::NormalizeData(object)
cellCycleMarkers = read.csv("accessory_data/cellCycleMarkers.csv", skip = 1, header = T)
object %<>% CellCycleScoring(s.features = cellCycleMarkers$S.phase.markers., g2m.features = cellCycleMarkers$G2.M.phase.markers.)
# start monocle3
expression_matrix = object@assays$RNA@counts
cell_metadata = object@meta.data
gene_annotation = object@assays$RNA@meta.features
gene_annotation$gene_short_name = rownames(gene_annotation)
cds <- new_cell_data_set(expression_matrix,
cell_metadata = cell_metadata,
gene_metadata = gene_annotation)
cds <- preprocess_cds(cds, num_dim = 100)
cds <- reduce_dimension(cds)
plot_cells(cds, label_groups_by_cluster=TRUE,  color_cells_by = "batch", cell_size = 1, label_cell_groups = FALSE)
plot_cells(cds, label_groups_by_cluster=TRUE,  color_cells_by = "batch", cell_size = 1, label_cell_groups = FALSE)
ggsave(file.path(TARGET_dir, 'monocle3_no_batch_corrected_UMAP.png'), width = 8, height = 6)
cds <- cluster_cells(cds, resolution = 1e-4)
plot_cells(cds, color_cells_by = "cluster", label_cell_groups = FALSE, cell_size = 1)
ggsave(file.path(TARGET_dir, 'monocle3_no_batch_corrected_cluster.png'), width = 8, height = 6)
marker_test_res <- monocle3::top_markers(cds, group_cells_by="cluster",
reference_cells=1000, cores=8)
write.csv(marker_test_res, file = file.path(TARGET_dir, "top_markers_monocle.csv"))
rank_sum_results = presto::wilcoxauc(normalized_counts(cds), cds@clusters$UMAP$clusters)
write.csv(rank_sum_results, file = file.path(TARGET_dir, "rank_sum_test.csv"))
########################################
# let's solve the identity of cluster 1 first
dir.create(file.path(TARGET_dir, 'cluster_process'))
marker_test_res = read.csv(file.path(TARGET_dir, "top_markers_monocle.csv"), row.names = 1)
withr::with_dir(file.path(TARGET_dir, 'cluster_process'), {
for(cluster in unique(marker_test_res$cell_group)) {
sub_marker_test_res = marker_test_res[marker_test_res$cell_group == cluster, ]
enrichment_results = enrichR::enrichr(
genes = sub_marker_test_res$gene_id,
databases = c(
"GO_Biological_Process_2018",
"GO_Molecular_Function_2018"
)
)
biological_analysis = enrichment_results$GO_Biological_Process_2018
write.csv(biological_analysis, file = paste0(cluster, "_biological_process.csv"))
}
})
plot_cells(cds,
genes=c("nur", 'RpL38', 'RpL30'),
label_cell_groups=FALSE,
show_trajectory_graph=FALSE, cell_size = 2)
plot_cells(cds, color_cells_by = "Phase", label_cell_groups = FALSE, cell_size = 1, show_trajectory_graph = FALSE)
plot_cells(cds, color_cells_by = "nFeature_RNA", label_cell_groups = FALSE, cell_size = 1, show_trajectory_graph = FALSE)
plot_cells(cds, color_cells_by = "nCount_RNA", label_cell_groups = FALSE, cell_size = 1, show_trajectory_graph = FALSE)
cds@colData$log_nCount = log(cds@colData$nCount_RNA)
plot_cells(cds, color_cells_by = "log_nCount", label_cell_groups = FALSE, cell_size = 1, show_trajectory_graph = FALSE)
cds@colData$log_nFeature = log(cds@colData$nFeature_RNA)
plot_cells(cds, color_cells_by = "log_nFeature", label_cell_groups = FALSE, cell_size = 1, show_trajectory_graph = FALSE)
ggsave(file.path(TARGET_dir, 'monocle3_no_batch_corrected_phase.png'), width = 8, height = 6)
cds <- learn_graph(cds)
plot_cells(cds,
color_cells_by = "batch",
label_groups_by_cluster=FALSE,
label_leaves=FALSE,
label_branch_points=FALSE)
cds <- order_cells(cds)
plot_cells(cds,
color_cells_by = "pseudotime",
label_cell_groups=FALSE,
label_leaves=FALSE,
label_branch_points=FALSE,
graph_label_size=1.5, cell_size = 1, show_trajectory_graph = FALSE)
ggsave(file.path(TARGET_dir, 'monocle3_no_batch_corrected_pt.png'), width = 8, height = 6)
saveRDS(cds, file = file.path(TARGET_dir, "monocle3_no_batch_correct_object.rds"))
cds = readRDS("results/v18/refined_wt_late_early_germ/monocle3_no_batch_correct_object.rds")
late_wt_object@meta.data$weird_cluster = NA
late_wt_object@meta.data$weird_cluster = 'No'
cds@clusters
monocle3::clusters(cds)
monocle3::clusters(cds) == 1
naems(monocle3::clusters(cds))[monocle3::clusters(cds) == 1]
names(monocle3::clusters(cds))[monocle3::clusters(cds) == 1]
late_wt_object@meta.data[names(monocle3::clusters(cds))[monocle3::clusters(cds) == 1], 'weird_cluster'] = 'Yes'
DimPlot(late_wt_object, group.by = 'weird_cluster')
late_wt_object@meta.data[names(monocle3::clusters(cds))[monocle3::clusters(cds) == 2], 'weird_cluster'] = 'Yes'
DimPlot(late_wt_object, group.by = 'weird_cluster')
late_wt_object@meta.data$weird_cluster = 'No'
late_wt_object@meta.data[names(monocle3::clusters(cds))[monocle3::clusters(cds) == 2], 'weird_cluster'] = 'Yes'
DimPlot(late_wt_object, group.by = 'weird_cluster')
late_wt_object@meta.data$weird_cluster = 'No'
late_wt_object@meta.data[names(monocle3::clusters(cds))[monocle3::clusters(cds) == 1], 'weird_cluster'] = 'Yes'
DimPlot(late_wt_object, group.by = 'weird_cluster')
sub_late_object = late_wt_object[, late_wt_object$manual_celltypes == 'Germ Cell']
sub_late_object = late_wt_object[, late_wt_object$manual_celltypes == 'Germ Cell']
#######################################
late_wt_object = readRDS("results/v18/manual_annotation_wt13/manual_celltype_object3.rds")
late_wt_object@meta.data$weird_cluster = 'No'
late_wt_object@meta.data[names(monocle3::clusters(cds))[monocle3::clusters(cds) == 1], 'weird_cluster'] = 'Yes'
DimPlot(late_wt_object, group.by = 'weird_cluster')
TARGET_Dir
TARGET_dir
TARGET_dir = file.path("results", ANALYSIS_VERSION, "germ_cell_exploration")
ggsave(filename = file.path(TARGET_dir, 'weird_germ_cluster.png'), width = 8, height = 6)
sub_late_object = late_wt_object[, late_wt_object$manual_celltypes == 'Germ Cell']
late_wt_object$manual_celltypes
late_wt_object$manual_celltypes == 'Germ Cell'
sum(late_wt_object$manual_celltypes == 'Germ Cell')
DimPlot(late_wt_object)
DimPlot(late_wt_object, group.by = 'manual_celltypes')
table(late_wt_object$manual_celltypes)
sum(late_wt_object$manual_celltypes == 'Germ Cell')
sum(late_wt_object$manual_celltypes == 'CNS')
late_wt_object$manual_celltypes == 'CNS'
sub_late_object = late_wt_object[, as.vector(late_wt_object$manual_celltypes == 'Germ Cell')]
sub_late_object = subset(late_wt_object, subset = manual_celltypes == 'Germ Cell')
DimPlot(sub_late_object, group.by = 'manual_celltypes')
late_wt_object %<>% FindClusters(resolution = 4)
DimPlot(late_wt_object)
sub_late_object %<>% FindClusters(resolution = 4)
sub_late_object %<>% FindVariableFeatures(selection.method = "vst", nfeatures = 2000)
sub_late_object %<>% ScaleData(features = VariableFeatures(object = sub_late_object))
sub_late_object %<>% RunPCA(features = VariableFeatures(object = sub_late_object), npcs = 100)
num_pc = 20
sub_late_object %<>% FindNeighbors(dims = 1:num_pc)
sub_late_object %<>% RunUMAP(dim = 1:num_pc)
sub_late_object %<>% FindClusters()
sub_late_object = subset(late_wt_object, subset = manual_celltypes == 'Germ Cell')
DimPlot(sub_late_object, group.by = 'manual_celltypes')
sub_late_object = subset(late_wt_object, subset = manual_celltypes == 'Germ Cell')
DimPlot(sub_late_object, group.by = 'manual_celltypes')
old_sub_late_object = sub_late_object
sub_late_object %<>% FindVariableFeatures(selection.method = "vst", nfeatures = 2000)
sub_late_object %<>% ScaleData(features = VariableFeatures(object = sub_late_object))
sub_late_object %<>% RunPCA(features = VariableFeatures(object = sub_late_object), npcs = 100)
num_pc = 20
sub_late_object %<>% FindNeighbors(dims = 1:num_pc)
sub_late_object %<>% RunUMAP(dim = 1:num_pc)
sub_late_object %<>% FindClusters()
DimPlot(sub_late_object)
sub_late_object %<>% FindClusters(resolution = 0.5)
DimPlot(sub_late_object)
sub_late_object %<>% FindClusters(resolution = 0.1)
DimPlot(sub_late_object)
old_sub_late_object@meta.data$new_cluster = sub_late_object@meta.data$seurat_clusters
DimPlot(sub_late_object, group.by = 'new_cluster')
DimPlot(old_sub_late_object, group.by = 'new_cluster')
ggsave(filename = file.path(TARGET_dir, 'new_old_late_cluster.png'), width = 8, height = 6)
markers = SeuratWrappers::RunPresto(old_sub_late_object, ident.1 = 1, logfc.threshold = 0, min.pct = 0.1, group.by = 'new_cluster')
markers_1 = markers[markers$p_val_adj < 0.05 & markers$avg_log2FC > 0, ]
markers_2 = markers[markers$p_val_adj < 0.05 & markers$avg_log2FC < 0, ]
write.csv(markers_1, file = file.path(TARGET_dir, "late_markers_1_genes.csv"))
write.csv(markers_2, file = file.path(TARGET_dir, "late_markers_2_genes.csv"))
enrichment_results = enrichR::enrichr(
genes = rownames(markers_1),
databases = c(
"GO_Biological_Process_2018",
"GO_Molecular_Function_2018"
)
)
biological_analysis = enrichment_results$GO_Biological_Process_2018
biological_analysis = biological_analysis[biological_analysis$Adjusted.P.value < 0.05, ]
write.csv(biological_analysis, file = file.path(TARGET_dir, "GO_late_1_enrichment.csv"))
# cluster 32
enrichment_results = enrichR::enrichr(
genes = rownames(markers_2),
databases = c(
"GO_Biological_Process_2018",
"GO_Molecular_Function_2018"
)
)
biological_analysis = enrichment_results$GO_Biological_Process_2018
biological_analysis = biological_analysis[biological_analysis$Adjusted.P.value < 0.05, ]
write.csv(biological_analysis, file = file.path(TARGET_dir, "GO_late_2_enrichment.csv"))
library(Seurat)
TARGET_dir = file.path("results", ANALYSIS_VERSION, "wt13_match_CNS_seroka")
dir.create(TARGET_dir)
seurat_data = readRDS("accessory_data/Doe_Drosophila_Embryo_Atlas/script/neuronal_subtype_Doe.rds")
our_data = readRDS(file.path("results", ANALYSIS_VERSION, "manual_annotation_wt13/manual_celltype_object3.rds"))
our_data = our_data[, our_data$manual_celltypes == 'CNS']
our_data$manual_celltypes = our_data$seurat_clusters
other_data = seurat_data
other_data$cell_type = seurat_data@active.ident
calc_spearman_correlation <- function(other_data, our_data) {
other_meta = other_data@meta.data
other_exp = other_data@assays$RNA@data
our_meta = our_data@meta.data
our_exp = our_data@assays$RNA@data
combination_df = expand.grid(unique(our_meta$manual_celltypes), unique(other_meta$cell_type))
colnames(combination_df) = c('our_ct', 'other_ct')
combination_df$spearman_correlation = NA
intersect_genes = intersect(rownames(other_exp), rownames(our_exp))
other_exp = other_exp[intersect_genes, ]
our_exp = our_exp[intersect_genes, ]
our_avg_matrix = matrix(data = NA,
nrow = nrow(our_exp),
ncol = length(unique(combination_df$our_ct)))
colnames(our_avg_matrix) = unique(combination_df$our_ct)
rownames(our_avg_matrix) = rownames(our_exp)
for(ct in colnames(our_avg_matrix)) {
sub_our_met = our_meta[our_meta$manual_celltypes == ct, ]
sub_our_exp = our_exp[, rownames(sub_our_met)]
our_avg = apply(sub_our_exp, FUN = mean, MARGIN = 1)
our_avg_matrix[, ct] = our_avg
}
other_avg_matrix = matrix(data = NA,
nrow = nrow(other_exp),
ncol = length(unique(combination_df$other_ct)))
colnames(other_avg_matrix) = unique(combination_df$other_ct)
rownames(other_avg_matrix) = rownames(other_exp)
for(ct in colnames(other_avg_matrix)) {
sub_other_met = other_meta[other_meta$cell_type == ct, ]
sub_other_exp = other_exp[, rownames(sub_other_met)]
other_avg = apply(sub_other_exp, FUN = mean, MARGIN = 1)
other_avg_matrix[, ct] = other_avg
}
for(temp_index in rownames(combination_df)) {
print(temp_index)
our_ct = combination_df[temp_index, 'our_ct']
other_ct = combination_df[temp_index, 'other_ct']
our_avg = our_avg_matrix[, as.vector(our_ct)]
other_avg = other_avg_matrix[, other_ct]
combination_df[temp_index, "spearman_correlation"] = cor(our_avg, other_avg, method = 'spearman')
}
return(combination_df)
}
combination_df = calc_spearman_correlation(other_data, our_data)
saveRDS(combination_df, file = file.path(TARGET_dir, 'spearman_correlation_wt13_Seroka.rds'))
library(viridis)
p = ggplot(combination_df, aes(our_ct, other_ct, fill= spearman_correlation)) +
geom_tile() +
scale_fill_viridis(discrete=FALSE) + scale_x_discrete(guide = guide_axis(angle = 45)) +
ggtitle("compare_neural_df")
ggsave(filename = file.path(TARGET_dir, 'seroka_cell_correlation.png'), plot = p, width = 14, height = 6)
p = DimPlot(our_data)
ggsave(filename = file.path(TARGET_dir, 'neural_UMAP.png'), plot = p, width = 14, height = 6)
Idents(our_data,  WhichCells(our_data, idents=33))<-'Enteric Neuron'
Idents(our_data,  WhichCells(our_data, idents=c(3, 11)))<-'newborn.N'
Idents(our_data,  WhichCells(our_data, idents=c(4, 15)))<-'old.N'
p = DimPlot(our_data)
ggsave(filename = file.path(TARGET_dir, 'neural_ct_UMAP.png'), plot = p, width = 14, height = 6)
p = FeaturePlot(our_data, features = c('mira'))
p
p = FeaturePlot(our_data, features = c('mira', 'tap'))
p
p = FeaturePlot(our_data, features = c('mira', 'tap', 'Hey'))
p
p = FeaturePlot(our_data, features = c('mira', 'tap', 'Hey', 'nSyb'))
p
p = FeaturePlot(our_data, features = c('mira', 'tap', 'Hey', 'nSyb', 'brp'))
p
ggsave(filename = file.path(TARGET_dir, 'neural_marker_genes_UMAP.png'), plot = p, width = 14, height = 6)
ggsave(filename = file.path(TARGET_dir, 'neural_marker_genes_UMAP.png'), plot = p, width = 14, height = 10)
other_data
dim(other_data)
####################################
library(singleCellNet)
commonGenes = intersect(rownames(other_data@assays$RNA@counts), rownames(our_data@assays$RNA@counts))
expTMraw = other_data@assays$RNA@counts
exp_raw = other_data@assays$RNA@counts
st_raw = other_data@meta.data
exp_raw = exp_raw[commonGenes,]
set.seed(123)
table(st_raw)
table(st_raw$cell_type)
stList = splitCommon(sampTab=st_raw, ncells=50, dLevel="cell_type")
stTrain = stList[[1]]
expTrain = exp_raw[,rownames(stTrain)]
stTrain
stTrain$barcode = rownames(stTrain)
system.time(class_info<-scn_train(stTrain = stTrain, expTrain = expTrain, nTopGenes = 10, nRand = 70, nTrees = 1000,
nTopGenePairs = 25, dLevel = "barcode", colName_samp = "cell_type"))
table(stTrain)
View(stTrain)
expTrain = as.matrix(expTrain)
system.time(class_info<-scn_train(stTrain = stTrain, expTrain = expTrain, nTopGenes = 10, nRand = 70, nTrees = 1000,
nTopGenePairs = 25, dLevel = "barcode", colName_samp = "cell_type"))
system.time(class_info<-scn_train(stTrain = stTrain, expTrain = expTrain, nTopGenes = 10, nRand = 70, nTrees = 1000,
nTopGenePairs = 25, dLevel = "cell_type", colName_samp = "barcode"))
query_exp = our_data@assays$RNA@counts
our_classification = scn_predict(class_info[['cnProc']], query_exp, nrand=12)
our_Class
our_class
our_classification
our_classification = our_classification[, rownames(our_data@meta.data)]
our_classification
our_classification[1:5, 1:5]
our_classification = t(our_classification)
our_data@meta.data = cbind(our_data@meta.data, our_classification)
FeaturePlot(our_data, 'GMC')
rownames(our_classification)
colnames(our_classification)
FeaturePlot(our_data, c('NB', 'GMC', 'newborn.N', 'young.N', 'old.N'))
ggsave(filename = file.path(TARGET_dir, 'classification_scores_UMAP.png'), plot = p, width = 14, height = 10)
p = FeaturePlot(our_data, c('NB', 'GMC', 'newborn.N', 'young.N', 'old.N'))
ggsave(filename = file.path(TARGET_dir, 'classification_scores_UMAP.png'), plot = p, width = 14, height = 10)
