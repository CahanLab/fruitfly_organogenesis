switch = "y"
) +
theme(
panel.spacing = unit(x = 1, units = "lines"),
strip.background = element_blank()
) +
theme(strip.text.x = element_blank(), axis.text.x=element_text(angle=45, vjust = 1, hjust=1)) +
ggtitle("Stage 10-12 Embryos")
ggsave(filename = file.path(TARGET_dir, "plasmatocytes_genes_focused.png"), plot = p, width = 14, height = 7)
##### To get the anti-microbial genes #####
gene_list[['antimicrobial']] = c("Drs", "Dro", "DptA", "DptB",'CecA1', "CecA2",
"Def", 'Mtk', 'BomS4', 'BomBc2', 'BomT1', 'BomS3',
'BomBc1', 'BomS2', 'BomT3', 'BomBc3', 'BomS6',
'BomS1', 'BomT2', 'BomS5')
big_plot_df = data.frame()
for(temp_cat in c("antimicrobial")) {
temp_plot_df = modified_dotPlot_df(object, features = gene_list[[temp_cat]], group.by = 'manual_celltypes')
temp_plot_df$matrisome_type = temp_cat
big_plot_df = rbind(big_plot_df, temp_plot_df)
}
big_plot_df$id = factor(big_plot_df$id, levels = sort(unique(big_plot_df$id), decreasing = TRUE))
p <- ggplot(data = big_plot_df, mapping = aes_string(y = 'id', x = 'features.plot')) +
geom_point(mapping = aes_string(size = 'pct.exp', color = 'avg.exp.scaled')) +
#scale.func(range = c(0, 100), limits = c(scale.min, scale.max)) +
guides(size = guide_legend(title = 'percent expressed')) +
guides(color = guide_colorbar(title = 'scaled average expression')) +
scale_colour_viridis_c() +
labs(
x = 'Anti-microbial Genes',
y = 'Cell Types'
) +
theme_classic()  +
facet_grid(
cols = vars(matrisome_type),
scales = "free_x",
space = "free_x",
switch = "y"
) +
scale_size(limits = c(0, 100)) +
theme(
panel.spacing = unit(x = 1, units = "lines"),
strip.background = element_blank()
) +
theme(strip.text.x = element_blank(), axis.text.x=element_text(angle=45, vjust = 1, hjust=1)) +
ggtitle("Stage 10-12 Embryos")
ggsave(filename = file.path(TARGET_dir, "plasmatocytes_genes_anti-microbial_wt12.png"), plot = p, width = 14, height = 7)
##### This is to get the genes for Chitin cuticle genes #####
interesting_cat_list = c("Cuticle; Tweedle", "Cuticle", "Chitin-binding-domain-containing Proteins", "Cuticle; R&R Chitin-binding-domain-containing Proteins")
big_plot_df = data.frame()
for(temp_cat in interesting_cat_list) {
if(temp_cat == 'Other') {
matrisome_genes = c('Ppn', 'Pxn', 'SPARC', 'Tig')
}
else {
temp_matrisome_df = matrisome_df[matrisome_df$Matrisome.Class...Protein.Family == temp_cat, ]
matrisome_genes = temp_matrisome_df$Gene.Name
matrisome_genes = intersect(matrisome_genes, rownames(object))
}
temp_plot_df = modified_dotPlot_df(object, features = matrisome_genes, group.by = 'manual_celltypes')
#temp_plot_df$avg.exp.scaled = NULL
temp_plot_df$matrisome_type = temp_cat
good_genes = filter_genes(temp_plot_df)
temp_plot_df = temp_plot_df[temp_plot_df$features.plot %in% good_genes, ]
big_plot_df = rbind(big_plot_df, temp_plot_df)
}
big_plot_df$log_exp = log1p(big_plot_df$avg.exp)
p <- ggplot(data = big_plot_df, mapping = aes_string(x = 'id', y = 'features.plot')) +
geom_point(mapping = aes_string(size = 'pct.exp', color = 'avg.exp.scaled')) +
#scale.func(range = c(0, 100), limits = c(scale.min, scale.max)) +
guides(size = guide_legend(title = 'percent expressed')) +
guides(color = guide_colorbar(title = 'scaled average expression')) +
scale_colour_viridis_c() +
labs(
x = 'Cell Types',
y = 'Genes'
) +
theme_classic()  +
facet_grid(
rows = vars(matrisome_type),
scales = "free_y",
space = "free_y",
switch = "x"
) +
theme(
panel.spacing = unit(x = 1, units = "lines"),
strip.background = element_blank()
) +
theme(strip.text.y = element_text(angle = 0), axis.text.x=element_text(angle=45, vjust = 1, hjust=1)) +
ggtitle("Stage 10-12 Embryos")
ggsave(filename = file.path(TARGET_dir, "chitin_genes.png"), plot = p, width = 12, height = 19)
# To reproduce our work, run this script.
# We used Ubuntu 20.04 with an R package environment managed by renv.
# We used R version 4.1.2.
# Make it work on each of our computers
try({setwd("~/Dropbox/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("~/Dropbox (CahanLab)/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("c:/Users/DAndrewLab/Desktop/fruitfly_organogenesis/analysis/")}, silent = T)
renv::activate()
ANALYSIS_VERSION = "v18" # Where to put output
metadata = read.table(header = T, text=
"sample cellranger
wt_rep1 2021-10-27_scRNA_10x_3prime
wt_rep3 2022-08-11_scRNA_10x_3prime_CellRanger6.1.2
wt_early_rep1 2022-12-07_scRNA_10x_3prime_WT_early
wt_early_rep2 2022-12-13_scRNA_10x_3prime_WT_early2")
SAMPLE = "all"
source("R/set_up_environment.R")
# correlate cell line bulk expression with cell types in embryos
# Fig 7A
# Supp Fig 11
TARGET_dir = file.path("results", ANALYSIS_VERSION, 'identify_celllines')
combination_df = read.csv(file.path(TARGET_dir, 'spearman_correlation_cl_ct.csv'), row.names = 1)
combination_df$stages = stringr::str_split_fixed(combination_df$our_ct,pattern = "_", n = 2)[, 2]
combination_df$cell_types = stringr::str_split_fixed(combination_df$our_ct,pattern = "_", n = 2)[, 1]
em_cls = c("1182.4H_", "GM2_", "Kc167_", "S1_", "S3_")
filter_correlation_df <- function(combination_df, em_cls) {
filtered_df = data.frame()
for(cell_line in em_cls) {
temp_comb_df = combination_df[grep(cell_line, combination_df$cell_lines), ]
temp_comb_df$cell_line = cell_line
filtered_df = rbind(filtered_df, temp_comb_df)
}
return(filtered_df)
}
my_filtered_df = filter_correlation_df(combination_df, em_cls)
scale_values <- function(x){(x-min(x))/(max(x)-min(x))}
scale_correlation_df <- function(my_filtered_df) {
my_filtered_df$scale_spearman_correlation = NA
returned_df = data.frame()
for(ct in unique(my_filtered_df$cell_line)) {
temp_filtered_df = my_filtered_df[my_filtered_df$cell_line == ct, ]
scaled_correlation = scale_values(temp_filtered_df[, 'spearman_correlation'])
temp_filtered_df$scale_spearman_correlation = scaled_correlation
returned_df = rbind(returned_df, temp_filtered_df)
}
return(returned_df)
}
##### read in the scaled dataframe #####
scaled_df = readRDS(file.path(TARGET_dir, 'scaled_df.rds'))
#picked_scaled_df = scaled_df[scaled_df$cell_line == 'S3', ]
#scaled_df$scale_spearman_correlation = round(scaled_df$scale_spearman_correlation, digits = 3)
scaled_df$scale_spearman_correlation = as.numeric(scaled_df$scale_spearman_correlation)
scaled_df$cell_line = stringr::str_remove_all(scaled_df$cell_line, "_")
p <- ggplot(data= scaled_df, mapping = aes_string(y = 'cell_line', x = 'cell_types')) +
geom_tile(mapping = aes_string(fill = 'scale_spearman_correlation')) +
#scale.func(range = c(0, 100), limits = c(scale.min, scale.max)) +
guides(fill = guide_colourbar(title = 'Scaled Spearman Correlation')) +
scale_fill_viridis_c(option = "plasma") +
labs(
x = '',
y = 'Embryonic Cell Lines'
) +
theme_classic()  +
facet_grid(
cols = vars(stages),
scales = "free_x",
space = "free_x",
switch = "y"
) +
theme(
panel.spacing = unit(x = 1, units = "lines"),
strip.background = element_blank()
) +
theme(strip.text.x = element_blank(), axis.text.x=element_text(angle=45, vjust = 1, hjust=1)) +
ggtitle("Drosophila Embryonic Cell Lines")
p
p <- ggplot(data= scaled_df, mapping = aes_string(y = 'cell_line', x = 'cell_types')) +
geom_tile(mapping = aes_string(fill = 'scale_spearman_correlation')) +
#scale.func(range = c(0, 100), limits = c(scale.min, scale.max)) +
guides(fill = guide_colourbar(title = 'scaled spearman correlation')) +
scale_fill_viridis_c(option = "plasma") +
labs(
x = '',
y = 'Embryonic Cell Lines'
) +
theme_classic()  +
facet_grid(
cols = vars(stages),
scales = "free_x",
space = "free_x",
switch = "y"
) +
theme(
panel.spacing = unit(x = 1, units = "lines"),
strip.background = element_blank()
) +
theme(strip.text.x = element_blank(), axis.text.x=element_text(angle=45, vjust = 1, hjust=1)) +
ggtitle("Drosophila Embryonic Cell Lines")
ggsave(filename = file.path(TARGET_dir, "Cell_lines.png"), plot = p, width = 15, height = 4)
# get the top correlated category
scaled_df$top_cat = 'Other'
for(ct in unique(scaled_df$cell_line)) {
scaled_df[scaled_df$scale_spearman_correlation == 1, 'top_cat'] = "Top Cell Type"
}
# To reproduce our work, run this script.
# We used Ubuntu 20.04 with an R package environment managed by renv.
# We used R version 4.1.2.
# Make it work on each of our computers
try({setwd("~/Dropbox/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("~/Dropbox (CahanLab)/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("c:/Users/DAndrewLab/Desktop/fruitfly_organogenesis/analysis/")}, silent = T)
renv::activate()
ANALYSIS_VERSION = "v18" # Where to put output
metadata = read.table(header = T, text=
"sample cellranger
wt_rep1 2021-10-27_scRNA_10x_3prime
wt_rep3 2022-08-11_scRNA_10x_3prime_CellRanger6.1.2
wt_early_rep1 2022-12-07_scRNA_10x_3prime_WT_early
wt_early_rep2 2022-12-13_scRNA_10x_3prime_WT_early2")
SAMPLE = "all"
source("R/set_up_environment.R")
##### load in data  ######
TARGET_dir = file.path("results", ANALYSIS_VERSION, "figure_plots", 'refined_wt13_early12_salivary_gland')
rank_sum = read.csv(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_salivary_gland", "rank_sum_test.csv"), row.names = 1)
rank_sum = rank_sum[rank_sum$logFC > 0, ]
rank_sum[rank_sum$group == 2, 'group'] = "Earlier Salivary Gland Cells"
rank_sum[rank_sum$group == 1, 'group'] = "Later Salivary Gland Cells"
cds = readRDS(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_salivary_gland", "monocle3_no_batch_correct_object.rds"))
##### Plotting out the TFs #####
# look at TFs
TF_tab = read.csv("accessory_data/Drosophila_TFs/all_candidates.csv", sep = '\t')
TF_tab = TF_tab[TF_tab$verdict_DNA_BD != "NO", ]
early_TFs = intersect(TF_tab$symbol, early_sum_test$feature)
late_TFs = intersect(TF_tab$symbol, late_sum_test$feature)
##### look at salivary gland specific genes #####
early_DE_genes = read.csv(file.path("results", ANALYSIS_VERSION, "early_wt12_enrichment/Salivary Gland/markers_genes.csv"), row.names = 1)
late_DE_genes = read.csv(file.path("results", ANALYSIS_VERSION, "wt13_enrichment/Salivary Gland/markers_genes.csv"), row.names = 1)
late_DE_genes = late_DE_genes[late_DE_genes$p_val_adj < 0.05 & late_DE_genes$avg_log2FC > 0, ]
early_DE_genes = early_DE_genes[early_DE_genes$p_val_adj < 0.05 & early_DE_genes$avg_log2FC > 0, ]
late_DE_genes$symbol = rownames(late_DE_genes)
early_DE_genes$symbol = rownames(early_DE_genes)
late_DE_genes$type = 'late'
early_DE_genes$type = 'early'
combined_DE_genes = rbind(late_DE_genes, early_DE_genes)
combined_DE_genes[combined_DE_genes$symbol %in% combined_DE_genes$symbol[duplicated(combined_DE_genes$symbol)], 'type'] =
paste0(combined_DE_genes[combined_DE_genes$symbol %in% combined_DE_genes$symbol[duplicated(combined_DE_genes$symbol)], 'type'], "_", "both")
sub_type_rank_sum = read.csv(file.path(TARGET_dir, 'DE_genes.csv'), row.names = 1)
sub_type_rank_sum = sub_type_rank_sum[sub_type_rank_sum$padj < 0.05, ]
early_sum_test = sub_type_rank_sum[sub_type_rank_sum$group == 'Earlier Salivary Gland Cells', ]
early_sum_test = early_sum_test[early_sum_test$feature %in% combined_DE_genes[combined_DE_genes$type == 'early', 'symbol'], ]
late_sum_test = sub_type_rank_sum[sub_type_rank_sum$group == 'Later Salivary Gland Cells', ]
late_sum_test = late_sum_test[late_sum_test$feature %in% combined_DE_genes[combined_DE_genes$type == 'late', 'symbol'], ]
##### Plotting out the TFs #####
# look at TFs
TF_tab = read.csv("accessory_data/Drosophila_TFs/all_candidates.csv", sep = '\t')
TF_tab = TF_tab[TF_tab$verdict_DNA_BD != "NO", ]
early_TFs = intersect(TF_tab$symbol, early_sum_test$feature)
late_TFs = intersect(TF_tab$symbol, late_sum_test$feature)
middle_sum_test = combined_DE_genes[grep("both", combined_DE_genes$type), ]
middle_TF = intersect(TF_tab$symbol, unique(middle_sum_test$symbol))
# this is for the dotplot
all_TFs = c(early_TFs, middle_TF, late_TFs)
cds@colData$cell_type = NA
cds@colData[clusters(cds) == 2, 'cell_type'] = "Early Salivary Gland Cells"
cds@colData[clusters(cds) == 1, 'cell_type'] = "Late Salivary Gland Cells"
meta_tab = cds@colData
norm_data = normalized_counts(cds)
diff_count = c()
for(TF in all_TFs) {
early_norm = norm_data[, rownames(meta_tab[meta_tab$cell_type == 'Early Salivary Gland Cells', ])]
late_norm = norm_data[, rownames(meta_tab[meta_tab$cell_type == 'Late Salivary Gland Cells', ])]
percent_early = sum(early_norm[TF, ] > 0) / ncol(early_norm)
percent_late = sum(late_norm[TF, ] > 0) / ncol(late_norm)
diff = abs(percent_early - percent_late)
diff_count = c(diff_count, percent_late)
}
names(diff_count) = all_TFs
sort(diff_count)
# dot plot
p = plot_genes_by_group(cds, markers = names(sort(diff_count)), norm_method = 'log', group_cells_by = 'cell_type', ordering_type = 'none') +
xlab("Cell Types") +
coord_flip() +
scale_x_discrete(limits = c('Late Salivary Gland Cells', 'Early Salivary Gland Cells')) +
theme(text = element_text(size = 24))
# dot plot
p = plot_genes_by_group(cds, markers = names(sort(diff_count)), norm_method = 'log', group_cells_by = 'cell_type', ordering_type = 'none') +
xlab("Cell Types") +
ylab("Transcription Factors")
# dot plot
p = plot_genes_by_group(cds, markers = names(sort(diff_count)), norm_method = 'log', group_cells_by = 'cell_type', ordering_type = 'none') +
xlab("Cell Types") +
ylab("Transcription Factors") +
coord_flip() +
scale_x_discrete(limits = c('Late Salivary Gland Cells', 'Early Salivary Gland Cells')) +
theme(text = element_text(size = 24))
# dot plot
p = plot_genes_by_group(cds, markers = names(sort(diff_count)), norm_method = 'log', group_cells_by = 'cell_type', ordering_type = 'none') +
xlab("Cell Types") +
ylab("Transcription Factors") +
coord_flip() +
scale_x_discrete(limits = c('Late Salivary Gland Cells', 'Early Salivary Gland Cells')) +
theme(text = element_text(size = 24))
ggsave(filename = file.path(TARGET_dir, 'dynamic_TF.png'), plot = p, width = 15, height = 4.5)
# To reproduce our work, run this script.
# We used Ubuntu 20.04 with an R package environment managed by renv.
# We used R version 4.1.2.
# Make it work on each of our computers
try({setwd("~/Dropbox/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("~/Dropbox (CahanLab)/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("c:/Users/DAndrewLab/Desktop/fruitfly_organogenesis/analysis/")}, silent = T)
renv::activate()
ANALYSIS_VERSION = "v18" # Where to put output
metadata = read.table(header = T, text=
"sample cellranger
wt_rep1 2021-10-27_scRNA_10x_3prime
wt_rep3 2022-08-11_scRNA_10x_3prime_CellRanger6.1.2
wt_early_rep1 2022-12-07_scRNA_10x_3prime_WT_early
wt_early_rep2 2022-12-13_scRNA_10x_3prime_WT_early2")
SAMPLE = "all"
source("R/set_up_environment.R")
# Load in files -----------------------------------------------------------
# this section of code is there to load in all the appropriate files needed to make plots
TARGET_dir = file.path("results", ANALYSIS_VERSION, "figure_plots", 'refined_wt13_early12_trachea')
rank_sum = read.csv(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_trachea", "rank_sum_test.csv"), row.names = 1)
rank_sum = rank_sum[rank_sum$logFC > 0, ]
cds = readRDS(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_trachea", "monocle3_no_batch_correct_object.rds"))
UMAP_coord = cds@int_colData$reducedDims$UMAP
colnames(UMAP_coord) = c("UMAP_1", "UMAP_2")
UMAP_coord = as.data.frame(UMAP_coord)
UMAP_coord$clusters = as.vector(monocle3::clusters(cds))
UMAP_coord$pseudotime = as.vector(monocle3::pseudotime(cds))
UMAP_coord$batch = as.vector(cds@colData$batch)
UMAP_coord[UMAP_coord$batch == 'early_rep_1', 'batch'] = 'Stage 10-12 rep 1'
UMAP_coord[UMAP_coord$batch == 'early_rep_2', 'batch'] = 'Stage 10-12 rep 2'
UMAP_coord[UMAP_coord$batch == 'late_rep_1', 'batch'] = 'Stage 13-16 rep 1'
UMAP_coord[UMAP_coord$batch == 'late_rep_3', 'batch'] = 'Stage 13-16 rep 2'
UMAP_coord$cell_type = cds@colData$cell_type
UMAP_coord[UMAP_coord$cell_type == 'Branching Trachea Cells', 'cell_type'] = 'Tracheal Tip Cells'
UMAP_coord[UMAP_coord$cell_type == 'Late Trachea Cells', 'cell_type'] = 'Late Tracheal Cells'
UMAP_coord[UMAP_coord$cell_type == 'Middle Trachea Cells', 'cell_type'] = 'Interm. Tracheal Cells'
UMAP_coord[UMAP_coord$cell_type == 'Early Trachea Cells', 'cell_type'] = 'Early Tracheal Cells'
# plotting umaps and violin plots -----------------------------------------
p = ggplot(UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color = pseudotime)) +
geom_point() +
theme_minimal() +
scale_color_viridis_c(option = "plasma") +
guides(fill=guide_legend(title="pseudo-time")) +
theme(text = element_text(size = 24))
UMAP_coord$btl = norm_exp['btl', ]
norm_exp = monocle3::normalized_counts(cds)
UMAP_coord$btl = norm_exp['btl', ]
p = ggplot(UMAP_coord, aes(x=reorder(cell_type, -btl), y=btl, fill = cell_type)) +
geom_violin() +
guides(fill=guide_legend(title="")) +
geom_boxplot(width=0.1) +
theme_minimal() +
scale_fill_brewer(palette = 'Set2', breaks=c('Early Tracheal Cells', 'Interm. Tracheal Cells', 'Late Tracheal Cells', 'Tracheal Tip Cells')) +
ylab("btl Normalized Expression") +
xlab("Cell Types") +
theme(text = element_text(size = 20), axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggsave(filename = file.path(TARGET_dir, "violin_btl.png"), plot = p, width = 10, height = 6)
UMAP_coord$Mipp1 = norm_exp['Mipp1', ]
p = ggplot(UMAP_coord, aes(x=reorder(cell_type, -Mipp1), y=Mipp1, fill = cell_type)) +
geom_violin() +
guides(fill=guide_legend(title="")) +
geom_boxplot(width=0.1) +
theme_minimal() +
scale_fill_brewer(palette = 'Set2', breaks=c('Early Tracheal Cells', 'Interm. Tracheal Cells', 'Late Tracheal Cells', 'Tracheal Tip Cells')) +
ylab("Mipp1 Normalized Expression") +
xlab("Cell Types") +
theme(text = element_text(size = 20), axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggsave(filename = file.path(TARGET_dir, "violin_Mipp1.png"), plot = p, width = 10, height = 6)
TARGET_dir = file.path("results", ANALYSIS_VERSION, "figure_plots", 'clean_sharable_data')
##### clean data for trachea monocle3 #####
cds = readRDS(file.path('results', ANALYSIS_VERSION, "refined_wt_late_early_trachea/monocle3_no_batch_correct_object.rds"))
cds@colData$subtypes = NA
##### clean data for trachea monocle3 #####
cds = readRDS(file.path('results', ANALYSIS_VERSION, "refined_wt_late_early_trachea/monocle3_no_batch_correct_object.rds"))
cds@colData$subtypes = NA
cds@colData[cds@colData$cell_type == 'Branching Trachea Cells', 'subtypes'] = 'Tracheal Tip Cells'
cds@colData[cds@colData$cell_type == 'Late Trachea Cells', 'subtypes'] = 'Late Tracheal Cells'
cds@colData[cds@colData$cell_type == 'Middle Trachea Cells', 'subtypes'] = 'Interm. Tracheal Cells'
cds@colData[cds@colData$cell_type == 'Early Trachea Cells', 'subtypes'] = 'Early Tracheal Cells'
cds@colData$cell_type = NULL
View(cds)
cds@colData
##### clean data for trachea monocle3 #####
cds = readRDS(file.path('results', ANALYSIS_VERSION, "refined_wt_late_early_trachea/monocle3_no_batch_correct_object.rds"))
cds@colData$subtypes = NA
cds@colData[cds@colData$cell_type == 'Branching Trachea Cells', 'subtypes'] = 'Tracheal Tip Cells'
cds@colData[cds@colData$cell_type == 'Late Trachea Cells', 'subtypes'] = 'Late Tracheal Cells'
cds@colData[cds@colData$cell_type == 'Middle Trachea Cells', 'subtypes'] = 'Interm. Tracheal Cells'
cds@colData[cds@colData$cell_type == 'Early Trachea Cells', 'subtypes'] = 'Early Tracheal Cells'
cds@colData$cell_type = NULL
dir.create(file.path(TARGET_dir, 'trachea_specific'), recursive = TRUE)
saveRDS(object = cds, file = file.path(TARGET_dir, 'SG_specific', 'trachea_monocle3_object.rds'))
##### clean data for germ cells monocle3 #####
cds = readRDS(file.path('results', ANALYSIS_VERSION, "refined_wt_late_early_germ/monocle3_no_batch_correct_object.rds"))
cds@colData$subtypes = NA
clusters(cds) == '1'
##### clean data for germ cells monocle3 #####
cds = readRDS(file.path('results', ANALYSIS_VERSION, "refined_wt_late_early_germ/monocle3_no_batch_correct_object.rds"))
cds@colData$subtypes = NA
cds@colData[clusters(cds) == '1', 'subtypes'] = 'Unknown 1'
cds@colData[clusters(cds) == '3', 'subtypes'] = 'Unknown 2'
cds@colData[clusters(cds) == '5', 'subtypes'] = 'Early Germ Cells'
cds@colData[clusters(cds) == '6', 'subtypes'] = 'Interm. Germ Cells 1'
cds@colData[clusters(cds) == '2', 'subtypes'] = 'Interm. Germ Cells 2'
cds@colData[clusters(cds) == '4', 'subtypes'] = 'Late Germ Cells'
dir.create(file.path(TARGET_dir, 'germ_specific'), recursive = TRUE)
saveRDS(object = cds, file = file.path(TARGET_dir, 'germ_specific', 'germ_monocle3_object.rds'))
monocle3::plot_cells(cds, color_cells_by = 'subtypes', cell_size = 1)
# To reproduce our work, run this script.
# We used MacOS 13.3.1 (a) with an R package environment managed by renv.
# We used R version 4.1.2.
# Make it work on each of our computers
try({setwd("~/Dropbox/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("~/Dropbox (CahanLab)/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("c:/Users/DAndrewLab/Desktop/fruitfly_organogenesis/analysis/")}, silent = T)
renv::activate()
ANALYSIS_VERSION = "v18" # Where to put output
# wildtype rep 3 is presented as wildtype stage 13-16 rep 2 in the manuscript
metadata = read.table(header = T, text=
"sample cellranger
wt_rep1 2021-10-27_scRNA_10x_3prime
wt_rep3 2022-08-11_scRNA_10x_3prime_CellRanger6.1.2
wt_early_rep1 2022-12-07_scRNA_10x_3prime_WT_early
wt_early_rep2 2022-12-13_scRNA_10x_3prime_WT_early2")
SAMPLE = "all"
source("R/set_up_environment.R")
library("enrichR")
# Set up working environment
library("ggplot2")
# To reproduce our work, run this script.
# We used MacOS 13.3.1 (a) with an R package environment managed by renv.
# We used R version 4.1.2.
# Make it work on each of our computers
try({setwd("~/Dropbox/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("~/Dropbox (CahanLab)/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("c:/Users/DAndrewLab/Desktop/fruitfly_organogenesis/analysis/")}, silent = T)
renv::activate()
ANALYSIS_VERSION = "v18" # Where to put output
# wildtype rep 3 is presented as wildtype stage 13-16 rep 2 in the manuscript
metadata = read.table(header = T, text=
"sample cellranger
wt_rep1 2021-10-27_scRNA_10x_3prime
wt_rep3 2022-08-11_scRNA_10x_3prime_CellRanger6.1.2
wt_early_rep1 2022-12-07_scRNA_10x_3prime_WT_early
wt_early_rep2 2022-12-13_scRNA_10x_3prime_WT_early2")
SAMPLE = "all"
source("R/set_up_environment.R")
install.packages('ggplot2', dep = TRUE)
library(ggplot2)
# To reproduce our work, run this script.
# We used MacOS 13.3.1 (a) with an R package environment managed by renv.
# We used R version 4.1.2.
# Make it work on each of our computers
try({setwd("~/Dropbox/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("~/Dropbox (CahanLab)/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("c:/Users/DAndrewLab/Desktop/fruitfly_organogenesis/analysis/")}, silent = T)
renv::activate()
ANALYSIS_VERSION = "v18" # Where to put output
# wildtype rep 3 is presented as wildtype stage 13-16 rep 2 in the manuscript
metadata = read.table(header = T, text=
"sample cellranger
wt_rep1 2021-10-27_scRNA_10x_3prime
wt_rep3 2022-08-11_scRNA_10x_3prime_CellRanger6.1.2
wt_early_rep1 2022-12-07_scRNA_10x_3prime_WT_early
wt_early_rep2 2022-12-13_scRNA_10x_3prime_WT_early2")
SAMPLE = "all"
source("R/set_up_environment.R")
TARGET_dir = file.path("results", ANALYSIS_VERSION, "manual_annotation_wt13")
##### first round of cell typing #####
object = readRDS(file.path("results", ANALYSIS_VERSION, "wt13_integrated/BDGP_automated_annotation_object.rds"))
manual_tab = read.csv(file.path('accessory_data/manual_annotations_v18/wt13/', 'manualCellType.csv'))
object@meta.data$manual_celltypes = NULL
for(temp_cluster in unique(manual_tab$cluster)) {
object@meta.data[object@meta.data$seurat_clusters == temp_cluster, 'manual_celltypes'] = trimws(manual_tab[manual_tab$cluster == temp_cluster, 'annotation'])
}
marker_genes = read.csv(file.path(TARGET_dir, 'manualMarkerGenes.csv'))
marker_genes_list = list()
object@meta.data$manual_celltypes = NULL
for(temp_cluster in unique(manual_tab$cluster)) {
object@meta.data[object@meta.data$seurat_clusters == temp_cluster, 'manual_celltypes'] = trimws(manual_tab[manual_tab$cluster == temp_cluster, 'annotation'])
}
DimPlot(object, 'manual_celltypes')
DimPlot(object, group.by = 'manual_celltypes')
TARGET_dir = file.path("results", ANALYSIS_VERSION, "manual_annotation_early_wt12")
dir.create(TARGET_dir)
object = readRDS(file.path("results", ANALYSIS_VERSION, "early_wt12_integrated/BDGP_automated_annotation_object.rds"))
manual_tab = read.csv(file.path(TARGET_dir, 'manualCellType_3.csv'))
manual_tab = read.csv(file.path('accessory_data/manual_annotations_v18/early_wt12/', 'manualCellType_3.csv'))
object@meta.data$manual_celltypes = NULL
for(temp_cluster in unique(manual_tab$cluster)) {
object@meta.data[object@meta.data$seurat_clusters == temp_cluster, 'manual_celltypes'] = trimws(manual_tab[manual_tab$cluster == temp_cluster, 'annotation'])
}
DimPlot(object, group.by = 'manual_celltypes')
# To reproduce our work, run this script.
# We used MacOS 13.3.1 (a) with an R package environment managed by renv.
# We used R version 4.1.2.
# Make it work on each of our computers
try({setwd("~/Dropbox/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("~/Dropbox (CahanLab)/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("c:/Users/DAndrewLab/Desktop/fruitfly_organogenesis/analysis/")}, silent = T)
renv::activate()
ANALYSIS_VERSION = "v18" # Where to put output
# wildtype rep 3 is presented as wildtype stage 13-16 rep 2 in the manuscript
metadata = read.table(header = T, text=
"sample cellranger
wt_rep1 2021-10-27_scRNA_10x_3prime
wt_rep3 2022-08-11_scRNA_10x_3prime_CellRanger6.1.2
wt_early_rep1 2022-12-07_scRNA_10x_3prime_WT_early
wt_early_rep2 2022-12-13_scRNA_10x_3prime_WT_early2")
SAMPLE = "all"
source("R/set_up_environment.R")
library(Seurat)
# set the directory
set.seed(123)
TARGET_dir = file.path("results", ANALYSIS_VERSION, "reviewer_comments")
dir.create(TARGET_dir)
##### look at SG UMAP in 3D #####
cds = readRDS("results/v18/refined_wt_late_early_salivary_gland/monocle3_no_batch_correct_object.rds")
