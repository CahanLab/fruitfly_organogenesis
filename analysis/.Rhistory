# To reproduce our work, run this script.
# We used MacOS 13.3.1 (a) with an R package environment managed by renv.
# We used R version 4.1.2.
# Make it work on each of our computers
try({setwd("~/Dropbox/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("~/Dropbox (CahanLab)/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("c:/Users/DAndrewLab/Desktop/fruitfly_organogenesis/analysis/")}, silent = T)
renv::activate()
ANALYSIS_VERSION = "v18" # Where to put output
# wildtype rep 3 is presented as wildtype stage 13-16 rep 2 in the manuscript
metadata = read.table(header = T, text=
"sample cellranger
wt_rep1 2021-10-27_scRNA_10x_3prime
wt_rep3 2022-08-11_scRNA_10x_3prime_CellRanger6.1.2
wt_early_rep1 2022-12-07_scRNA_10x_3prime_WT_early
wt_early_rep2 2022-12-13_scRNA_10x_3prime_WT_early2")
SAMPLE = "all"
source("R/set_up_environment.R")
TARGET_dir = file.path("results", ANALYSIS_VERSION, "figure_plots", 'cross_study_comparison_wt13')
# plot the reverse SCN results for Seroka data
dir.create(file.path(TARGET_dir, 'reverse_SCN_seroka'), recursive = TRUE)
reverse_seroka_object = readRDS(file.path('results', ANALYSIS_VERSION, "cross_study_comparison_wt13/reverse_seroka_SCN_object.rds"))
withr::with_dir(file.path(TARGET_dir, 'reverse_SCN_seroka'), {
start_index = grep("harmonized_celltypes", colnames(reverse_seroka_object@meta.data)) + 1
for(scn_ct in unique(reverse_seroka_object@meta.data$SCN_class)) {
reverse_seroka_object@meta.data$cur_ct = NA
reverse_seroka_object@meta.data[reverse_seroka_object@meta.data$SCN_class == scn_ct, 'cur_ct'] = scn_ct
reverse_seroka_object@meta.data[reverse_seroka_object@meta.data$SCN_class != scn_ct, 'cur_ct'] = 'Other'
color_label = c(RColorBrewer::brewer.pal(n = 3, name = 'Set1')[1], '#918e8e')
names(color_label) = c(scn_ct, 'Other')
p = DimPlot(reverse_seroka_object, group.by = 'cur_ct') +
scale_colour_manual(values = color_label) +
#ggtitle(paste0("Stage 14-16 from Seroka et al, 2022: SCN classified ", scn_ct)) +
ggtitle("") +
theme(text = element_text(size = 18), plot.title.position = "plot", legend.text = element_text(size=18)) +
guides(color = guide_legend(override.aes = list(size = 10)))
ggsave(paste(scn_ct, "_umap.png"), width = 10, height = 8)
}
})
# plot the reverse SCN results for Calderon data
dir.create(file.path(TARGET_dir, 'reverse_SCN_calderon'), recursive = TRUE)
reverse_calderon_object = readRDS(file.path('results', ANALYSIS_VERSION, "cross_study_comparison_wt13/reverse_calderon_SCN_object.rds"))
withr::with_dir(file.path(TARGET_dir, 'reverse_SCN_calderon'), {
for(scn_ct in unique(reverse_seroka_object@meta.data$SCN_class)) {
reverse_calderon_object@meta.data$cur_ct = NA
reverse_calderon_object@meta.data[reverse_calderon_object@meta.data$SCN_class == scn_ct, 'cur_ct'] = scn_ct
reverse_calderon_object@meta.data[reverse_calderon_object@meta.data$SCN_class != scn_ct, 'cur_ct'] = 'Other'
color_label = c(RColorBrewer::brewer.pal(n = 3, name = 'Set1')[1], '#918e8e')
names(color_label) = c(scn_ct, 'Other')
p = DimPlot(reverse_calderon_object, group.by = 'cur_ct') +
scale_colour_manual(values = color_label) +
#ggtitle(paste0("Stage 14-16 from Calderon et al, 2022: SCN classified ", scn_ct)) +
ggtitle("") +
theme(text = element_text(size = 18), plot.title.position = "plot", legend.text = element_text(size=18)) +
guides(color = guide_legend(override.aes = list(size = 10)))
ggsave(paste(scn_ct, "_umap.png"), width = 10, height = 8)
}
})
TARGET_dir = file.path("results", ANALYSIS_VERSION, "figure_plots", 'cross_study_comparison_early_wt12')
dir.create(TARGET_dir, recursive = TRUE)
##### plot the reverse SCN classification trained on our data and applied to seroka et al #####
dir.create(file.path(TARGET_dir, 'reverse_SCN_seroka'), recursive = TRUE)
##### plot the reverse SCN classification trained on our data and applied to seroka et al #####
dir.create(file.path(TARGET_dir, 'reverse_SCN_seroka'), recursive = TRUE)
reverse_seroka_object = readRDS(file.path('results', ANALYSIS_VERSION, "cross_study_comparison_early_wt12/reverse_seroka_SCN_object.rds"))
withr::with_dir(file.path(TARGET_dir, 'reverse_SCN_seroka'), {
start_index = grep("harmonized_celltypes", colnames(reverse_seroka_object@meta.data)) + 1
for(scn_ct in unique(total_plot_df$cell_types)) {
reverse_seroka_object@meta.data$cur_ct = NA
reverse_seroka_object@meta.data[reverse_seroka_object@meta.data$SCN_class == scn_ct, 'cur_ct'] = scn_ct
reverse_seroka_object@meta.data[reverse_seroka_object@meta.data$SCN_class != scn_ct, 'cur_ct'] = 'Other'
color_label = c(RColorBrewer::brewer.pal(n = 3, name = 'Set1')[1], '#918e8e')
names(color_label) = c(scn_ct, 'Other')
p = DimPlot(reverse_seroka_object, group.by = 'cur_ct') +
scale_colour_manual(values = color_label) +
#ggtitle(paste0("Stage 12 from Seroka et al, 2022: SCN classified ", scn_ct)) +
ggtitle("") +
theme(text = element_text(size = 18), plot.title.position = "plot", legend.text = element_text(size=18)) +
guides(color = guide_legend(override.aes = list(size = 10)))
ggsave(paste(scn_ct, "_umap.png"), width = 10, height = 8)
}
})
##### plot the reverse SCN classification trained on our data and applied to calderon et al #####
dir.create(file.path(TARGET_dir, 'reverse_SCN_calderon'), recursive = TRUE)
reverse_calderon_object = readRDS(file.path('results', ANALYSIS_VERSION, "cross_study_comparison_early_wt12/reverse_calderon_SCN_object.rds"))
##### plot the reverse SCN classification trained on our data and applied to calderon et al #####
dir.create(file.path(TARGET_dir, 'reverse_SCN_calderon'), recursive = TRUE)
reverse_calderon_object = readRDS(file.path('results', ANALYSIS_VERSION, "cross_study_comparison_early_wt12/reverse_calderon_SCN_object.rds"))
withr::with_dir(file.path(TARGET_dir, 'reverse_SCN_calderon'), {
for(scn_ct in unique(total_plot_df$cell_types)) {
reverse_calderon_object@meta.data$cur_ct = NA
reverse_calderon_object@meta.data[reverse_calderon_object@meta.data$SCN_class == scn_ct, 'cur_ct'] = scn_ct
reverse_calderon_object@meta.data[reverse_calderon_object@meta.data$SCN_class != scn_ct, 'cur_ct'] = 'Other'
color_label = c(RColorBrewer::brewer.pal(n = 3, name = 'Set1')[1], '#918e8e')
names(color_label) = c(scn_ct, 'Other')
p = DimPlot(reverse_calderon_object, group.by = 'cur_ct') +
scale_colour_manual(values = color_label) +
#ggtitle(paste0("Stage 10-12 from Calderon et al, 2022: SCN classified ", scn_ct)) +
ggtitle("") +
theme(text = element_text(size = 18), plot.title.position = "plot", legend.text = element_text(size=18)) +
guides(color = guide_legend(override.aes = list(size = 10)))
ggsave(paste(scn_ct, "_umap.png"), width = 10, height = 8)
}
})
##### this is to plot out cell type proportion across different data #####
total_plot_df = readRDS(file.path('results', ANALYSIS_VERSION, "cross_study_comparison_early_wt12/stage_10_12_proportion.rds"))
total_plot_df[total_plot_df$data_type == 'our data', 'data_type'] = 'Stage 10-12 Embryonic Data'
total_plot_df[total_plot_df$data_type == 'Calderon et al, 2022', 'data_type'] = 'Calderon et al (stage 10-12)'
total_plot_df[total_plot_df$data_type == 'Seroka et al, 2022', 'data_type'] = 'Seroka et al (stage 12)'
p<-ggplot(data=total_plot_df, aes(x=reorder(cell_types, proportion), y=proportion, fill = data_type)) +
geom_bar(stat="identity", position=position_dodge(), width = 0.7) + theme_bw() + coord_flip() +
ylab("Total Cell Proportion") +
xlab("Harmonized Cell Types") +
ggtitle("Stage 10-12 Cell Type Proportions") +
theme(text = element_text(size = 24), legend.title=element_blank(), plot.title.position = "plot")
##### plot the reverse SCN classification trained on our data and applied to seroka et al #####
dir.create(file.path(TARGET_dir, 'reverse_SCN_seroka'), recursive = TRUE)
reverse_seroka_object = readRDS(file.path('results', ANALYSIS_VERSION, "cross_study_comparison_early_wt12/reverse_seroka_SCN_object.rds"))
withr::with_dir(file.path(TARGET_dir, 'reverse_SCN_seroka'), {
start_index = grep("harmonized_celltypes", colnames(reverse_seroka_object@meta.data)) + 1
for(scn_ct in unique(total_plot_df$cell_types)) {
reverse_seroka_object@meta.data$cur_ct = NA
reverse_seroka_object@meta.data[reverse_seroka_object@meta.data$SCN_class == scn_ct, 'cur_ct'] = scn_ct
reverse_seroka_object@meta.data[reverse_seroka_object@meta.data$SCN_class != scn_ct, 'cur_ct'] = 'Other'
color_label = c(RColorBrewer::brewer.pal(n = 3, name = 'Set1')[1], '#918e8e')
names(color_label) = c(scn_ct, 'Other')
p = DimPlot(reverse_seroka_object, group.by = 'cur_ct') +
scale_colour_manual(values = color_label) +
#ggtitle(paste0("Stage 12 from Seroka et al, 2022: SCN classified ", scn_ct)) +
ggtitle("") +
theme(text = element_text(size = 18), plot.title.position = "plot", legend.text = element_text(size=18)) +
guides(color = guide_legend(override.aes = list(size = 10)))
ggsave(paste(scn_ct, "_umap.png"), width = 10, height = 8)
}
})
##### plot the reverse SCN classification trained on our data and applied to calderon et al #####
dir.create(file.path(TARGET_dir, 'reverse_SCN_calderon'), recursive = TRUE)
reverse_calderon_object = readRDS(file.path('results', ANALYSIS_VERSION, "cross_study_comparison_early_wt12/reverse_calderon_SCN_object.rds"))
withr::with_dir(file.path(TARGET_dir, 'reverse_SCN_calderon'), {
for(scn_ct in unique(total_plot_df$cell_types)) {
reverse_calderon_object@meta.data$cur_ct = NA
reverse_calderon_object@meta.data[reverse_calderon_object@meta.data$SCN_class == scn_ct, 'cur_ct'] = scn_ct
reverse_calderon_object@meta.data[reverse_calderon_object@meta.data$SCN_class != scn_ct, 'cur_ct'] = 'Other'
color_label = c(RColorBrewer::brewer.pal(n = 3, name = 'Set1')[1], '#918e8e')
names(color_label) = c(scn_ct, 'Other')
p = DimPlot(reverse_calderon_object, group.by = 'cur_ct') +
scale_colour_manual(values = color_label) +
#ggtitle(paste0("Stage 10-12 from Calderon et al, 2022: SCN classified ", scn_ct)) +
ggtitle("") +
theme(text = element_text(size = 18), plot.title.position = "plot", legend.text = element_text(size=18)) +
guides(color = guide_legend(override.aes = list(size = 10)))
ggsave(paste(scn_ct, "_umap.png"), width = 10, height = 8)
}
})
# To reproduce our work, run this script.
# We used MacOS 13.3.1 (a) with an R package environment managed by renv.
# We used R version 4.1.2.
# Make it work on each of our computers
try({setwd("~/Dropbox/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("~/Dropbox (CahanLab)/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("c:/Users/DAndrewLab/Desktop/fruitfly_organogenesis/analysis/")}, silent = T)
renv::activate()
ANALYSIS_VERSION = "v18" # Where to put output
# wildtype rep 3 is presented as wildtype stage 13-16 rep 2 in the manuscript
metadata = read.table(header = T, text=
"sample cellranger
wt_rep1 2021-10-27_scRNA_10x_3prime
wt_rep3 2022-08-11_scRNA_10x_3prime_CellRanger6.1.2
wt_early_rep1 2022-12-07_scRNA_10x_3prime_WT_early
wt_early_rep2 2022-12-13_scRNA_10x_3prime_WT_early2")
SAMPLE = "all"
source("R/set_up_environment.R")
TARGET_dir = file.path("results", ANALYSIS_VERSION, "figure_plots", 'cross_study_comparison_early_wt12')
##### this is to plot out cell type proportion across different data #####
total_plot_df = readRDS(file.path('results', ANALYSIS_VERSION, "cross_study_comparison_early_wt12/stage_10_12_proportion.rds"))
total_plot_df[total_plot_df$data_type == 'our data', 'data_type'] = 'Stage 10-12 Embryonic Data'
total_plot_df[total_plot_df$data_type == 'Calderon et al, 2022', 'data_type'] = 'Calderon et al (stage 10-12)'
total_plot_df[total_plot_df$data_type == 'Seroka et al, 2022', 'data_type'] = 'Seroka et al (stage 12)'
p<-ggplot(data=total_plot_df, aes(x=reorder(cell_types, proportion), y=proportion, fill = data_type)) +
geom_bar(stat="identity", position=position_dodge(), width = 0.7) + theme_bw() + coord_flip() +
ylab("Total Cell Proportion") +
xlab("Harmonized Cell Types") +
ggtitle("Stage 10-12 Cell Type Proportions") +
theme(text = element_text(size = 24), legend.title=element_blank(), plot.title.position = "plot")
##### plot the reverse SCN classification trained on our data and applied to seroka et al #####
dir.create(file.path(TARGET_dir, 'reverse_SCN_seroka'), recursive = TRUE)
reverse_seroka_object = readRDS(file.path('results', ANALYSIS_VERSION, "cross_study_comparison_early_wt12/reverse_seroka_SCN_object.rds"))
withr::with_dir(file.path(TARGET_dir, 'reverse_SCN_seroka'), {
start_index = grep("harmonized_celltypes", colnames(reverse_seroka_object@meta.data)) + 1
for(scn_ct in unique(total_plot_df$cell_types)) {
reverse_seroka_object@meta.data$cur_ct = NA
reverse_seroka_object@meta.data[reverse_seroka_object@meta.data$SCN_class == scn_ct, 'cur_ct'] = scn_ct
reverse_seroka_object@meta.data[reverse_seroka_object@meta.data$SCN_class != scn_ct, 'cur_ct'] = 'Other'
color_label = c(RColorBrewer::brewer.pal(n = 3, name = 'Set1')[1], '#c4c0c0')
names(color_label) = c(scn_ct, 'Other')
p = DimPlot(reverse_seroka_object, group.by = 'cur_ct') +
scale_colour_manual(values = color_label) +
#ggtitle(paste0("Stage 12 from Seroka et al, 2022: SCN classified ", scn_ct)) +
ggtitle("") +
theme(text = element_text(size = 18), plot.title.position = "plot", legend.text = element_text(size=18)) +
guides(color = guide_legend(override.aes = list(size = 10)))
ggsave(paste(scn_ct, "_umap.png"), width = 10, height = 8)
}
})
##### plot the reverse SCN classification trained on our data and applied to calderon et al #####
dir.create(file.path(TARGET_dir, 'reverse_SCN_calderon'), recursive = TRUE)
reverse_calderon_object = readRDS(file.path('results', ANALYSIS_VERSION, "cross_study_comparison_early_wt12/reverse_calderon_SCN_object.rds"))
withr::with_dir(file.path(TARGET_dir, 'reverse_SCN_calderon'), {
for(scn_ct in unique(total_plot_df$cell_types)) {
reverse_calderon_object@meta.data$cur_ct = NA
reverse_calderon_object@meta.data[reverse_calderon_object@meta.data$SCN_class == scn_ct, 'cur_ct'] = scn_ct
reverse_calderon_object@meta.data[reverse_calderon_object@meta.data$SCN_class != scn_ct, 'cur_ct'] = 'Other'
color_label = c(RColorBrewer::brewer.pal(n = 3, name = 'Set1')[1], '#c4c0c0')
names(color_label) = c(scn_ct, 'Other')
p = DimPlot(reverse_calderon_object, group.by = 'cur_ct') +
scale_colour_manual(values = color_label) +
#ggtitle(paste0("Stage 10-12 from Calderon et al, 2022: SCN classified ", scn_ct)) +
ggtitle("") +
theme(text = element_text(size = 18), plot.title.position = "plot", legend.text = element_text(size=18)) +
guides(color = guide_legend(override.aes = list(size = 10)))
ggsave(paste(scn_ct, "_umap.png"), width = 10, height = 8)
}
})
TARGET_dir = file.path("results", ANALYSIS_VERSION, "figure_plots", 'cross_study_comparison_wt13')
dir.create(TARGET_dir, recursive = TRUE)
# plot the reverse SCN results for Seroka data
dir.create(file.path(TARGET_dir, 'reverse_SCN_seroka'), recursive = TRUE)
reverse_seroka_object = readRDS(file.path('results', ANALYSIS_VERSION, "cross_study_comparison_wt13/reverse_seroka_SCN_object.rds"))
withr::with_dir(file.path(TARGET_dir, 'reverse_SCN_seroka'), {
start_index = grep("harmonized_celltypes", colnames(reverse_seroka_object@meta.data)) + 1
for(scn_ct in unique(reverse_seroka_object@meta.data$SCN_class)) {
reverse_seroka_object@meta.data$cur_ct = NA
reverse_seroka_object@meta.data[reverse_seroka_object@meta.data$SCN_class == scn_ct, 'cur_ct'] = scn_ct
reverse_seroka_object@meta.data[reverse_seroka_object@meta.data$SCN_class != scn_ct, 'cur_ct'] = 'Other'
color_label = c(RColorBrewer::brewer.pal(n = 3, name = 'Set1')[1], '#c4c0c0')
names(color_label) = c(scn_ct, 'Other')
p = DimPlot(reverse_seroka_object, group.by = 'cur_ct') +
scale_colour_manual(values = color_label) +
#ggtitle(paste0("Stage 14-16 from Seroka et al, 2022: SCN classified ", scn_ct)) +
ggtitle("") +
theme(text = element_text(size = 18), plot.title.position = "plot", legend.text = element_text(size=18)) +
guides(color = guide_legend(override.aes = list(size = 10)))
ggsave(paste(scn_ct, "_umap.png"), width = 10, height = 8)
}
})
# plot the reverse SCN results for Calderon data
dir.create(file.path(TARGET_dir, 'reverse_SCN_calderon'), recursive = TRUE)
reverse_calderon_object = readRDS(file.path('results', ANALYSIS_VERSION, "cross_study_comparison_wt13/reverse_calderon_SCN_object.rds"))
withr::with_dir(file.path(TARGET_dir, 'reverse_SCN_calderon'), {
for(scn_ct in unique(reverse_seroka_object@meta.data$SCN_class)) {
reverse_calderon_object@meta.data$cur_ct = NA
reverse_calderon_object@meta.data[reverse_calderon_object@meta.data$SCN_class == scn_ct, 'cur_ct'] = scn_ct
reverse_calderon_object@meta.data[reverse_calderon_object@meta.data$SCN_class != scn_ct, 'cur_ct'] = 'Other'
color_label = c(RColorBrewer::brewer.pal(n = 3, name = 'Set1')[1], '#c4c0c0')
names(color_label) = c(scn_ct, 'Other')
p = DimPlot(reverse_calderon_object, group.by = 'cur_ct') +
scale_colour_manual(values = color_label) +
#ggtitle(paste0("Stage 14-16 from Calderon et al, 2022: SCN classified ", scn_ct)) +
ggtitle("") +
theme(text = element_text(size = 18), plot.title.position = "plot", legend.text = element_text(size=18)) +
guides(color = guide_legend(override.aes = list(size = 10)))
ggsave(paste(scn_ct, "_umap.png"), width = 10, height = 8)
}
})
TARGET_dir = file.path("results", ANALYSIS_VERSION, "figure_plots", 'UMAPS_marker_genes_early_3ct')
dir.create(TARGET_dir, recursive = TRUE)
object = readRDS(file.path('results', ANALYSIS_VERSION, "manual_annotation_early_wt12/manual_celltype_object1.rds"))
source("~/Dropbox (CahanLab)/fruitfly_organogenesis/analysis/R/plot_UMAPS_marker_genes_early_3ct.R")
FeaturePlot(object, features = 'toe')
VlnPlot(object, features = 'toe')
FeaturePlot(object, features = 'eyg')
FeaturePlot(object, features = 'toe', keep.scale = FALSE)
FeaturePlot(object, features = 'toe')
FeaturePlot(object, features = 'toe') +
scale_fill_distiller(palette = "Spectral")
FeaturePlot(object, features = 'toe')
FeaturePlot(object, features = 'toe', pt.size = 2)
FeaturePlot(object, features = 'toe', pt.size = 1)
FeaturePlot(object, features = 'toe', pt.size = 0.5)
FeaturePlot(object, features = 'toe')
FeaturePlot(object, features = 'toe')
FeaturePlot(object, features = 'sage')
FeaturePlot(object, features = 'trh')
FeaturePlot(object, features = 'Hs6st')
FeaturePlot(object, features = 'CG377')
FeaturePlot(object, features = 'CG3777')
FeaturePlot(object, features = 'stumps')
FeaturePlot(object, features = 'Gasp')
all_genes = c("toe", "sage", "trh", 'Hs6st', 'CG3777', 'stumps', 'Gasp')
FeaturePlot(object, features = 'Osi15')
FeaturePlot(object, features = 'wisp')
FeaturePlot(object, features = 'stai')
all_genes = c("toe", "sage", "trh", 'Hs6st', 'CG3777', 'stumps', 'Gasp', 'Osi15', 'wisp', 'stai')
FeaturePlot(object, features = 'CG4502')
FeaturePlot(object, features = 'pgc')
FeaturePlot(object, features = 'nos')
FeaturePlot(object, features = 'prosalpha5')
rownames(object)
grep(rownames(object))
grep(rownames(object), 'alpha')
grep('alpha', rownames(object))
rownames(object)[grep('alpha', rownames(object))]
FeaturePlot(object, features = 'Prosalpha5')
all_genes = c("toe", "sage", "trh", 'Hs6st', 'CG3777', 'stumps', 'Gasp', 'Osi15', 'wisp', 'stai', 'CG4502', 'pgc', 'nos', 'Prosalpha5')
TARGET_dir = file.path("results", ANALYSIS_VERSION, "figure_plots", 'UMAPS_marker_genes_early_3ct')
dir.create(TARGET_dir, recursive = TRUE)
object = readRDS(file.path('results', ANALYSIS_VERSION, "manual_annotation_early_wt12/manual_celltype_object1.rds"))
all_genes = c("toe", "sage", "trh", 'Hs6st', 'CG3777', 'stumps', 'Gasp', 'Osi15', 'wisp', 'stai', 'CG4502', 'pgc', 'nos', 'Prosalpha5')
for(temp_gene in all_genes) {
p = FeaturePlot(object, features = temp_gene)
ggsave(filename = file.path(TARGET_dir, paste0(temp_gene, "_UMAP.png")), plot = p, width = 5, height = 5)
}
all_genes = c("toe", "sage", "trh", 'Hs6st', 'CG3777', 'stumps', 'Gasp', 'Osi15', 'wisp', 'stai', 'CG4502', 'pgc', 'nos', 'Prosalpha5')
for(temp_gene in all_genes) {
p = FeaturePlot(object, features = temp_gene)
ggsave(filename = file.path(TARGET_dir, paste0(temp_gene, "_UMAP.png")), plot = p, width = 5, height = 5) +
theme_blank()
}
p = FeaturePlot(object, features = temp_gene) +
theme_blank()
all_genes = c("toe", "sage", "trh", 'Hs6st', 'CG3777', 'stumps', 'Gasp', 'Osi15', 'wisp', 'stai', 'CG4502', 'pgc', 'nos', 'Prosalpha5')
p = FeaturePlot(object, features = temp_gene) +
theme_minimal()
p
p = FeaturePlot(object, features = temp_gene) +
theme_void()
p
p = FeaturePlot(object, features = temp_gene) +
theme_void() + scale_fill_viridis()
p
p = FeaturePlot(object, features = temp_gene) +
theme_void() + scale_color_viridis()
p
p = FeaturePlot(object, features = temp_gene) +
theme_void() + scale_color_viridis(option = "B")
p
p = FeaturePlot(object, features = temp_gene) +
theme_void()
p
p = FeaturePlot(object, features = temp_gene) +
theme_void() + scale_color_brewer()
p
p = FeaturePlot(object, features = temp_gene) +
theme_void() + scale_color_distiller(palette = "Spectral")
p
p = FeaturePlot(object, features = temp_gene) +
theme_void() + scale_color_distiller(palette = "ORrd")
p = FeaturePlot(object, features = temp_gene) +
theme_void() + scale_color_distiller(palette = "OrRd")
p
p = FeaturePlot(object, features = temp_gene) +
theme_void() + scale_color_distiller(palette = "YlOrRd")
p
p = FeaturePlot(object, features = temp_gene) +
theme_void()
p
p = FeaturePlot(object, features = temp_gene) +
theme_void() +
scale_color_discrete(guide="none")
p
p = FeaturePlot(object, features = temp_gene) +
theme_void() +
scale_color_continuous(guide="none")
p
p = FeaturePlot(object, features = temp_gene) +
theme_void()
p
p = FeaturePlot(object, features = temp_gene) +
theme_void() +
ggtitle("")
p
devtools::install_github("hughjonesd/ggmagnify")
install.packages(c("ggfx", "ggforce")
)
all_genes = c("toe", "sage", "trh", 'Hs6st', 'CG3777', 'stumps', 'Gasp', 'Osi15', 'wisp', 'stai', 'CG4502', 'pgc', 'nos', 'Prosalpha5')
for(temp_gene in all_genes) {
p = FeaturePlot(object, features = temp_gene) +
theme_void() +
ggtitle("")
ggsave(filename = file.path(TARGET_dir, paste0(temp_gene, "_UMAP.png")), plot = p, width = 5, height = 5)
}
TARGET_dir = file.path("results", ANALYSIS_VERSION, "figure_plots", 'UMAPS_marker_genes_late_3ct')
dir.create(TARGET_dir, recursive = TRUE)
object = readRDS(file.path('results', ANALYSIS_VERSION, "manual_annotation_wt13/manual_celltype_object4.rds"))
all_genes = c("toe", "sage", "trh", 'Hs6st', 'CG3777', 'stumps', 'Gasp', 'Osi15', 'wisp', 'stai', 'CG4502', 'pgc', 'nos', 'Prosalpha5')
for(temp_gene in all_genes) {
p = FeaturePlot(object, features = temp_gene) +
theme_void() +
ggtitle("")
ggsave(filename = file.path(TARGET_dir, paste0(temp_gene, "_UMAP.png")), plot = p, width = 5, height = 5)
}
# plot out UMAPs of markers genes for SG, Tr, and SG
TARGET_dir = file.path("results", ANALYSIS_VERSION, "figure_plots", 'UMAPS_marker_genes_late_3ct')
dir.create(TARGET_dir, recursive = TRUE)
object = readRDS(file.path('results', ANALYSIS_VERSION, "manual_annotation_wt13/manual_celltype_object4.rds"))
all_genes = c("toe", "sage", "trh", 'Hs6st', 'CG3777', 'stumps', 'Gasp', 'Osi15', 'wisp', 'stai', 'CG4502', 'pgc', 'nos', 'Prosalpha5')
for(temp_gene in all_genes) {
p = FeaturePlot(object, features = temp_gene) +
theme_void() +
ggtitle("")
ggsave(filename = file.path(TARGET_dir, paste0(temp_gene, "_UMAP.svg")), plot = p, width = 5, height = 5)
}
# plot out UMAPs of markers genes for SG, Tr, and SG
TARGET_dir = file.path("results", ANALYSIS_VERSION, "figure_plots", 'UMAPS_marker_genes_late_3ct')
dir.create(TARGET_dir, recursive = TRUE)
object = readRDS(file.path('results', ANALYSIS_VERSION, "manual_annotation_wt13/manual_celltype_object4.rds"))
all_genes = c("toe", "sage", "trh", 'Hs6st', 'CG3777', 'stumps', 'Gasp', 'Osi15', 'wisp', 'stai', 'CG4502', 'pgc', 'nos', 'Prosalpha5')
for(temp_gene in all_genes) {
p = FeaturePlot(object, features = temp_gene) +
theme_void() +
ggtitle("")
ggsave(filename = file.path(TARGET_dir, paste0(temp_gene, "_UMAP.png")), plot = p, width = 5, height = 5)
}
p = FeaturePlot(object, features = temp_gene) +
theme_void() +
ggtitle("") +
ggsave(filename = file.path(TARGET_dir, paste0(temp_gene, "_UMAP.png")), plot = p, width = 5, height = 5)
p = FeaturePlot(object, features = temp_gene) +
theme_void() +
ggtitle("") +
theme(legend.position = "bottom")
p
p = FeaturePlot(object, features = temp_gene) +
theme_void() +
ggtitle("") +
theme(legend.position = "none")
p
# plot out UMAPs of markers genes for SG, Tr, and SG
TARGET_dir = file.path("results", ANALYSIS_VERSION, "figure_plots", 'UMAPS_marker_genes_late_3ct')
dir.create(TARGET_dir, recursive = TRUE)
object = readRDS(file.path('results', ANALYSIS_VERSION, "manual_annotation_wt13/manual_celltype_object4.rds"))
all_genes = c("toe", "sage", "trh", 'Hs6st', 'CG3777', 'stumps', 'Gasp', 'Osi15', 'wisp', 'stai', 'CG4502', 'pgc', 'nos', 'Prosalpha5')
for(temp_gene in all_genes) {
p = FeaturePlot(object, features = temp_gene) +
theme_void() +
ggtitle("") +
theme(legend.position = "none")
ggsave(filename = file.path(TARGET_dir, paste0(temp_gene, "_UMAP.png")), plot = p, width = 5, height = 5)
}
# plot out UMAPs of markers genes for SG, Tr, and SG
TARGET_dir = file.path("results", ANALYSIS_VERSION, "figure_plots", 'UMAPS_marker_genes_late_3ct')
dir.create(TARGET_dir, recursive = TRUE)
object = readRDS(file.path('results', ANALYSIS_VERSION, "manual_annotation_wt13/manual_celltype_object4.rds"))
all_genes = c("toe", "sage", "trh", 'Hs6st', 'CG3777', 'stumps', 'Gasp', 'Osi15', 'wisp', 'stai', 'CG4502', 'pgc', 'nos', 'Prosalpha5')
for(temp_gene in all_genes) {
p = FeaturePlot(object, features = temp_gene) +
theme_void() +
ggtitle("") +
theme(legend.position = "none")
ggsave(filename = file.path(TARGET_dir, paste0(temp_gene, "_UMAP.png")), plot = p, width = 5, height = 5)
}
,
# plot out UMAPs of markers genes for SG, Tr, and SG
TARGET_dir = file.path("results", ANALYSIS_VERSION, "figure_plots", 'UMAPS_marker_genes_early_3ct')
dir.create(TARGET_dir, recursive = TRUE)
object = readRDS(file.path('results', ANALYSIS_VERSION, "manual_annotation_early_wt12/manual_celltype_object1.rds"))
all_genes = c("toe", "sage", "trh", 'Hs6st', 'CG3777', 'stumps', 'Gasp', 'Osi15', 'wisp', 'stai', 'CG4502', 'pgc', 'nos', 'Prosalpha5')
for(temp_gene in all_genes) {
p = FeaturePlot(object, features = temp_gene) +
theme_void() +
ggtitle("") +
theme(legend.position = "none")
ggsave(filename = file.path(TARGET_dir, paste0(temp_gene, "_UMAP.png")), plot = p, width = 5, height = 5)
}
p = FeaturePlot(object, features = temp_gene) +
theme_void() +
ggtitle("Early") +
theme(legend.position = "none")
p
p = FeaturePlot(object, features = temp_gene, pt.size = 1) +
theme_void() +
ggtitle("") +
theme(legend.position = "none")
p
p = FeaturePlot(object, features = temp_gene, pt.size = 2) +
theme_void() +
ggtitle("") +
theme(legend.position = "none")
p
p = FeaturePlot(object, features = temp_gene, pt.size = 2, alpha = 0.1) +
theme_void() +
ggtitle("") +
theme(legend.position = "none")
p = FeaturePlot(object, features = temp_gene) +
theme_void() +
ggtitle("") +
theme(legend.position = "none")
p
# plot out UMAPs of markers genes for SG, Tr, and SG
TARGET_dir = file.path("results", ANALYSIS_VERSION, "figure_plots", 'UMAPS_marker_genes_late_3ct')
dir.create(TARGET_dir, recursive = TRUE)
object = readRDS(file.path('results', ANALYSIS_VERSION, "manual_annotation_wt13/manual_celltype_object4.rds"))
all_genes = c("CG14756", "Tpst", "Papss", "nur", "CG13159", "pip", "toe", "sage", "trh", 'Hs6st', 'CG3777', 'stumps', 'Gasp', 'Osi15', 'wisp', 'stai', 'CG4502', 'pgc', 'nos', 'Prosalpha5')
for(temp_gene in all_genes) {
p = FeaturePlot(object, features = temp_gene) +
theme_void() +
ggtitle("") +
theme(legend.position = "none")
ggsave(filename = file.path(TARGET_dir, paste0(temp_gene, "_UMAP.png")), plot = p, width = 5, height = 5)
}
# plot out UMAPs of markers genes for SG, Tr, and SG
TARGET_dir = file.path("results", ANALYSIS_VERSION, "figure_plots", 'UMAPS_marker_genes_early_3ct')
dir.create(TARGET_dir, recursive = TRUE)
object = readRDS(file.path('results', ANALYSIS_VERSION, "manual_annotation_early_wt12/manual_celltype_object1.rds"))
all_genes = c("CG14756", "Tpst", "Papss", "nur", "CG13159", "pip", "toe", "sage", "trh", 'Hs6st', 'CG3777', 'stumps', 'Gasp', 'Osi15', 'wisp', 'stai', 'CG4502', 'pgc', 'nos', 'Prosalpha5')
for(temp_gene in all_genes) {
p = FeaturePlot(object, features = temp_gene) +
theme_void() +
ggtitle("") +
theme(legend.position = "none")
ggsave(filename = file.path(TARGET_dir, paste0(temp_gene, "_UMAP.png")), plot = p, width = 5, height = 5)
}
