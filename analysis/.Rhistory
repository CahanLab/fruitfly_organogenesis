# To reproduce our work, run this script.
# We used MacOS 13.3.1 (a) with an R package environment managed by renv.
# We used R version 4.1.2.
# Make it work on each of our computers
try({setwd("~/Dropbox/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("~/Dropbox (CahanLab)/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("c:/Users/DAndrewLab/Desktop/fruitfly_organogenesis/analysis/")}, silent = T)
renv::activate()
ANALYSIS_VERSION = "v18" # Where to put output
# wildtype rep 3 is presented as wildtype stage 13-16 rep 2 in the manuscript
metadata = read.table(header = T, text=
"sample cellranger
wt_rep1 2021-10-27_scRNA_10x_3prime
wt_rep3 2022-08-11_scRNA_10x_3prime_CellRanger6.1.2
wt_early_rep1 2022-12-07_scRNA_10x_3prime_WT_early
wt_early_rep2 2022-12-13_scRNA_10x_3prime_WT_early2")
SAMPLE = "all"
source("R/set_up_environment.R")
TARGET_dir = file.path("results", ANALYSIS_VERSION, "x_chromosome_germ_cells")
##### compare the ratio and marker genes for germ cells ######
monocle3_obj = readRDS("results/v18/refined_wt_late_early_germ/monocle3_no_batch_correct_object.rds")
monocle3_obj@colData[clusters(monocle3_obj) == 1, 'subtypes'] = 'Unknown 1'
monocle3_obj@colData[clusters(monocle3_obj) == 3, 'subtypes'] = 'Unknown 2'
monocle3_obj@colData[clusters(monocle3_obj) == 5, 'subtypes'] = 'Early Germ Cells'
monocle3_obj@colData[clusters(monocle3_obj) == 6, 'subtypes'] = 'Interm. Germ Cells 1'
monocle3_obj@colData[clusters(monocle3_obj) == 2, 'subtypes'] = 'Interm. Germ Cells 2'
monocle3_obj@colData[clusters(monocle3_obj) == 4, 'subtypes'] = 'Late Germ Cells'
sheet_index_list = c(1, 2, 3, 4)
sheet_index_list = c(1, 2, 3, 4)
for(sheet_index in sheet_index_list) {
if(sheet_index == 1) {
type = "sexed_female"
} else if(sheet_index == 2) {
type = "sexed_male"
} else if(sheet_index == 3) {
type = "unsexed_female"
} else if(sheet_index == 4) {
type = "unsexed_male"
}
sex_marker_genes = readxl::read_excel("accessory_data/sex_determining_genes/SupplementalTable_S4.xlsx", sheet = sheet_index)
monocle3::plot_genes_by_group(monocle3_obj, markers = sex_marker_genes$gene_short_name, group_cells_by = 'subtypes') + coord_flip() +
theme_half_open()
ggsave(file.path(TARGET_dir, paste0(type, "_GC.png")), width = 9)
monocle3::plot_cells(monocle3_obj, genes = as.vector(sex_marker_genes$gene_short_name), cell_size = 1, show_trajectory_graph = FALSE) +
theme(text = element_text(size = 32))
ggsave(file.path(TARGET_dir, paste0(type, "_UMAP_GC.png")), width = 20, height = 20)
}
TARGET_dir
sheet_index_list = c(1, 2, 3, 4)
for(sheet_index in sheet_index_list) {
if(sheet_index == 1) {
type = "sexed_female"
} else if(sheet_index == 2) {
type = "sexed_male"
} else if(sheet_index == 3) {
type = "unsexed_female"
} else if(sheet_index == 4) {
type = "unsexed_male"
}
sex_marker_genes = readxl::read_excel("accessory_data/sex_determining_genes/SupplementalTable_S4.xlsx", sheet = sheet_index)
monocle3::plot_genes_by_group(monocle3_obj, markers = sex_marker_genes$gene_short_name, group_cells_by = 'subtypes') + coord_flip()
ggsave(file.path(TARGET_dir, paste0(type, "_GC.png")), width = 9, height = 9)
monocle3::plot_cells(monocle3_obj, genes = as.vector(sex_marker_genes$gene_short_name), cell_size = 1, show_trajectory_graph = FALSE) +
theme(text = element_text(size = 32))
ggsave(file.path(TARGET_dir, paste0(type, "_UMAP_GC.png")), width = 20, height = 20)
}
sheet_index_list = c(1, 2, 3, 4)
for(sheet_index in sheet_index_list) {
if(sheet_index == 1) {
type = "sexed_female"
} else if(sheet_index == 2) {
type = "sexed_male"
} else if(sheet_index == 3) {
type = "unsexed_female"
} else if(sheet_index == 4) {
type = "unsexed_male"
}
sex_marker_genes = readxl::read_excel("accessory_data/sex_determining_genes/SupplementalTable_S4.xlsx", sheet = sheet_index)
monocle3::plot_genes_by_group(monocle3_obj, markers = sex_marker_genes$gene_short_name, group_cells_by = 'subtypes') + coord_flip()
ggsave(file.path(TARGET_dir, paste0(type, "_GC.png")), width = 8, height = 5)
monocle3::plot_cells(monocle3_obj, genes = as.vector(sex_marker_genes$gene_short_name), cell_size = 1, show_trajectory_graph = FALSE) +
theme(text = element_text(size = 32))
ggsave(file.path(TARGET_dir, paste0(type, "_UMAP_GC.png")), width = 20, height = 20)
}
sex_marker_genes = readxl::read_excel("accessory_data/sex_determining_genes/SupplementalTable_S4.xlsx", sheet = sheet_index)
View(sex_marker_genes)
sex_marker_genes_1 = readxl::read_excel("accessory_data/sex_determining_genes/SupplementalTable_S4.xlsx", sheet = 1)
sex_marker_genes_2 = readxl::read_excel("accessory_data/sex_determining_genes/SupplementalTable_S4.xlsx", sheet = 3)
intersect(sex_marker_genes_1$gene_short_name, sex_marker_genes_2$gene_short_name)
sex_marker_genes_3 = readxl::read_excel("accessory_data/sex_determining_genes/SupplementalTable_S4.xlsx", sheet = 2)
sex_marker_genes_4 = readxl::read_excel("accessory_data/sex_determining_genes/SupplementalTable_S4.xlsx", sheet = 4)
intersect(sex_marker_genes_3$gene_short_name, sex_marker_genes_4$gene_short_name)
# plot out the intersecting female genes
sex_marker_genes_1 = readxl::read_excel("accessory_data/sex_determining_genes/SupplementalTable_S4.xlsx", sheet = 1)
sex_marker_genes_2 = readxl::read_excel("accessory_data/sex_determining_genes/SupplementalTable_S4.xlsx", sheet = 3)
female_genes = intersect(sex_marker_genes_1$gene_short_name, sex_marker_genes_2$gene_short_name)
monocle3::plot_genes_by_group(monocle3_obj, markers = female_genes, group_cells_by = 'subtypes') + coord_flip()
ggsave(file.path(TARGET_dir, paste0("female_intersecting_GC.png")), width = 8, height = 5)
sex_marker_genes_3 = readxl::read_excel("accessory_data/sex_determining_genes/SupplementalTable_S4.xlsx", sheet = 2)
sex_marker_genes_4 = readxl::read_excel("accessory_data/sex_determining_genes/SupplementalTable_S4.xlsx", sheet = 4)
male_genes = intersect(sex_marker_genes_3$gene_short_name, sex_marker_genes_4$gene_short_name)
monocle3::plot_genes_by_group(monocle3_obj, markers = male_genes, group_cells_by = 'subtypes') + coord_flip()
ggsave(file.path(TARGET_dir, paste0("male_intersecting_GC.png")), width = 8, height = 5)
sheet_index_list = c(1, 2, 3, 4)
for(sheet_index in sheet_index_list) {
if(sheet_index == 1) {
type = "sexed_female"
} else if(sheet_index == 2) {
type = "sexed_male"
} else if(sheet_index == 3) {
type = "unsexed_female"
} else if(sheet_index == 4) {
type = "unsexed_male"
}
sex_marker_genes = readxl::read_excel("accessory_data/sex_determining_genes/SupplementalTable_S4.xlsx", sheet = sheet_index)
monocle3::plot_genes_by_group(monocle3_obj, markers = sex_marker_genes$gene_short_name, group_cells_by = 'subtypes') + coord_flip()
ggsave(file.path(TARGET_dir, paste0(type, "_GC.png")), width = 10, height = 5)
monocle3::plot_cells(monocle3_obj, genes = as.vector(sex_marker_genes$gene_short_name), cell_size = 1, show_trajectory_graph = FALSE) +
theme(text = element_text(size = 32))
ggsave(file.path(TARGET_dir, paste0(type, "_UMAP_GC.png")), width = 20, height = 20)
}
sheet_index_list = c(1, 2, 3, 4)
for(sheet_index in sheet_index_list) {
if(sheet_index == 1) {
type = "sexed_female"
} else if(sheet_index == 2) {
type = "sexed_male"
} else if(sheet_index == 3) {
type = "unsexed_female"
} else if(sheet_index == 4) {
type = "unsexed_male"
}
sex_marker_genes = readxl::read_excel("accessory_data/sex_determining_genes/SupplementalTable_S4.xlsx", sheet = sheet_index)
monocle3::plot_genes_by_group(monocle3_obj, markers = sex_marker_genes$gene_short_name, group_cells_by = 'subtypes') + coord_flip()
ggsave(file.path(TARGET_dir, paste0(type, "_GC.png")), width = 12, height = 5)
monocle3::plot_cells(monocle3_obj, genes = as.vector(sex_marker_genes$gene_short_name), cell_size = 1, show_trajectory_graph = FALSE) +
theme(text = element_text(size = 32))
ggsave(file.path(TARGET_dir, paste0(type, "_UMAP_GC.png")), width = 20, height = 20)
}
sheet_index_list = c(1, 2, 3, 4)
for(sheet_index in sheet_index_list) {
if(sheet_index == 1) {
type = "sexed_female"
} else if(sheet_index == 2) {
type = "sexed_male"
} else if(sheet_index == 3) {
type = "unsexed_female"
} else if(sheet_index == 4) {
type = "unsexed_male"
}
sex_marker_genes = readxl::read_excel("accessory_data/sex_determining_genes/SupplementalTable_S4.xlsx", sheet = sheet_index)
monocle3::plot_genes_by_group(monocle3_obj, markers = sex_marker_genes$gene_short_name, group_cells_by = 'subtypes') + coord_flip()
ggsave(file.path(TARGET_dir, paste0(type, "_GC.png")), width = 12, height = 4)
monocle3::plot_cells(monocle3_obj, genes = as.vector(sex_marker_genes$gene_short_name), cell_size = 1, show_trajectory_graph = FALSE) +
theme(text = element_text(size = 32))
ggsave(file.path(TARGET_dir, paste0(type, "_UMAP_GC.png")), width = 20, height = 20)
}
sheet_index_list = c(1, 2, 3, 4)
for(sheet_index in sheet_index_list) {
if(sheet_index == 1) {
type = "sexed_female"
} else if(sheet_index == 2) {
type = "sexed_male"
} else if(sheet_index == 3) {
type = "unsexed_female"
} else if(sheet_index == 4) {
type = "unsexed_male"
}
sex_marker_genes = readxl::read_excel("accessory_data/sex_determining_genes/SupplementalTable_S4.xlsx", sheet = sheet_index)
monocle3::plot_genes_by_group(monocle3_obj, markers = sex_marker_genes$gene_short_name, group_cells_by = 'subtypes') + coord_flip()
ggsave(file.path(TARGET_dir, paste0(type, "_GC.png")), width = 11, height = 3)
monocle3::plot_cells(monocle3_obj, genes = as.vector(sex_marker_genes$gene_short_name), cell_size = 1, show_trajectory_graph = FALSE) +
theme(text = element_text(size = 32))
ggsave(file.path(TARGET_dir, paste0(type, "_UMAP_GC.png")), width = 20, height = 20)
}
sheet_index_list = c(1, 2, 3, 4)
for(sheet_index in sheet_index_list) {
if(sheet_index == 1) {
type = "sexed_female"
} else if(sheet_index == 2) {
type = "sexed_male"
} else if(sheet_index == 3) {
type = "unsexed_female"
} else if(sheet_index == 4) {
type = "unsexed_male"
}
sex_marker_genes = readxl::read_excel("accessory_data/sex_determining_genes/SupplementalTable_S4.xlsx", sheet = sheet_index)
monocle3::plot_genes_by_group(monocle3_obj, markers = sex_marker_genes$gene_short_name, group_cells_by = 'subtypes') + coord_flip()
ggsave(file.path(TARGET_dir, paste0(type, "_GC.png")), width = 11, height = 3.5)
monocle3::plot_cells(monocle3_obj, genes = as.vector(sex_marker_genes$gene_short_name), cell_size = 1, show_trajectory_graph = FALSE) +
theme(text = element_text(size = 32))
ggsave(file.path(TARGET_dir, paste0(type, "_UMAP_GC.png")), width = 20, height = 20)
}
sheet_index_list = c(1, 2, 3, 4)
for(sheet_index in sheet_index_list) {
if(sheet_index == 1) {
type = "sexed_female"
} else if(sheet_index == 2) {
type = "sexed_male"
} else if(sheet_index == 3) {
type = "unsexed_female"
} else if(sheet_index == 4) {
type = "unsexed_male"
}
sex_marker_genes = readxl::read_excel("accessory_data/sex_determining_genes/SupplementalTable_S4.xlsx", sheet = sheet_index)
monocle3::plot_genes_by_group(monocle3_obj, markers = sex_marker_genes$gene_short_name, group_cells_by = 'subtypes') + coord_flip()
ggsave(file.path(TARGET_dir, paste0(type, "_GC.png")), width = 11, height = 4)
monocle3::plot_cells(monocle3_obj, genes = as.vector(sex_marker_genes$gene_short_name), cell_size = 1, show_trajectory_graph = FALSE) +
theme(text = element_text(size = 32))
ggsave(file.path(TARGET_dir, paste0(type, "_UMAP_GC.png")), width = 20, height = 20)
}
sheet_index_list = c(1, 2, 3, 4)
for(sheet_index in sheet_index_list) {
if(sheet_index == 1) {
type = "sexed_female"
} else if(sheet_index == 2) {
type = "sexed_male"
} else if(sheet_index == 3) {
type = "unsexed_female"
} else if(sheet_index == 4) {
type = "unsexed_male"
}
sex_marker_genes = readxl::read_excel("accessory_data/sex_determining_genes/SupplementalTable_S4.xlsx", sheet = sheet_index)
monocle3::plot_genes_by_group(monocle3_obj, markers = sex_marker_genes$gene_short_name, group_cells_by = 'subtypes') + coord_flip()
ggsave(file.path(TARGET_dir, paste0(type, "_GC.png")), width = 11, height = 4.1)
monocle3::plot_cells(monocle3_obj, genes = as.vector(sex_marker_genes$gene_short_name), cell_size = 1, show_trajectory_graph = FALSE) +
theme(text = element_text(size = 32))
ggsave(file.path(TARGET_dir, paste0(type, "_UMAP_GC.png")), width = 20, height = 20)
}
# To reproduce our work, run this script.
# We used MacOS 13.3.1 (a) with an R package environment managed by renv.
# We used R version 4.1.2.
# Make it work on each of our computers
try({setwd("~/Dropbox/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("~/Dropbox (CahanLab)/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("c:/Users/DAndrewLab/Desktop/fruitfly_organogenesis/analysis/")}, silent = T)
renv::activate()
ANALYSIS_VERSION = "v18" # Where to put output
# wildtype rep 3 is presented as wildtype stage 13-16 rep 2 in the manuscript
metadata = read.table(header = T, text=
"sample cellranger
wt_rep1 2021-10-27_scRNA_10x_3prime
wt_rep3 2022-08-11_scRNA_10x_3prime_CellRanger6.1.2
wt_early_rep1 2022-12-07_scRNA_10x_3prime_WT_early
wt_early_rep2 2022-12-13_scRNA_10x_3prime_WT_early2")
SAMPLE = "all"
source("R/set_up_environment.R")
# plot out UMAPs of markers genes for SG, Tr, and SG
TARGET_dir = file.path("results", ANALYSIS_VERSION, "figure_plots", 'UMAPS_marker_genes_late_3ct')
dir.create(TARGET_dir, recursive = TRUE)
object = readRDS(file.path('results', ANALYSIS_VERSION, "manual_annotation_wt13/manual_celltype_object4.rds"))
all_genes = c('CG15743', "CG14756", "Tpst", "Papss", "nur", "CG13159", "pip", "toe", "sage", "trh", 'Hs6st', 'CG3777', 'stumps', 'Gasp', 'Osi15', 'wisp', 'stai', 'CG4502', 'pgc', 'nos', 'Prosalpha5', 'piwi', 'Hsp26', 'ZnT49B')
for(temp_gene in all_genes) {
p = FeaturePlot(object, features = temp_gene, order = TRUE) +
theme_void() +
ggtitle("") +
theme(legend.position = "none")
ggsave(filename = file.path(TARGET_dir, paste0(temp_gene, "_UMAP.png")), plot = p, width = 5, height = 5)
}
# plot out UMAPs of markers genes for SG, Tr, and SG
TARGET_dir = file.path("results", ANALYSIS_VERSION, "figure_plots", 'UMAPS_marker_genes_early_3ct')
dir.create(TARGET_dir, recursive = TRUE)
object = readRDS(file.path('results', ANALYSIS_VERSION, "manual_annotation_early_wt12/manual_celltype_object1.rds"))
all_genes = c('CG15743', "CG14756", "Tpst", "Papss", "nur", "CG13159", "pip", "toe", "sage", "trh", 'Hs6st', 'CG3777', 'stumps', 'Gasp', 'Osi15', 'wisp', 'stai', 'CG4502', 'pgc', 'nos', 'Prosalpha5', 'piwi', 'Hsp26', 'ZnT49B')
for(temp_gene in all_genes) {
p = FeaturePlot(object, features = temp_gene, order = TRUE) +
theme_void() +
ggtitle("") +
theme(legend.position = "none")
ggsave(filename = file.path(TARGET_dir, paste0(temp_gene, "_UMAP.png")), plot = p, width = 5, height = 5)
}
##### load in data  ######
TARGET_dir = file.path("results", ANALYSIS_VERSION, "figure_plots", 'refined_wt13_early12_salivary_gland')
##### look at salivary gland specific genes #####
early_DE_genes = read.csv(file.path("results", ANALYSIS_VERSION, "early_wt12_enrichment/Salivary Gland/markers_genes.csv"), row.names = 1)
late_DE_genes = read.csv(file.path("results", ANALYSIS_VERSION, "wt13_enrichment/Salivary Gland/markers_genes.csv"), row.names = 1)
late_DE_genes = late_DE_genes[late_DE_genes$p_val_adj < 0.05 & late_DE_genes$avg_log2FC > 0, ]
early_DE_genes = early_DE_genes[early_DE_genes$p_val_adj < 0.05 & early_DE_genes$avg_log2FC > 0, ]
late_DE_genes$symbol = rownames(late_DE_genes)
early_DE_genes$symbol = rownames(early_DE_genes)
late_DE_genes$type = 'late'
early_DE_genes$type = 'early'
combined_DE_genes = rbind(late_DE_genes, early_DE_genes)
combined_DE_genes[combined_DE_genes$symbol %in% combined_DE_genes$symbol[duplicated(combined_DE_genes$symbol)], 'type'] =
paste0(combined_DE_genes[combined_DE_genes$symbol %in% combined_DE_genes$symbol[duplicated(combined_DE_genes$symbol)], 'type'], "_", "both")
sub_type_rank_sum = read.csv(file.path(TARGET_dir, 'DE_genes.csv'), row.names = 1)
sub_type_rank_sum = sub_type_rank_sum[sub_type_rank_sum$padj < 0.05, ]
early_sum_test = sub_type_rank_sum[sub_type_rank_sum$group == 'Earlier Salivary Gland Cells', ]
early_sum_test = early_sum_test[early_sum_test$feature %in% combined_DE_genes[combined_DE_genes$type == 'early', 'symbol'], ]
late_sum_test = sub_type_rank_sum[sub_type_rank_sum$group == 'Later Salivary Gland Cells', ]
late_sum_test = late_sum_test[late_sum_test$feature %in% combined_DE_genes[combined_DE_genes$type == 'late', 'symbol'], ]
View(late_sum_test)
##### Plotting out the TFs #####
# look at TFs
TF_tab = read.csv("accessory_data/Drosophila_TFs/all_candidates.csv", sep = '\t')
TF_tab = TF_tab[TF_tab$verdict_DNA_BD != "NO", ]
early_TFs = intersect(TF_tab$symbol, early_sum_test$feature)
late_TFs = intersect(TF_tab$symbol, late_sum_test$feature)
middle_sum_test = combined_DE_genes[grep("both", combined_DE_genes$type), ]
middle_TF = intersect(TF_tab$symbol, unique(middle_sum_test$symbol))
# this is for the dotplot
all_TFs = c(early_TFs, middle_TF, late_TFs)
View(combined_DE_genes)
all_TFs_new = intersect(TF_tab$symbol, combined_DE_genes$symbol)
all_TFs_new
unique(all_TFs_new)
##### Plotting out the TFs #####
# look at TFs
TF_tab = read.csv("accessory_data/Drosophila_TFs/all_candidates.csv", sep = '\t')
TF_tab = TF_tab[TF_tab$verdict_DNA_BD != "NO", ]
all_TFs_new = intersect(TF_tab$symbol, combined_DE_genes$symbol)
intersect(all_TFs_new, all_TFs)
all_TFs = unique(intersect(TF_tab$symbol, combined_DE_genes$symbol))
cds@colData$cell_type = NA
cds@colData[clusters(cds) == 2, 'cell_type'] = "Early Salivary Gland Cells"
cds@colData[clusters(cds) == 1, 'cell_type'] = "Late Salivary Gland Cells"
##### look at salivary gland specific genes #####
cds = readRDS(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_salivary_gland", "monocle3_no_batch_correct_object.rds"))
early_DE_genes = read.csv(file.path("results", ANALYSIS_VERSION, "early_wt12_enrichment/Salivary Gland/markers_genes.csv"), row.names = 1)
late_DE_genes = read.csv(file.path("results", ANALYSIS_VERSION, "wt13_enrichment/Salivary Gland/markers_genes.csv"), row.names = 1)
late_DE_genes = late_DE_genes[late_DE_genes$p_val_adj < 0.05 & late_DE_genes$avg_log2FC > 0, ]
early_DE_genes = early_DE_genes[early_DE_genes$p_val_adj < 0.05 & early_DE_genes$avg_log2FC > 0, ]
late_DE_genes$symbol = rownames(late_DE_genes)
early_DE_genes$symbol = rownames(early_DE_genes)
late_DE_genes$type = 'late'
early_DE_genes$type = 'early'
combined_DE_genes = rbind(late_DE_genes, early_DE_genes)
combined_DE_genes[combined_DE_genes$symbol %in% combined_DE_genes$symbol[duplicated(combined_DE_genes$symbol)], 'type'] =
paste0(combined_DE_genes[combined_DE_genes$symbol %in% combined_DE_genes$symbol[duplicated(combined_DE_genes$symbol)], 'type'], "_", "both")
##### Plotting out the TFs #####
# look at TFs
TF_tab = read.csv("accessory_data/Drosophila_TFs/all_candidates.csv", sep = '\t')
TF_tab = TF_tab[TF_tab$verdict_DNA_BD != "NO", ]
early_TFs = intersect(TF_tab$symbol, early_sum_test$feature)
late_TFs = intersect(TF_tab$symbol, late_sum_test$feature)
middle_sum_test = combined_DE_genes[grep("both", combined_DE_genes$type), ]
middle_TF = intersect(TF_tab$symbol, unique(middle_sum_test$symbol))
# this is for the dotplot
all_TFs = c(early_TFs, middle_TF, late_TFs)
all_TFs = unique(intersect(TF_tab$symbol, combined_DE_genes$symbol))
cds@colData$cell_type = NA
cds@colData[clusters(cds) == 2, 'cell_type'] = "Early Salivary Gland Cells"
cds@colData[clusters(cds) == 1, 'cell_type'] = "Late Salivary Gland Cells"
meta_tab = cds@colData
norm_data = normalized_counts(cds)
diff_count = c()
for(TF in all_TFs) {
early_norm = norm_data[, rownames(meta_tab[meta_tab$cell_type == 'Early Salivary Gland Cells', ])]
late_norm = norm_data[, rownames(meta_tab[meta_tab$cell_type == 'Late Salivary Gland Cells', ])]
percent_early = sum(early_norm[TF, ] > 0) / ncol(early_norm)
percent_late = sum(late_norm[TF, ] > 0) / ncol(late_norm)
diff = abs(percent_early - percent_late)
diff_count = c(diff_count, percent_late)
}
names(diff_count) = all_TFs
sort(diff_count)
# dot plot
p = plot_genes_by_group(cds, markers = names(sort(diff_count)), norm_method = 'log', group_cells_by = 'cell_type', ordering_type = 'none') +
xlab("Cell Types") +
ylab("Transcription Factors") +
coord_flip() +
scale_x_discrete(limits = c('Late Salivary Gland Cells', 'Early Salivary Gland Cells')) +
theme(text = element_text(size = 24))
intersect(all_TFs_new, all_TFs)p
p
View(combined_DE_genes)
combined_DE_genes = combined_DE_genes[combined_DE_genes$symbol %in% all_TFs, ]
View(combined_DE_genes)
##### look at salivary gland specific genes #####
cds = readRDS(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_salivary_gland", "monocle3_no_batch_correct_object.rds"))
early_DE_genes = read.csv(file.path("results", ANALYSIS_VERSION, "early_wt12_enrichment/Salivary Gland/markers_genes.csv"), row.names = 1)
late_DE_genes = read.csv(file.path("results", ANALYSIS_VERSION, "wt13_enrichment/Salivary Gland/markers_genes.csv"), row.names = 1)
late_DE_genes = late_DE_genes[late_DE_genes$p_val_adj < 0.05 & late_DE_genes$avg_log2FC > 0, ]
early_DE_genes = early_DE_genes[early_DE_genes$p_val_adj < 0.05 & early_DE_genes$avg_log2FC > 0, ]
late_DE_genes$symbol = rownames(late_DE_genes)
early_DE_genes$symbol = rownames(early_DE_genes)
late_DE_genes$type = 'late'
early_DE_genes$type = 'early'
combined_DE_genes = rbind(late_DE_genes, early_DE_genes)
combined_DE_genes[combined_DE_genes$symbol %in% combined_DE_genes$symbol[duplicated(combined_DE_genes$symbol)], 'type'] =
paste0(combined_DE_genes[combined_DE_genes$symbol %in% combined_DE_genes$symbol[duplicated(combined_DE_genes$symbol)], 'type'], "_", "both")
combined_DE_genes[combined_DE_genes$symbol %in% combined_DE_genes$symbol[duplicated(combined_DE_genes$symbol)], 'type'] =
paste0(combined_DE_genes[combined_DE_genes$symbol %in% combined_DE_genes$symbol[duplicated(combined_DE_genes$symbol)], 'type'], "_", "both")
combined_DE_genes
combined_DE_genes = combined_DE_genes[combined_DE_genes$pct.1 > 0.15, ]
##### Plotting out the TFs #####
# look at TFs
TF_tab = read.csv("accessory_data/Drosophila_TFs/all_candidates.csv", sep = '\t')
TF_tab = TF_tab[TF_tab$verdict_DNA_BD != "NO", ]
# this is for the dotplot
all_TFs = unique(intersect(TF_tab$symbol, combined_DE_genes$symbol))
combined_DE_genes = combined_DE_genes[combined_DE_genes$symbol %in% all_TFs, ]
cds@colData$cell_type = NA
cds@colData[clusters(cds) == 2, 'cell_type'] = "Early Salivary Gland Cells"
cds@colData[clusters(cds) == 1, 'cell_type'] = "Late Salivary Gland Cells"
meta_tab = cds@colData
norm_data = normalized_counts(cds)
diff_count = c()
for(TF in all_TFs) {
early_norm = norm_data[, rownames(meta_tab[meta_tab$cell_type == 'Early Salivary Gland Cells', ])]
late_norm = norm_data[, rownames(meta_tab[meta_tab$cell_type == 'Late Salivary Gland Cells', ])]
percent_early = sum(early_norm[TF, ] > 0) / ncol(early_norm)
percent_late = sum(late_norm[TF, ] > 0) / ncol(late_norm)
diff = abs(percent_early - percent_late)
diff_count = c(diff_count, percent_late)
}
names(diff_count) = all_TFs
sort(diff_count)
# dot plot
p = plot_genes_by_group(cds, markers = names(sort(diff_count)), norm_method = 'log', group_cells_by = 'cell_type', ordering_type = 'none') +
xlab("Cell Types") +
ylab("Transcription Factors") +
coord_flip() +
scale_x_discrete(limits = c('Late Salivary Gland Cells', 'Early Salivary Gland Cells')) +
theme(text = element_text(size = 24))
p
##### look at salivary gland specific genes #####
cds = readRDS(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_salivary_gland", "monocle3_no_batch_correct_object.rds"))
early_DE_genes = read.csv(file.path("results", ANALYSIS_VERSION, "early_wt12_enrichment/Salivary Gland/markers_genes.csv"), row.names = 1)
late_DE_genes = read.csv(file.path("results", ANALYSIS_VERSION, "wt13_enrichment/Salivary Gland/markers_genes.csv"), row.names = 1)
late_DE_genes = late_DE_genes[late_DE_genes$p_val_adj < 0.05 & late_DE_genes$avg_log2FC > 0, ]
early_DE_genes = early_DE_genes[early_DE_genes$p_val_adj < 0.05 & early_DE_genes$avg_log2FC > 0, ]
late_DE_genes$symbol = rownames(late_DE_genes)
early_DE_genes$symbol = rownames(early_DE_genes)
late_DE_genes$type = 'late'
early_DE_genes$type = 'early'
combined_DE_genes = rbind(late_DE_genes, early_DE_genes)
combined_DE_genes[combined_DE_genes$symbol %in% combined_DE_genes$symbol[duplicated(combined_DE_genes$symbol)], 'type'] =
paste0(combined_DE_genes[combined_DE_genes$symbol %in% combined_DE_genes$symbol[duplicated(combined_DE_genes$symbol)], 'type'], "_", "both")
##### Plotting out the TFs #####
# look at TFs
TF_tab = read.csv("accessory_data/Drosophila_TFs/all_candidates.csv", sep = '\t')
TF_tab = TF_tab[TF_tab$verdict_DNA_BD != "NO", ]
# this is for the dotplot
all_TFs = unique(intersect(TF_tab$symbol, combined_DE_genes$symbol))
all_Tfs
all_TFs
combined_DE_genes = combined_DE_genes[combined_DE_genes$pct.1 > 0.15, ]
##### Plotting out the TFs #####
# look at TFs
TF_tab = read.csv("accessory_data/Drosophila_TFs/all_candidates.csv", sep = '\t')
TF_tab = TF_tab[TF_tab$verdict_DNA_BD != "NO", ]
# this is for the dotplot
all_TFs = unique(intersect(TF_tab$symbol, combined_DE_genes$symbol))
combined_DE_genes = combined_DE_genes[combined_DE_genes$symbol %in% all_TFs, ]
View(combined_DE_genes)
?SeuratWrappers::RunPresto
