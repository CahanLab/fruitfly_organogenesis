other_proportion_list = table(sub_our_meta$seroka_scn) / nrow(sub_our_meta)
if(other_ct %in% names(other_proportion_list) == FALSE) {
combination_df[temp_index, "class_proportion"] = 0
}
else {
combination_df[temp_index, "class_proportion"] = other_proportion_list[other_ct]
}
}
return(combination_df)
}
calderon_proportion = calc_class_proportion(our_object, our_ct_col = 'harmonized_celltypes', 'calderon_scn')
calderon_proportion$other_ct = as.vector(calderon_proportion$other_ct)
calderon_proportion[calderon_proportion$other_ct == 'rand', 'other_ct'] = 'Unknown (SCN rand)'
table(calderon_proportion$other_ct)
calderon_proportion = calc_class_proportion(our_object, our_ct_col = 'harmonized_celltypes', 'calderon_scn')
table(calderon_proportion$other_ct)
table(our_object$calderon_scn)
VlnPlot(wt_object, features = 'SoxN')
VlnPlot(wt_object, features = 'SoxN', group.by = 'manual_celltype')
VlnPlot(wt_object, features = 'SoxN', group.by = 'manual_celltypes')
early_wt_object = readRDS("results/v18/manual_annotation_early_wt12/manual_celltype_object1.rds")
VlnPlot(early_wt_object, features = 'SoxN', group.by = 'manual_celltypes')
VlnPlot(early_wt_object, features = 'bowl', group.by = 'manual_celltypes')
VlnPlot(early_wt_object, features = 'bowl', group.by = 'manual_celltypes', pt.size = 0)
VlnPlot(wt_object, features = 'bowl', group.by = 'manual_celltypes', pt.size = 0)
cds = readRDS("results/v18/refined_wt_late_early_salivary_gland/monocle3_no_batch_correct_object.rds")
cds
library(monocle3)
library(ggplot2)
library(RColorBrewer)
library(dbplyr)
TARGET_dir = file.path("results", ANALYSIS_VERSION, "figure_plots", 'refined_wt13_early12_trachea')
cds = readRDS(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_trachea", "monocle3_no_batch_correct_object.rds"))
#############################
# plot out the Golgi Vesicle gene expression
cds = readRDS(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_trachea", "monocle3_no_batch_correct_object.rds"))
cds = cds[, monocle3::clusters(cds) != 9] # remove the branch from the main trajectory
term = 'Golgi vesicle transport (GO:0048193)'
GSEA_results = read.csv(file.path(TARGET_dir, "sig_middle_GSEA_results.csv"), row.names = 1)
target_genes = GSEA_results[GSEA_results$pathway == term, 'leadingEdge']
target_genes = eval(parse(text = target_genes))
norm_exp = monocle3::normalized_counts(cds)
norm_exp = as.matrix(norm_exp)
norm_exp = norm_exp[c('CrebA', target_genes), ]
# this will change
#norm_exp = norm_exp[apply(norm_exp, MARGIN = 1, FUN = max) > 1, ]
pt = monocle3::pseudotime(cds)
pt = data.frame(pseudotime = pt)
plot_df = cbind(pt, t(norm_exp[, rownames(pt)]))
smoothed_df = data.frame()
for(gene in colnames(plot_df)) {
if(gene == 'pseudotime') {
next
}
else {
yy = ksmooth(plot_df[, 'pseudotime'], plot_df[, gene], kernel="normal", bandwidth = 3, x.points=plot_df[, 'pseudotime'])
if(nrow(smoothed_df) == 0) {
smoothed_df = data.frame('pseudotime' = yy$x)
}
smoothed_df[, gene] = yy$y
}
}
smoothed_df$pseudotime = NULL
smoothed_df = t(smoothed_df)
scaled_exp = t(scale(t(smoothed_df)))
sorted_genes = names(sort(apply(scaled_exp, MARGIN = 1, FUN = which.max)))
no_tf_scaled = scaled_exp[sorted_genes[sorted_genes != 'CrebA'], ]
png(filename = file.path(TARGET_dir, paste0(term, "_dynamic_gene_heatmap.png")), height = 2000, width = 1000, res = 200)
pheatmap(no_tf_scaled, cluster_cols = FALSE, cluster_rows = FALSE)
dev.off()
TARGET_dir
convert_line_plot <- function(scaled_exp) {
plot_df = data.frame()
for(gene in rownames(scaled_exp)) {
temp_plot = data.frame(pseudotime = seq(1, ncol(scaled_exp)),
scaled_exp = scaled_exp[gene, ],
gene = gene)
plot_df = rbind(plot_df, temp_plot)
}
plot_df$pseudotime = plot_df$pseudotime / max(plot_df$pseudotime)
return(plot_df)
}
plot_df = convert_line_plot(scaled_exp)
tf_plot_df = plot_df[plot_df$gene == 'CrebA', ]
scaled_exp = scaled_exp[rownames(scaled_exp) != 'CrebA', ]
plot_df = data.frame(pseudotime = seq(1, ncol(scaled_exp)),
scaled_exp =   apply(scaled_exp, MARGIN = 2, FUN = mean),
gene = 'Golgi vesicle transport related genes (average)')
plot_df$pseudotime = (plot_df$pseudotime - min(plot_df$pseudotime)) / max(plot_df$pseudotime)
plot_df = rbind(plot_df, tf_plot_df)
no_tf_plot = plot_df[plot_df$gene != 'CrebA', ]
p<-ggplot(no_tf_plot, aes(x=pseudotime, y=scaled_exp, group=gene)) +
xlab("pseudotime") +
ylab("average expression") +
ggtitle(paste0('Average Gene Expression in ', term)) +
geom_line(color = RColorBrewer::brewer.pal(n = 4, 'Set2')[1]) + theme_bw()
p
ggsave(file.path(TARGET_dir, paste0(term, "_dynamic_gene_line_avg.png")), plot = p, width = 8, height = 5)
p<-ggplot(plot_df, aes(x=pseudotime, y=scaled_exp, group=gene)) +
xlab("pseudotime") +
ylab("smoothed and scaled expression") +
ggtitle(paste0('genes in ', term)) +
geom_line(aes(color=gene)) + theme_bw()
p
ggsave(file.path(TARGET_dir, paste0(term, "_CrebA_dynamic_gene_line_avg.png")), plot = p, width = 12, height = 8)
# plot out the Cytoplasmic translation
term = 'cytoplasmic translation (GO:0002181)'
GSEA_results = read.csv(file.path(TARGET_dir, "sig_late_GSEA_results.csv"), row.names = 1)
target_genes = GSEA_results[GSEA_results$pathway == term, 'leadingEdge']
target_genes = eval(parse(text = target_genes))
norm_exp = monocle3::normalized_counts(cds)
norm_exp = as.matrix(norm_exp)
norm_exp = norm_exp[c('rib', target_genes), ]
# this will change
#norm_exp = norm_exp[apply(norm_exp, MARGIN = 1, FUN = max) > 1, ]
pt = monocle3::pseudotime(cds)
pt = data.frame(pseudotime = pt)
plot_df = cbind(pt, t(norm_exp[, rownames(pt)]))
smoothed_df = data.frame()
for(gene in colnames(plot_df)) {
if(gene == 'pseudotime') {
next
}
else {
yy = ksmooth(plot_df[, 'pseudotime'], plot_df[, gene], kernel="normal", bandwidth = 3, x.points=plot_df[, 'pseudotime'])
if(nrow(smoothed_df) == 0) {
smoothed_df = data.frame('pseudotime' = yy$x)
}
smoothed_df[, gene] = yy$y
}
}
smoothed_df$pseudotime = NULL
smoothed_df = t(smoothed_df)
scaled_exp = t(scale(t(smoothed_df)))
sorted_genes = names(sort(apply(scaled_exp, MARGIN = 1, FUN = which.max)))
no_tf_scaled = scaled_exp[sorted_genes[sorted_genes != 'rib'], ]
png(filename = file.path(TARGET_dir, paste0(term, "_dynamic_gene_heatmap.png")), height = 2000, width = 1000, res = 200)
pheatmap(no_tf_scaled, cluster_cols = FALSE, cluster_rows = FALSE)
dev.off()
dev.off()
png(filename = file.path(TARGET_dir, paste0(term, "_dynamic_gene_heatmap.png")), height = 2000, width = 1000, res = 200)
pheatmap(no_tf_scaled, cluster_cols = FALSE, cluster_rows = FALSE)
dev.off()
convert_line_plot <- function(scaled_exp) {
plot_df = data.frame()
for(gene in rownames(scaled_exp)) {
temp_plot = data.frame(pseudotime = seq(1, ncol(scaled_exp)),
scaled_exp = scaled_exp[gene, ],
gene = gene)
plot_df = rbind(plot_df, temp_plot)
}
plot_df$pseudotime = plot_df$pseudotime / max(plot_df$pseudotime)
return(plot_df)
}
plot_df = convert_line_plot(scaled_exp)
tf_plot_df = plot_df[plot_df$gene == 'rib', ]
scaled_exp = scaled_exp[rownames(scaled_exp) != 'rib', ]
plot_df = data.frame(pseudotime = seq(1, ncol(scaled_exp)),
scaled_exp =   apply(scaled_exp, MARGIN = 2, FUN = mean),
gene = 'translation related genes (average)')
plot_df$pseudotime = (plot_df$pseudotime - min(plot_df$pseudotime)) / max(plot_df$pseudotime)
plot_df = rbind(plot_df, tf_plot_df)
no_tf_plot = plot_df[plot_df$gene != 'rib', ]
p<-ggplot(no_tf_plot, aes(x=pseudotime, y=scaled_exp, group=gene)) +
xlab("pseudotime") +
ylab("average expression") +
ggtitle(paste0('Average Gene Expression in ', term)) +
geom_line(color = RColorBrewer::brewer.pal(n = 4, 'Set2')[2]) + theme_bw()
p
ggsave(file.path(TARGET_dir, paste0(term, "_dynamic_gene_line_avg.png")), plot = p, width = 8, height = 5)
p<-ggplot(plot_df, aes(x=pseudotime, y=scaled_exp, group=gene)) +
xlab("pseudotime") +
ylab("smoothed and scaled expression") +
ggtitle(paste0('genes in ', term)) +
geom_line(aes(color=gene)) + theme_bw()
p
ggsave(file.path(TARGET_dir, paste0(term, "_rib_dynamic_gene_line_avg.png")), plot = p, width = 10, height = 8)
# plot out the tube size
term = 'regulation of tube size, open tracheal system (GO:0035151)'
GSEA_results = read.csv(file.path(TARGET_dir, "sig_middle_GSEA_results.csv"), row.names = 1)
target_genes = GSEA_results[GSEA_results$pathway == term, 'leadingEdge']
target_genes = eval(parse(text = target_genes))
norm_exp = monocle3::normalized_counts(cds)
norm_exp = as.matrix(norm_exp)
norm_exp = norm_exp[c('CrebA', target_genes), ]
# this will change
#norm_exp = norm_exp[apply(norm_exp, MARGIN = 1, FUN = max) > 1, ]
pt = monocle3::pseudotime(cds)
pt = data.frame(pseudotime = pt)
plot_df = cbind(pt, t(norm_exp[, rownames(pt)]))
smoothed_df = data.frame()
for(gene in colnames(plot_df)) {
if(gene == 'pseudotime') {
next
}
else {
yy = ksmooth(plot_df[, 'pseudotime'], plot_df[, gene], kernel="normal", bandwidth = 3, x.points=plot_df[, 'pseudotime'])
if(nrow(smoothed_df) == 0) {
smoothed_df = data.frame('pseudotime' = yy$x)
}
smoothed_df[, gene] = yy$y
}
}
smoothed_df$pseudotime = NULL
smoothed_df = t(smoothed_df)
scaled_exp = t(scale(t(smoothed_df)))
sorted_genes = names(sort(apply(scaled_exp, MARGIN = 1, FUN = which.max)))
no_tf_scaled = scaled_exp[sorted_genes[sorted_genes != 'CrebA'], ]
png(filename = file.path(TARGET_dir, paste0(term, "_dynamic_gene_heatmap.png")), height = 2000, width = 1000, res = 200)
pheatmap(no_tf_scaled, cluster_cols = FALSE, cluster_rows = FALSE)
dev.off()
dev.off()
png(filename = file.path(TARGET_dir, paste0(term, "_dynamic_gene_heatmap.png")), height = 2000, width = 1000, res = 200)
pheatmap(no_tf_scaled, cluster_cols = FALSE, cluster_rows = FALSE)
dev.off()
convert_line_plot <- function(scaled_exp) {
plot_df = data.frame()
for(gene in rownames(scaled_exp)) {
temp_plot = data.frame(pseudotime = seq(1, ncol(scaled_exp)),
scaled_exp = scaled_exp[gene, ],
gene = gene)
plot_df = rbind(plot_df, temp_plot)
}
plot_df$pseudotime = plot_df$pseudotime / max(plot_df$pseudotime)
return(plot_df)
}
plot_df = convert_line_plot(scaled_exp)
tf_plot_df = plot_df[plot_df$gene == 'CrebA', ]
scaled_exp = scaled_exp[rownames(scaled_exp) != 'CrebA', ]
plot_df = data.frame(pseudotime = seq(1, ncol(scaled_exp)),
scaled_exp =   apply(scaled_exp, MARGIN = 2, FUN = mean),
gene = 'Golgi vesicle transport related genes (average)')
plot_df$pseudotime = (plot_df$pseudotime - min(plot_df$pseudotime)) / max(plot_df$pseudotime)
plot_df = rbind(plot_df, tf_plot_df)
no_tf_plot = plot_df[plot_df$gene != 'CrebA', ]
p<-ggplot(no_tf_plot, aes(x=pseudotime, y=scaled_exp, group=gene)) +
xlab("pseudotime") +
ylab("average expression") +
ggtitle(paste0('Average Gene Expression in ', term)) +
geom_line(color = RColorBrewer::brewer.pal(n = 4, 'Set2')[1]) + theme_bw()
ggsave(file.path(TARGET_dir, paste0(term, "_dynamic_gene_line_avg.png")), plot = p, width = 8, height = 5)
p<-ggplot(plot_df, aes(x=pseudotime, y=scaled_exp, group=gene)) +
xlab("pseudotime") +
ylab("smoothed and scaled expression") +
ggtitle(paste0('genes in ', term)) +
geom_line(aes(color=gene)) + theme_bw()
p
plot_df = convert_line_plot(scaled_exp)
tf_plot_df = plot_df[plot_df$gene == 'CrebA', ]
scaled_exp = scaled_exp[rownames(scaled_exp) != 'CrebA', ]
plot_df = data.frame(pseudotime = seq(1, ncol(scaled_exp)),
scaled_exp =   apply(scaled_exp, MARGIN = 2, FUN = mean),
gene = 'regulation of tube size (average)')
plot_df$pseudotime = (plot_df$pseudotime - min(plot_df$pseudotime)) / max(plot_df$pseudotime)
plot_df = rbind(plot_df, tf_plot_df)
no_tf_plot = plot_df[plot_df$gene != 'CrebA', ]
p<-ggplot(no_tf_plot, aes(x=pseudotime, y=scaled_exp, group=gene)) +
xlab("pseudotime") +
ylab("average expression") +
ggtitle(paste0('Average Gene Expression in ', term)) +
geom_line(color = RColorBrewer::brewer.pal(n = 4, 'Set2')[1]) + theme_bw()
p
ggsave(file.path(TARGET_dir, paste0(term, "_dynamic_gene_line_avg.png")), plot = p, width = 8, height = 5)
p<-ggplot(plot_df, aes(x=pseudotime, y=scaled_exp, group=gene)) +
xlab("pseudotime") +
ylab("smoothed and scaled expression") +
ggtitle(paste0('genes in ', term)) +
geom_line(aes(color=gene)) + theme_bw()
p
p<-ggplot(plot_df, aes(x=pseudotime, y=scaled_exp, group=gene)) +
xlab("pseudotime") +
ylab("smoothed and scaled expression") +
ggtitle(paste0('genes in ', term)) +
geom_line(aes(color=gene)) + theme_bw()
p
# plot out the tube size
term = 'regulation of tube size, open tracheal system (GO:0035151)'
GSEA_results = read.csv(file.path(TARGET_dir, "sig_middle_GSEA_results.csv"), row.names = 1)
target_genes = GSEA_results[GSEA_results$pathway == term, 'leadingEdge']
target_genes = eval(parse(text = target_genes))
norm_exp = monocle3::normalized_counts(cds)
norm_exp = as.matrix(norm_exp)
norm_exp = norm_exp[c('CrebA', target_genes), ]
# this will change
#norm_exp = norm_exp[apply(norm_exp, MARGIN = 1, FUN = max) > 1, ]
pt = monocle3::pseudotime(cds)
pt = data.frame(pseudotime = pt)
plot_df = cbind(pt, t(norm_exp[, rownames(pt)]))
smoothed_df = data.frame()
for(gene in colnames(plot_df)) {
if(gene == 'pseudotime') {
next
}
else {
yy = ksmooth(plot_df[, 'pseudotime'], plot_df[, gene], kernel="normal", bandwidth = 3, x.points=plot_df[, 'pseudotime'])
if(nrow(smoothed_df) == 0) {
smoothed_df = data.frame('pseudotime' = yy$x)
}
smoothed_df[, gene] = yy$y
}
}
smoothed_df$pseudotime = NULL
smoothed_df = t(smoothed_df)
scaled_exp = t(scale(t(smoothed_df)))
sorted_genes = names(sort(apply(scaled_exp, MARGIN = 1, FUN = which.max)))
no_tf_scaled = scaled_exp[sorted_genes[sorted_genes != 'CrebA'], ]
png(filename = file.path(TARGET_dir, paste0(term, "_dynamic_gene_heatmap.png")), height = 2000, width = 1000, res = 200)
pheatmap(no_tf_scaled, cluster_cols = FALSE, cluster_rows = FALSE)
dev.off()
convert_line_plot <- function(scaled_exp) {
plot_df = data.frame()
for(gene in rownames(scaled_exp)) {
temp_plot = data.frame(pseudotime = seq(1, ncol(scaled_exp)),
scaled_exp = scaled_exp[gene, ],
gene = gene)
plot_df = rbind(plot_df, temp_plot)
}
plot_df$pseudotime = plot_df$pseudotime / max(plot_df$pseudotime)
return(plot_df)
}
plot_df = convert_line_plot(scaled_exp)
tf_plot_df = plot_df[plot_df$gene == 'CrebA', ]
scaled_exp = scaled_exp[rownames(scaled_exp) != 'CrebA', ]
plot_df = data.frame(pseudotime = seq(1, ncol(scaled_exp)),
scaled_exp =   apply(scaled_exp, MARGIN = 2, FUN = mean),
gene = 'regulation of tube size (average)')
plot_df$pseudotime = (plot_df$pseudotime - min(plot_df$pseudotime)) / max(plot_df$pseudotime)
plot_df = rbind(plot_df, tf_plot_df)
no_tf_plot = plot_df[plot_df$gene != 'CrebA', ]
p<-ggplot(no_tf_plot, aes(x=pseudotime, y=scaled_exp, group=gene)) +
xlab("pseudotime") +
ylab("average expression") +
ggtitle(paste0('Average Gene Expression in ', term)) +
geom_line(color = RColorBrewer::brewer.pal(n = 4, 'Set2')[1]) + theme_bw()
ggsave(file.path(TARGET_dir, paste0(term, "_dynamic_gene_line_avg.png")), plot = p, width = 8, height = 5)
p<-ggplot(plot_df, aes(x=pseudotime, y=scaled_exp, group=gene)) +
xlab("pseudotime") +
ylab("smoothed and scaled expression") +
ggtitle(paste0('genes in ', term)) +
geom_line(aes(color=gene)) + theme_bw()
p
ggsave(file.path(TARGET_dir, paste0(term, "_CrebA_dynamic_gene_line_avg.png")), plot = p, width = 12, height = 8)
# plot out the tube size
term = 'regulation of tube size, open tracheal system (GO:0035151)'
GSEA_results = read.csv(file.path(TARGET_dir, "sig_middle_GSEA_results.csv"), row.names = 1)
target_genes = GSEA_results[GSEA_results$pathway == term, 'leadingEdge']
target_genes = eval(parse(text = target_genes))
size_target_genes = target_genes
#############################
# plot out the Golgi Vesicle gene expression
cds = readRDS(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_trachea", "monocle3_no_batch_correct_object.rds"))
cds = cds[, monocle3::clusters(cds) != 9] # remove the branch from the main trajectory
term = 'Golgi vesicle transport (GO:0048193)'
GSEA_results = read.csv(file.path(TARGET_dir, "sig_middle_GSEA_results.csv"), row.names = 1)
target_genes = GSEA_results[GSEA_results$pathway == term, 'leadingEdge']
target_genes = eval(parse(text = target_genes))
secretion_genes = target_genes
setdiff(size_target_genes, secretion_genes)
setdiff(size_target_genes, secretion_genes) / lenght(size_target_genes)
setdiff(size_target_genes, secretion_genes) / length(size_target_genes)
length(setdiff(size_target_genes, secretion_genes)) / length(size_target_genes)
length(setdiff(secretion_genes, size_target_genes)) / length(secretion_genes)
secretion_genes
size_target_genes
#############################
# plot out the Golgi Vesicle gene expression
cds = readRDS(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_trachea", "monocle3_no_batch_correct_object.rds"))
cds = cds[, monocle3::clusters(cds) != 9] # remove the branch from the main trajectory
term = 'Golgi vesicle transport (GO:0048193)'
GSEA_results = read.csv(file.path(TARGET_dir, "sig_middle_GSEA_results.csv"), row.names = 1)
target_genes = GSEA_results[GSEA_results$pathway == term, 'leadingEdge']
target_genes = eval(parse(text = target_genes))
norm_exp = monocle3::normalized_counts(cds)
norm_exp = as.matrix(norm_exp)
norm_exp = norm_exp[c('CrebA', target_genes), ]
# this will change
#norm_exp = norm_exp[apply(norm_exp, MARGIN = 1, FUN = max) > 1, ]
pt = monocle3::pseudotime(cds)
pt = data.frame(pseudotime = pt)
plot_df = cbind(pt, t(norm_exp[, rownames(pt)]))
smoothed_df = data.frame()
for(gene in colnames(plot_df)) {
if(gene == 'pseudotime') {
next
}
else {
yy = ksmooth(plot_df[, 'pseudotime'], plot_df[, gene], kernel="normal", bandwidth = 3, x.points=plot_df[, 'pseudotime'])
if(nrow(smoothed_df) == 0) {
smoothed_df = data.frame('pseudotime' = yy$x)
}
smoothed_df[, gene] = yy$y
}
}
smoothed_df$pseudotime = NULL
smoothed_df = t(smoothed_df)
scaled_exp = t(scale(t(smoothed_df)))
sorted_genes = names(sort(apply(scaled_exp, MARGIN = 1, FUN = which.max)))
no_tf_scaled = scaled_exp[sorted_genes[sorted_genes != 'CrebA'], ]
png(filename = file.path(TARGET_dir, paste0(term, "_dynamic_gene_heatmap.png")), height = 2000, width = 1000, res = 200)
pheatmap(no_tf_scaled, cluster_cols = FALSE, cluster_rows = FALSE)
dev.off()
convert_line_plot <- function(scaled_exp) {
plot_df = data.frame()
for(gene in rownames(scaled_exp)) {
temp_plot = data.frame(pseudotime = seq(1, ncol(scaled_exp)),
scaled_exp = scaled_exp[gene, ],
gene = gene)
plot_df = rbind(plot_df, temp_plot)
}
plot_df$pseudotime = plot_df$pseudotime / max(plot_df$pseudotime)
return(plot_df)
}
plot_df = convert_line_plot(scaled_exp)
tf_plot_df = plot_df[plot_df$gene == 'CrebA', ]
scaled_exp = scaled_exp[rownames(scaled_exp) != 'CrebA', ]
plot_df = data.frame(pseudotime = seq(1, ncol(scaled_exp)),
scaled_exp =   apply(scaled_exp, MARGIN = 2, FUN = mean),
gene = 'Golgi vesicle transport related genes (average)')
plot_df$pseudotime = (plot_df$pseudotime - min(plot_df$pseudotime)) / max(plot_df$pseudotime)
plot_df = rbind(plot_df, tf_plot_df)
no_tf_plot = plot_df[plot_df$gene != 'CrebA', ]
golgi_plot_df = no_tf_plot
p<-ggplot(no_tf_plot, aes(x=pseudotime, y=scaled_exp, group=gene)) +
xlab("pseudotime") +
ylab("average expression") +
ggtitle(paste0('Average Gene Expression in ', term)) +
geom_line(color = RColorBrewer::brewer.pal(n = 4, 'Set2')[1]) + theme_bw()
# plot out the tube size
term = 'regulation of tube size, open tracheal system (GO:0035151)'
GSEA_results = read.csv(file.path(TARGET_dir, "sig_middle_GSEA_results.csv"), row.names = 1)
target_genes = GSEA_results[GSEA_results$pathway == term, 'leadingEdge']
target_genes = eval(parse(text = target_genes))
norm_exp = monocle3::normalized_counts(cds)
norm_exp = as.matrix(norm_exp)
norm_exp = norm_exp[c('CrebA', target_genes), ]
# this will change
#norm_exp = norm_exp[apply(norm_exp, MARGIN = 1, FUN = max) > 1, ]
pt = monocle3::pseudotime(cds)
pt = data.frame(pseudotime = pt)
plot_df = cbind(pt, t(norm_exp[, rownames(pt)]))
smoothed_df = data.frame()
for(gene in colnames(plot_df)) {
if(gene == 'pseudotime') {
next
}
else {
yy = ksmooth(plot_df[, 'pseudotime'], plot_df[, gene], kernel="normal", bandwidth = 3, x.points=plot_df[, 'pseudotime'])
if(nrow(smoothed_df) == 0) {
smoothed_df = data.frame('pseudotime' = yy$x)
}
smoothed_df[, gene] = yy$y
}
}
smoothed_df$pseudotime = NULL
smoothed_df = t(smoothed_df)
scaled_exp = t(scale(t(smoothed_df)))
sorted_genes = names(sort(apply(scaled_exp, MARGIN = 1, FUN = which.max)))
no_tf_scaled = scaled_exp[sorted_genes[sorted_genes != 'CrebA'], ]
png(filename = file.path(TARGET_dir, paste0(term, "_dynamic_gene_heatmap.png")), height = 2000, width = 1000, res = 200)
pheatmap(no_tf_scaled, cluster_cols = FALSE, cluster_rows = FALSE)
dev.off()
convert_line_plot <- function(scaled_exp) {
plot_df = data.frame()
for(gene in rownames(scaled_exp)) {
temp_plot = data.frame(pseudotime = seq(1, ncol(scaled_exp)),
scaled_exp = scaled_exp[gene, ],
gene = gene)
plot_df = rbind(plot_df, temp_plot)
}
plot_df$pseudotime = plot_df$pseudotime / max(plot_df$pseudotime)
return(plot_df)
}
plot_df = convert_line_plot(scaled_exp)
tf_plot_df = plot_df[plot_df$gene == 'CrebA', ]
scaled_exp = scaled_exp[rownames(scaled_exp) != 'CrebA', ]
plot_df = data.frame(pseudotime = seq(1, ncol(scaled_exp)),
scaled_exp =   apply(scaled_exp, MARGIN = 2, FUN = mean),
gene = 'regulation of tube size (average)')
plot_df$pseudotime = (plot_df$pseudotime - min(plot_df$pseudotime)) / max(plot_df$pseudotime)
plot_df = rbind(plot_df, tf_plot_df)
no_tf_plot = plot_df[plot_df$gene != 'CrebA', ]
size_plot_df = no_tf_plot
p<-ggplot(no_tf_plot, aes(x=pseudotime, y=scaled_exp, group=gene)) +
xlab("pseudotime") +
ylab("average expression") +
ggtitle(paste0('Average Gene Expression in ', term)) +
geom_line(color = RColorBrewer::brewer.pal(n = 4, 'Set2')[1]) + theme_bw()
new_plot_df = rbind(golgi_plot_df, size_plot_df)
p<-ggplot(new_plot_df, aes(x=pseudotime, y=scaled_exp, group=gene)) +
xlab("pseudotime") +
ylab("smoothed and scaled expression") +
ggtitle(paste0('genes in ', term)) +
geom_line(aes(color=gene)) + theme_bw()
p
dev.off()
p<-ggplot(new_plot_df, aes(x=pseudotime, y=scaled_exp, group=gene)) +
xlab("pseudotime") +
ylab("smoothed and scaled expression") +
ggtitle(paste0('genes in ', term)) +
geom_line(aes(color=gene)) + theme_bw()
p
p<-ggplot(new_plot_df, aes(x=pseudotime, y=scaled_exp, group=gene)) +
xlab("pseudotime") +
ylab("smoothed and scaled expression") +
ggtitle() +
geom_line(aes(color=gene)) + theme_bw()
p<-ggplot(new_plot_df, aes(x=pseudotime, y=scaled_exp, group=gene)) +
xlab("pseudotime") +
ylab("smoothed and scaled expression") +
geom_line(aes(color=gene)) + theme_bw()
ggsave(file.path(TARGET_dir, paste0(term, "_tube_size_vs_golgi_gene_line_avg.png")), plot = p, width = 12, height = 8)
ggsave(file.path(TARGET_dir, paste0("tube_size_vs_golgi_gene_line_avg.png")), plot = p, width = 12, height = 8)
