total_plot_df = rbind(our_proportion_df, Seroka_proportion_df, Calderon_proportion_df)
p<-ggplot(data=total_plot_df, aes(x=reorder(cell_types, proportion), y=proportion, fill = data_type)) +
geom_bar(stat="identity", position=position_dodge()) + theme_bw() + coord_flip() +
ylab("Total Cell Proportion") +
xlab("Cell Types") +
ggtitle("Stage 13-16 Cell Type Proportions")
p
saveRDS(total_plot_df, file = file.path(TARGET_dir, "stage_13_16_proportion.rds"))
# compare the similarity between the datasets
calc_spearman_correlation <- function(other_data, our_data, other_col, our_col) {
other_meta = other_data@meta.data
other_exp = other_data@assays$RNA@data
our_meta = our_data@meta.data
our_exp = our_data@assays$RNA@data
combination_df = expand.grid(unique(our_meta[, our_col]), unique(other_meta[, other_col]))
colnames(combination_df) = c('our_ct', 'other_ct')
combination_df$spearman_correlation = NA
intersect_genes = intersect(rownames(other_exp), rownames(our_exp))
other_exp = other_exp[intersect_genes, ]
our_exp = our_exp[intersect_genes, ]
our_avg_matrix = matrix(data = NA,
nrow = nrow(our_exp),
ncol = length(unique(combination_df$our_ct)))
colnames(our_avg_matrix) = unique(combination_df$our_ct)
rownames(our_avg_matrix) = rownames(our_exp)
for(ct in colnames(our_avg_matrix)) {
sub_our_met = our_meta[our_meta[, our_col] == ct, ]
sub_our_exp = our_exp[, rownames(sub_our_met)]
our_avg = apply(sub_our_exp, FUN = mean, MARGIN = 1)
our_avg_matrix[, ct] = our_avg
}
other_avg_matrix = matrix(data = NA,
nrow = nrow(other_exp),
ncol = length(unique(combination_df$other_ct)))
colnames(other_avg_matrix) = unique(combination_df$other_ct)
rownames(other_avg_matrix) = rownames(other_exp)
for(ct in colnames(other_avg_matrix)) {
sub_other_met = other_meta[other_meta[, other_col] == ct, ]
sub_other_exp = other_exp[, rownames(sub_other_met)]
other_avg = apply(sub_other_exp, FUN = mean, MARGIN = 1)
other_avg_matrix[, ct] = other_avg
}
for(temp_index in rownames(combination_df)) {
print(temp_index)
our_ct = combination_df[temp_index, 'our_ct']
other_ct = combination_df[temp_index, 'other_ct']
our_avg = our_avg_matrix[, our_ct]
other_avg = other_avg_matrix[, other_ct]
combination_df[temp_index, "spearman_correlation"] = cor(our_avg, other_avg, method = 'spearman')
}
return(combination_df)
}
seroka_correlation = calc_spearman_correlation(Seroka_object, our_object, other_col = 'harmonized_celltypes', our_col =  'harmonized_celltypes')
other_data = Seroka_object
our_data = our_object
other_col = 'harmonized_celltypes'
our_col = 'harmonized_celltypes'
other_meta = other_data@meta.data
other_exp = other_data@assays$RNA@data
our_meta = our_data@meta.data
our_exp = our_data@assays$RNA@data
combination_df = expand.grid(unique(our_meta[, our_col]), unique(other_meta[, other_col]))
colnames(combination_df) = c('our_ct', 'other_ct')
combination_df$spearman_correlation = NA
intersect_genes = intersect(rownames(other_exp), rownames(our_exp))
other_exp = other_exp[intersect_genes, ]
our_exp = our_exp[intersect_genes, ]
our_avg_matrix = matrix(data = NA,
nrow = nrow(our_exp),
ncol = length(unique(combination_df$our_ct)))
colnames(our_avg_matrix) = unique(combination_df$our_ct)
rownames(our_avg_matrix) = rownames(our_exp)
for(ct in colnames(our_avg_matrix)) {
sub_our_met = our_meta[our_meta[, our_col] == ct, ]
sub_our_exp = our_exp[, rownames(sub_our_met)]
our_avg = apply(sub_our_exp, FUN = mean, MARGIN = 1)
our_avg_matrix[, ct] = our_avg
}
other_avg_matrix = matrix(data = NA,
nrow = nrow(other_exp),
ncol = length(unique(combination_df$other_ct)))
colnames(other_avg_matrix) = unique(combination_df$other_ct)
rownames(other_avg_matrix) = rownames(other_exp)
for(ct in colnames(other_avg_matrix)) {
sub_other_met = other_meta[other_meta[, other_col] == ct, ]
sub_other_exp = other_exp[, rownames(sub_other_met)]
other_avg = apply(sub_other_exp, FUN = mean, MARGIN = 1)
other_avg_matrix[, ct] = other_avg
}
for(temp_index in rownames(combination_df)) {
print(temp_index)
our_ct = combination_df[temp_index, 'our_ct']
other_ct = combination_df[temp_index, 'other_ct']
our_avg = our_avg_matrix[, our_ct]
other_avg = other_avg_matrix[, other_ct]
combination_df[temp_index, "spearman_correlation"] = cor(our_avg, other_avg, method = 'spearman')
}
seroka_correlation = combination_df
saveRDS(seroka_correlation, file = file.path(TARGET_dir, "seroka_correlation.rds"))
# compare the similarity between the datasets
calc_spearman_correlation <- function(other_data, our_data, other_col, our_col) {
other_meta = other_data@meta.data
other_exp = other_data@assays$RNA@data
our_meta = our_data@meta.data
our_exp = our_data@assays$RNA@data
combination_df = expand.grid(unique(our_meta[, our_col]), unique(other_meta[, other_col]))
colnames(combination_df) = c('our_ct', 'other_ct')
combination_df$spearman_correlation = NA
intersect_genes = intersect(rownames(other_exp), rownames(our_exp))
other_exp = other_exp[intersect_genes, ]
our_exp = our_exp[intersect_genes, ]
our_avg_matrix = matrix(data = NA,
nrow = nrow(our_exp),
ncol = length(unique(combination_df$our_ct)))
colnames(our_avg_matrix) = unique(combination_df$our_ct)
rownames(our_avg_matrix) = rownames(our_exp)
for(ct in colnames(our_avg_matrix)) {
sub_our_met = our_meta[our_meta[, our_col] == ct, ]
sub_our_exp = our_exp[, rownames(sub_our_met)]
our_avg = apply(sub_our_exp, FUN = mean, MARGIN = 1)
our_avg_matrix[, ct] = our_avg
}
other_avg_matrix = matrix(data = NA,
nrow = nrow(other_exp),
ncol = length(unique(combination_df$other_ct)))
colnames(other_avg_matrix) = unique(combination_df$other_ct)
rownames(other_avg_matrix) = rownames(other_exp)
for(ct in colnames(other_avg_matrix)) {
sub_other_met = other_meta[other_meta[, other_col] == ct, ]
sub_other_exp = other_exp[, rownames(sub_other_met)]
other_avg = apply(sub_other_exp, FUN = mean, MARGIN = 1)
other_avg_matrix[, ct] = other_avg
}
for(temp_index in rownames(combination_df)) {
print(temp_index)
our_ct = combination_df[temp_index, 'our_ct']
other_ct = combination_df[temp_index, 'other_ct']
our_avg = our_avg_matrix[, our_ct]
other_avg = other_avg_matrix[, other_ct]
combination_df[temp_index, "spearman_correlation"] = cor(our_avg, other_avg, method = 'spearman')
}
return(combination_df)
}
library(viridis)
p = ggplot(combination_df, aes(our_ct, other_ct, fill= spearman_correlation)) +
geom_tile() +
scale_fill_viridis(discrete=FALSE) + scale_x_discrete(guide = guide_axis(angle = 45)) +
ggtitle("stage 14-16: Correlation similarity between our cell types and cell types from Calderon et al, 2022")
p
seroka_correlation$our_ct = factor(seroka_correlation$our_ct, levels=sort(unique(seroka_correlation$our_ct)))
seroka_correlation$other_ct = factor(seroka_correlation$other_ct, levels=sort(unique(seroka_correlation$other_ct)))
p = ggplot(seroka_correlation, aes(our_ct, other_ct, fill= spearman_correlation)) +
geom_tile() +
scale_fill_viridis(discrete=FALSE) + scale_x_discrete(guide = guide_axis(angle = 45)) +
ggtitle("stage 14-16: Correlation similarity between our cell types and cell types from Calderon et al, 2022")
p
sort(unique(seroka_correlation$our_ct))
seroka_correlation$our_ct = factor(seroka_correlation$our_ct, levels=sort(as.vector(unique(seroka_correlation$our_ct))))
seroka_correlation$other_ct = factor(seroka_correlation$other_ct, levels=sort(as.vector(unique(seroka_correlation$other_ct))))
p = ggplot(seroka_correlation, aes(our_ct, other_ct, fill= spearman_correlation)) +
geom_tile() +
scale_fill_viridis(discrete=FALSE) + scale_x_discrete(guide = guide_axis(angle = 45)) +
ggtitle("stage 14-16: Correlation similarity between our cell types and cell types from Calderon et al, 2022")
p
p = ggplot(seroka_correlation, aes(our_ct, other_ct, fill= spearman_correlation)) +
geom_tile() +
scale_fill_viridis(option = "A", discrete=FALSE) + scale_x_discrete(guide = guide_axis(angle = 45)) +
ggtitle("Stage 14-16: Correlation similarity between our cell types and cell types from Seroka et al, 2022")
p
p = ggplot(seroka_correlation, aes(our_ct, other_ct, fill= spearman_correlation)) +
geom_tile() +
scale_fill_viridis(option = "C", discrete=FALSE) + scale_x_discrete(guide = guide_axis(angle = 45)) +
ggtitle("Stage 14-16: Correlation similarity between our cell types and cell types from Seroka et al, 2022")
p
p = ggplot(seroka_correlation, aes(our_ct, other_ct, fill= spearman_correlation)) +
geom_tile() +
scale_fill_viridis(option = "D", discrete=FALSE) + scale_x_discrete(guide = guide_axis(angle = 45)) +
ggtitle("Stage 14-16: Correlation similarity between our cell types and cell types from Seroka et al, 2022")
p
p = ggplot(seroka_correlation, aes(our_ct, other_ct, fill= spearman_correlation)) +
geom_tile() +
xlab("Our Cell Types") +
ylab("Seroka et al's Cell Types") +
scale_fill_viridis(option = "D", discrete=FALSE) + scale_x_discrete(guide = guide_axis(angle = 45)) +
ggtitle("Stage 14-16: Correlation similarity between our cell types and cell types from Seroka et al, 2022")
p
p = ggplot(seroka_correlation, aes(our_ct, other_ct, fill= spearman_correlation)) +
geom_tile() +
xlab("Our Cell Types") +
ylab("Seroka et al's Cell Types") +
scale_fill_viridis(option = "D", discrete=FALSE) + scale_x_discrete(guide = guide_axis(angle = 45)) +
ggtitle("Stage 13-16: Correlation similarity between cell types' centroids")
p
TARGET_dir
ggsave(filename = file.path(TARGET_dir, 'Seroka_cell_correlation.png'), plot = p, width = 14, height = 6)
Calderon_correlation = calc_spearman_correlation(Calderon_object, our_object, other_col = 'harmonized_celltypes', our_col =  'harmonized_celltypes')
saveRDS(Calderon_correlation, file = file.path(TARGET_dir, "calderon_correlation.rds"))
Calderon_correlation$our_ct = factor(Calderon_correlation$our_ct, levels=sort(as.vector(unique(Calderon_correlation$our_ct))))
Calderon_correlation$other_ct = factor(Calderon_correlation$other_ct, levels=sort(as.vector(unique(Calderon_correlation$other_ct))))
p = ggplot(Calderon_correlation, aes(our_ct, other_ct, fill= spearman_correlation)) +
geom_tile() +
xlab("Our Cell Types") +
ylab("Calderon et al's Cell Types") +
scale_fill_viridis(option = "D", discrete=FALSE) + scale_x_discrete(guide = guide_axis(angle = 45)) +
ggtitle("Stage 13-16: Correlation similarity between cell types' centroids")
p
ggsave(filename = file.path(TARGET_dir, 'Calderon_cell_correlation.png'), plot = p, width = 14, height = 6)
dir.create(file.path(TARGET_dir, 'Seroka_comparison_scn'))
raw_expTrain = Seroka_object@assays$RNA@counts
withr::with_dir(
file.path(TARGET_dir, 'Seroka_comparison_scn'),
{
raw_expTrain = Seroka_object@assays$RNA@counts
raw_stTrain = Seroka_object@meta.data
write(colnames(raw_expTrain), file = "raw_train_colnames.txt")
write(rownames(raw_expTrain), file = "raw_train_rownames.txt")
Matrix::writeMM(raw_expTrain, "raw_train_exp.txt")
write.csv(raw_stTrain, file = 'raw_meta_tab.csv')
}
)
withr::with_dir(
file.path(TARGET_dir, 'Seroka_comparison_scn'),
{
query_exp = our_object@assays$RNA@counts
write(colnames(query_exp), file = file.path("raw_query_colnames.txt"))
write(rownames(query_exp), file = file.path("raw_query_rownames.txt"))
Matrix::writeMM(query_exp, file.path("raw_query_exp.txt"))
}
)
# run the python scripts in the seroka
SCN_classification = read.csv(file.path(TARGET_dir, 'Seroka_comparison_scn', 'SCN_classification.csv'))
View(SCN_classification)
# run the python scripts in the seroka
SCN_classification = read.csv(file.path(TARGET_dir, 'Seroka_comparison_scn', 'SCN_classification.csv'), row.names = 1)
SCN_classification = SCN_classification[rownames(our_object@meta.data), ]
our_object@meta.data$seroka_scn = SCN_classification$SCN_class
confusionMatrix(our_object@meta.data$harmonized_celltypes, our_object@meta.data$seroka_scn)
library(caret)
install.packages("caret")
library(caret)
caret::confusionMatrix(our_object@meta.data$harmonized_celltypes, our_object@meta.data$seroka_scn)
caret::confusionMatrix(as.vector(our_object@meta.data$harmonized_celltypes), as.vector(our_object@meta.data$seroka_scn))
DimPlot(our_object, group.by = 'seroka_scn')
our_meta = our_object@meta.data
colnames(our_meta)
our_ct_col = 'harmonized_celltypes'
other_ct_col = 'seroka_scn'
combination_df = expand.grid(unique(our_meta[, our_ct_col]), unique(other_meta[, other_ct_col]))
our_ct_col
other_ct_col
combination_df = expand.grid(unique(our_meta[, our_ct_col]), unique(other_meta[, other_ct_col]))
unique(our_meta[, our_ct_col])
unique(other_meta[, other_ct_col])
other_ct_col
combination_df = expand.grid(unique(our_meta[, our_ct_col]), unique(our_meta[, other_ct_col]))
colnames(combination_df) = c('our_ct', 'other_ct')
combination_df$spearman_correlation = NA
sub_our_meta = our_meta[our_meta[, our_ct_col] == our_ct, ]
table(sub_our_meta$seroka_scn) / sum(table(sub_our_meta$seroka_scn))
other_proportion_list = table(sub_our_meta$seroka_scn) / sum(table(sub_our_meta$seroka_scn))
combination_df$class_proportion = NA
combination_df$class_proportion = NA
for(temp_index in rownames(combination_df)) {
our_ct = combination_df[temp_index, 'our_ct']
other_ct = combination_df[temp_index, 'other_ct']
sub_our_meta = our_meta[our_meta[, our_ct_col] == our_ct, ]
other_proportion_list = table(sub_our_meta$seroka_scn) / sum(table(sub_our_meta$seroka_scn))
if(other_ct %in% names(other_proportion_list)) {
combination_df[temp_index, "class_proportion"] = 0
}
else {
combination_df[temp_index, "class_proportion"] = other_proportion_list[other_ct]
}
}
calc_class_proportion <- function(our_object, our_ct_col, other_ct_col) {
our_meta = our_object@meta.data
combination_df = expand.grid(unique(our_meta[, our_ct_col]), unique(our_meta[, other_ct_col]))
colnames(combination_df) = c('our_ct', 'other_ct')
combination_df$class_proportion = NA
for(temp_index in rownames(combination_df)) {
our_ct = combination_df[temp_index, 'our_ct']
other_ct = combination_df[temp_index, 'other_ct']
sub_our_meta = our_meta[our_meta[, our_ct_col] == our_ct, ]
other_proportion_list = table(sub_our_meta$seroka_scn) / sum(table(sub_our_meta$seroka_scn))
if(other_ct %in% names(other_proportion_list)) {
combination_df[temp_index, "class_proportion"] = 0
}
else {
combination_df[temp_index, "class_proportion"] = other_proportion_list[other_ct]
}
}
return(combination_df)
}
our_ct_col
other_ct_col
seroka_proportion = calc_class_proportion((our_object, our_ct_col = 'harmonized_celltypes', 'seroka_scn'))
seroka_proportion = calc_class_proportion(our_object, our_ct_col = 'harmonized_celltypes', 'seroka_scn')
seroka_proportion
calc_class_proportion <- function(our_object, our_ct_col, other_ct_col) {
our_meta = our_object@meta.data
combination_df = expand.grid(unique(our_meta[, our_ct_col]), unique(our_meta[, other_ct_col]))
colnames(combination_df) = c('our_ct', 'other_ct')
combination_df$class_proportion = NA
for(temp_index in rownames(combination_df)) {
our_ct = combination_df[temp_index, 'our_ct']
other_ct = combination_df[temp_index, 'other_ct']
sub_our_meta = our_meta[our_meta[, our_ct_col] == our_ct, ]
other_proportion_list = table(sub_our_meta$seroka_scn) / sum(table(sub_our_meta$seroka_scn))
if(other_ct %in% names(other_proportion_list) == FALSE) {
combination_df[temp_index, "class_proportion"] = 0
}
else {
combination_df[temp_index, "class_proportion"] = other_proportion_list[other_ct]
}
}
return(combination_df)
}
seroka_proportion = calc_class_proportion(our_object, our_ct_col = 'harmonized_celltypes', 'seroka_scn')
colnames(seroka_proportion)
p = ggplot(seroka_proportion, aes(our_ct, other_ct, fill= class_proportion)) +
geom_tile() +
xlab("Our Cell Types") +
ylab("Calderon et al's Cell Types") +
scale_fill_viridis(option = "D", discrete=FALSE) + scale_x_discrete(guide = guide_axis(angle = 45)) +
ggtitle("Stage 13-16: Correlation similarity between cell types' centroids")
[]
p
our_meta = our_object@meta.data
combination_df = expand.grid(unique(our_meta[, our_ct_col]), unique(our_meta[, other_ct_col]))
colnames(combination_df) = c('our_ct', 'other_ct')
combination_df$class_proportion = NA
for(temp_index in rownames(combination_df)) {
our_ct = combination_df[temp_index, 'our_ct']
other_ct = combination_df[temp_index, 'other_ct']
sub_our_meta = our_meta[our_meta[, our_ct_col] == our_ct, ]
other_proportion_list = table(sub_our_meta$seroka_scn) / nrow(sub_our_meta)
if(other_ct %in% names(other_proportion_list) == FALSE) {
combination_df[temp_index, "class_proportion"] = 0
}
else {
combination_df[temp_index, "class_proportion"] = other_proportion_list[other_ct]
}
}
other_proportion_list
other_ct
out_Ct
our_ct
as.vector(our_ct)
as.character(our_ct)
calc_class_proportion <- function(our_object, our_ct_col, other_ct_col) {
our_meta = our_object@meta.data
combination_df = expand.grid(unique(our_meta[, our_ct_col]), unique(our_meta[, other_ct_col]))
colnames(combination_df) = c('our_ct', 'other_ct')
combination_df$class_proportion = NA
for(temp_index in rownames(combination_df)) {
our_ct = as.character(combination_df[temp_index, 'our_ct'])
other_ct = as.character(combination_df[temp_index, 'other_ct'])
sub_our_meta = our_meta[our_meta[, our_ct_col] == our_ct, ]
other_proportion_list = table(sub_our_meta$seroka_scn) / nrow(sub_our_meta)
if(other_ct %in% names(other_proportion_list) == FALSE) {
combination_df[temp_index, "class_proportion"] = 0
}
else {
combination_df[temp_index, "class_proportion"] = other_proportion_list[other_ct]
}
}
return(combination_df)
}
seroka_proportion = calc_class_proportion(our_object, our_ct_col = 'harmonized_celltypes', 'seroka_scn')
p = ggplot(seroka_proportion, aes(our_ct, other_ct, fill= class_proportion)) +
geom_tile() +
xlab("Our Cell Types") +
ylab("Calderon et al's Cell Types") +
scale_fill_viridis(option = "D", discrete=FALSE) + scale_x_discrete(guide = guide_axis(angle = 45)) +
ggtitle("Stage 13-16: Correlation similarity between cell types' centroids")
p
colnames(seroka_proportion)
seroka_proportion[seroka_proportion$other_ct == 'rand', 'other_ct'] = 'Unknown (SCN rand)'
seroka_proportion$other_ct == 'rand'
seroka_proportion = calc_class_proportion(our_object, our_ct_col = 'harmonized_celltypes', 'seroka_scn')
seroka_proportion$other_ct == 'rand'
seroka_proportion$other_ct = as.vector(seroka_proportion$other_ct)
seroka_proportion[seroka_proportion$other_ct == 'rand', 'other_ct'] = 'Unknown (SCN rand)'
p = ggplot(seroka_proportion, aes(our_ct, other_ct, fill= class_proportion)) +
geom_tile() +
xlab("Our Cell Types") +
ylab("Calderon et al's Cell Types") +
scale_fill_viridis(option = "D", discrete=FALSE) + scale_x_discrete(guide = guide_axis(angle = 45)) +
ggtitle("Stage 13-16: Correlation similarity between cell types' centroids")
p
seroka_proportion$our_ct = factor(seroka_proportion$our_ct, levels=sort(as.vector(unique(seroka_proportion$our_ct))))
seroka_proportion$other_ct = factor(seroka_proportion$other_ct, levels=sort(as.vector(unique(seroka_proportion$other_ct))))
p = ggplot(seroka_proportion, aes(our_ct, other_ct, fill= class_proportion)) +
geom_tile() +
xlab("Our Cell Types") +
ylab("Calderon et al's Cell Types") +
scale_fill_viridis(option = "D", discrete=FALSE) + scale_x_discrete(guide = guide_axis(angle = 45)) +
ggtitle("Stage 13-16: Correlation similarity between cell types' centroids")
p
p = ggplot(seroka_proportion, aes(our_ct, other_ct, fill= class_proportion)) +
geom_tile() +
xlab("Our Cell Types") +
ylab("Seroka et al's Cell Types") +
scale_fill_viridis(option = "D", discrete=FALSE) + scale_x_discrete(guide = guide_axis(angle = 45)) +
ggtitle("Stage 13-16: SCN Classification Proportion (Seroka et al)")
p
ggsave(filename = file.path(TARGET_dir, 'Seroka_cell_proportion.png'), plot = p, width = 14, height = 6)
saveRDS(seroka_proportion, file = file.path(TARGET_dir, "seroka_proportion.rds"))
# pySCN the Calderon
dir.create(file.path(TARGET_dir, 'Calderon_comparison_scn'))
# pySCN the Calderon
dir.create(file.path(TARGET_dir, 'Calderon_comparison_scn'))
withr::with_dir(
file.path(TARGET_dir, 'Calderon_comparison_scn'),
{
raw_expTrain = Calderon_object@assays$RNA@counts
raw_stTrain = Calderon_object@meta.data
write(colnames(raw_expTrain), file = "raw_train_colnames.txt")
write(rownames(raw_expTrain), file = "raw_train_rownames.txt")
Matrix::writeMM(raw_expTrain, "raw_train_exp.txt")
write.csv(raw_stTrain, file = 'raw_meta_tab.csv')
}
)
withr::with_dir(
file.path(TARGET_dir, 'Calderon_comparison_scn'),
{
query_exp = our_object@assays$RNA@counts
write(colnames(query_exp), file = file.path("raw_query_colnames.txt"))
write(rownames(query_exp), file = file.path("raw_query_rownames.txt"))
Matrix::writeMM(query_exp, file.path("raw_query_exp.txt"))
}
)
# run the python scripts in the Calderon
SCN_classification = read.csv(file.path(TARGET_dir, 'Calderon_comparison_scn', 'SCN_classification.csv'), row.names = 1)
SCN_classification = SCN_classification[rownames(our_object@meta.data), ]
our_object@meta.data$calderon_scn = SCN_classification$SCN_class
calderon_proportion = calc_class_proportion(our_object, our_ct_col = 'harmonized_celltypes', 'calderon_scn')
calderon_proportion$other_ct = as.vector(calderon_proportion$other_ct)
calderon_proportion[calderon_proportion$other_ct == 'rand', 'other_ct'] = 'Unknown (SCN rand)'
calderon_proportion$our_ct = factor(calderon_proportion$our_ct, levels=sort(as.vector(unique(calderon_proportion$our_ct))))
calderon_proportion$other_ct = factor(calderon_proportion$other_ct, levels=sort(as.vector(unique(calderon_proportion$other_ct))))
saveRDS(calderon_proportion, file = file.path(TARGET_dir, "calderon_proportion.rds"))
p = ggplot(calderon_proportion, aes(our_ct, other_ct, fill= class_proportion)) +
geom_tile() +
xlab("Our Cell Types") +
ylab("Calderon et al's Cell Types") +
scale_fill_viridis(option = "D", discrete=FALSE) + scale_x_discrete(guide = guide_axis(angle = 45)) +
ggtitle("Stage 13-16: SCN Classification Proportion (Calderon et al)")
p
cds = readRDS("results/v18/refined_wt_late_early_germ/monocle3_no_batch_correct_object.rds")
plot_cells(cds, genes = 'CG6693')
plot_cells(cds, genes = 'CG6693', cell_size = 1)
plot_cells(cds, genes = c('CG6693', 'dpa', 'Rs1', 'Mcm5', 'CG9253', 'C5593', 'CG6751', 'Jheh2', 'Klp61f', 'ovo', 'out'), cell_size = 1)
plot_cells(cds, genes = c('CG6693', 'dpa', 'Rs1', 'Mcm5', 'CG9253', 'C5593', 'CG6751', 'Jheh2', 'Klp61f', 'ovo', 'out'), cell_size = 1.5)
plot_cells(cds, genes = c('CG6693', 'dpa', 'Rs1', 'Mcm5', 'CG9253', 'C5593', 'CG6751', 'Jheh2', 'Klp61f', 'ovo', 'out', 'CG5149'), cell_size = 1.5)
p = ggplot(calderon_proportion, aes(our_ct, other_ct, fill= class_proportion)) +
geom_tile() +
xlab("Our Cell Types") +
ylab("Calderon et al's Cell Types") +
scale_fill_viridis(option = "D", discrete=FALSE) + scale_x_discrete(guide = guide_axis(angle = 45)) +
ggtitle("Stage 13-16: SCN Classification Proportion (Calderon et al)")
p
library(monocle3)
library(ggplot2)
library(RColorBrewer)
library(dbplyr)
TARGET_dir = file.path("results", ANALYSIS_VERSION, "figure_plots", 'refined_wt13_early12_salivary_gland')
rank_sum = read.csv(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_salivary_gland", "rank_sum_test.csv"))
View(rank_sum)
rank_sum = read.csv(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_salivary_gland", "rank_sum_test.csv"), row.names = 1)
rank_sum = rank_sum[rank_sum$logFC > 0, ]
View(rank_sum)
sub_rank_sum = rank_sum[rank_sum$group == 1, ]
View(sub_rank_sum)
rank_sum = read.csv(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_salivary_gland", "rank_sum_test.csv"), row.names = 1)
rank_sum = rank_sum[rank_sum$logFC > 0, ]
rank_sum[rank_sum$group == 2, 'group'] = "Earlier Salivary Gland Cells"
rank_sum[rank_sum$group == 1, 'group'] = "Later Salivary Gland Cells"
write.csv(rank_sum, file = file.path(TARGET_dir, 'DE_genes.csv'))
library(monocle3)
library(ggplot2)
library(RColorBrewer)
library(dbplyr)
TARGET_dir = file.path("results", ANALYSIS_VERSION, "figure_plots", 'refined_wt13_early12_trachea')
rank_sum = read.csv(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_trachea", "rank_sum_test.csv"), row.names = 1)
rank_sum = rank_sum[rank_sum$logFC > 0, ]
View(rank_sum)
write.csv(rank_sum, file = file.path(TARGET_dir, 'DE_genes.csv'))
rank_sum = read.csv(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_trachea", "rank_sum_test.csv"), row.names = 1)
rank_sum = rank_sum[rank_sum$logFC > 0, ]
rank_sum[rank_sum$group == '1', ] = 'Unknown 1'
rank_sum[rank_sum$group == '3', ] = 'Unknown 2'
rank_sum[rank_sum$group == '5', ] = 'Early Germ Cells'
rank_sum[rank_sum$group == '6', ] = 'Middle Germ Cells 1'
rank_sum[rank_sum$group == '2', ] = 'Middle Germ Cells 2'
rank_sum[rank_sum$group == '4', ] = 'Late Germ Cells 1'
TARGET_dir
library(monocle3)
library(ggplot2)
library(RColorBrewer)
library(dbplyr)
TARGET_dir = file.path("results", ANALYSIS_VERSION, "figure_plots", 'refined_wt13_early12_germ')
rank_sum = read.csv(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_trachea", "rank_sum_test.csv"), row.names = 1)
rank_sum = rank_sum[rank_sum$logFC > 0, ]
rank_sum[rank_sum$group == '1', ] = 'Unknown 1'
rank_sum[rank_sum$group == '3', ] = 'Unknown 2'
rank_sum[rank_sum$group == '5', ] = 'Early Germ Cells'
rank_sum[rank_sum$group == '6', ] = 'Middle Germ Cells 1'
rank_sum[rank_sum$group == '2', ] = 'Middle Germ Cells 2'
rank_sum[rank_sum$group == '4', ] = 'Late Germ Cells 1'
TARGET_dir
write.csv(rank_sum, file = file.path(TARGET_dir, 'DE_genes.csv'))
