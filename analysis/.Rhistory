ylab("-log10 adjusted p-value") +
ggtitle("") +
theme_bw()
p = ggplot(data=GO_terms, aes(x=reorder(Term, log_pval), y=log_pval)) +
geom_bar(stat="identity", fill = RColorBrewer::brewer.pal(n = 4, 'Set2')[2]) + coord_flip() +
xlab("GO Biological Processes") +
ylab("-log10 adjusted p-value") +
ggtitle("") +
theme_bw()
pp
p = ggplot(data=GO_terms, aes(x=reorder(Term, log_pval), y=log_pval)) +
geom_bar(stat="identity", fill = RColorBrewer::brewer.pal(n = 4, 'Set2')[2]) + coord_flip() +
xlab("GO Biological Processes") +
ylab("-log10 adjusted p-value") +
ggtitle("") +
theme_bw()
p
p = ggplot(data=GO_terms, aes(x=reorder(Term, log_pval), y=log_pval)) +
geom_bar(stat="identity", fill = RColorBrewer::brewer.pal(n = 4, 'Set2')[3]) + coord_flip() +
xlab("GO Biological Processes") +
ylab("-log10 adjusted p-value") +
ggtitle("") +
theme_bw()
p
ggsave(filename = file.path(TARGET_dir, "Middle_Cells_EnrichR_results.png"), plot = p, width = 10, height = 4)
unique(UMAP_coord$cell_type)
p = ggplot(UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color = cell_type)) +
guides(color=guide_legend(title="")) +
geom_point() +
scale_fill_discrete(breaks=c('Early Trachea Cells', 'Middle Trachea Cells', 'Tip Cells', 'Late Trachea Cells'))
p = ggplot(UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color = cell_type)) +
guides(color=guide_legend(title="")) +
geom_point() +
scale_fill_discrete(breaks=c('Early Trachea Cells', 'Middle Trachea Cells', 'Tip Cells', 'Late Trachea Cells')) +
theme_minimal() +
scale_color_brewer(palette = 'Set2')
p
p = ggplot(UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color = cell_type)) +
guides(color=guide_legend(title="")) +
geom_point() +
scale_color_discrete(breaks=c('Early Trachea Cells', 'Middle Trachea Cells', 'Tip Cells', 'Late Trachea Cells')) +
theme_minimal() +
scale_color_brewer(palette = 'Set2')
p
p = ggplot(UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color = cell_type)) +
guides(color=guide_legend(title="")) +
geom_point() +
theme_minimal() +
scale_color_brewer(palette = 'Set2') +
scale_color_discrete(breaks=c('Early Trachea Cells', 'Middle Trachea Cells', 'Tip Cells', 'Late Trachea Cells'))
p
p = ggplot(UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color = cell_type)) +
guides(color=guide_legend(title="")) +
geom_point() +
theme_minimal() +
scale_color_brewer(palette = 'Set2', breaks=c('Early Trachea Cells', 'Middle Trachea Cells', 'Tip Cells', 'Late Trachea Cells')) +
scale_color_discrete()
p = ggplot(UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color = cell_type)) +
guides(color=guide_legend(title="")) +
geom_point() +
theme_minimal() +
scale_color_brewer(palette = 'Set2', breaks=c('Early Trachea Cells', 'Middle Trachea Cells', 'Tip Cells', 'Late Trachea Cells'))
p
ggsave(filename = file.path(TARGET_dir, "celltypes.png"), plot = p, width = 8, height = 6)
# the below are for late cells
GO_terms = read.csv(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_trachea", "Late Trachea Cells_sig_GO_biological_early.csv"), row.names = 1)
GO_terms = GO_terms[order(GO_terms$Adjusted.P.value, decreasing = FALSE), ]
GO_terms = GO_terms[1:40, ]
View(GO_terms)
GO_interest = c("cytoplasmic translation (GO:0002181)",
"ribosome assembly (GO:0042255)",
"cellular protein metabolic process (GO:0044267)")
GO_terms = GO_terms[GO_terms$Term %in% GO_interest, ]
GO_terms$log_pval = -log10(GO_terms$Adjusted.P.value)
p = ggplot(data=GO_terms, aes(x=reorder(Term, log_pval), y=log_pval)) +
geom_bar(stat="identity", fill = RColorBrewer::brewer.pal(n = 4, 'Set2')[3]) + coord_flip() +
xlab("GO Biological Processes") +
ylab("-log10 adjusted p-value") +
ggtitle("") +
theme_bw()
p
p = ggplot(data=GO_terms, aes(x=reorder(Term, log_pval), y=log_pval)) +
geom_bar(stat="identity", fill = RColorBrewer::brewer.pal(n = 4, 'Set2')[2]) + coord_flip() +
xlab("GO Biological Processes") +
ylab("-log10 adjusted p-value") +
ggtitle("") +
theme_bw()
p
ggsave(filename = file.path(TARGET_dir, "Late_Cells_EnrichR_results.png"), plot = p, width = 10, height = 4)
#############################
# plot out the Golgi Vesicle gene expression
cds = readRDS(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_trachea", "monocle3_no_batch_correct_object.rds"))
term = 'Golgi vesicle transport (GO:0048193)'
GO_terms = read.csv(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_trachea", "Middle Trachea Cells_sig_GO_biological_early.csv"), row.names = 1)
target_genes = GO_terms[GO_terms$Term == term, 'Genes']
target_genes
target_genes = stringr::str_split(target_genes, pattern = ";")
target_genes = GO_terms[GO_terms$Term == term, 'Genes']
target_genes = stringr::str_split(target_genes, pattern = ";")[[1]]
norm_exp = monocle3::normalized_counts(cds)
norm_exp = as.matrix(norm_exp)
index_list = vector()
for(gene in target_genes) {
index_list = c(index_list, which(tolower(gene) == tolower(rownames(norm_exp))))
}
norm_exp = norm_exp[index_list, ]
intersecting_genes = rownames(norm_exp)
norm_exp = monocle3::normalized_counts(cds)
norm_exp = as.matrix(norm_exp)
norm_exp = norm_exp[intersecting_genes, ]
# this will change
#norm_exp = norm_exp[apply(norm_exp, MARGIN = 1, FUN = max) > 1, ]
pt = monocle3::pseudotime(cds)
pt = data.frame(pseudotime = pt)
plot_df = cbind(pt, t(norm_exp[, rownames(pt)]))
smoothed_df = data.frame()
for(gene in colnames(plot_df)) {
if(gene == 'pseudotime') {
next
}
else {
yy = ksmooth(plot_df[, 'pseudotime'], plot_df[, gene], kernel="normal", bandwidth = 3, x.points=plot_df[, 'pseudotime'])
if(nrow(smoothed_df) == 0) {
smoothed_df = data.frame('pseudotime' = yy$x)
}
smoothed_df[, gene] = yy$y
}
}
smoothed_df$pseudotime = NULL
smoothed_df = t(smoothed_df)
scaled_exp = t(scale(t(smoothed_df)))
sorted_genes = names(sort(apply(scaled_exp, MARGIN = 1, FUN = which.max)))
scaled_exp = scaled_exp[sorted_genes, ]
TARGET_dir
png(filename = file.path(TARGET_dir, paste0(term, "_dynamic_gene_heatmap.png")), height = 2000, width = 1000, res = 200)
pheatmap(scaled_exp[sorted_genes, ], cluster_cols = FALSE, cluster_rows = FALSE)
dev.off()
dev.off()
png(filename = file.path(TARGET_dir, paste0(term, "_dynamic_gene_heatmap.png")), height = 2000, width = 1000, res = 200)
pheatmap(scaled_exp[sorted_genes, ], cluster_cols = FALSE, cluster_rows = FALSE)
dev.off()
convert_line_plot <- function(scaled_exp) {
plot_df = data.frame()
for(gene in rownames(scaled_exp)) {
temp_plot = data.frame(pseudotime = seq(1, ncol(scaled_exp)),
scaled_exp = scaled_exp[gene, ],
gene = gene)
plot_df = rbind(plot_df, temp_plot)
}
plot_df$pseudotime = plot_df$pseudotime / max(plot_df$pseudotime)
return(plot_df)
}
plot_df = data.frame(pseudotime = seq(1, ncol(scaled_exp)),
scaled_exp =   apply(scaled_exp, MARGIN = 2, FUN = mean),
gene = 'vesicle transport related genes (average)')
plot_df$pseudotime = (plot_df$pseudotime - min(plot_df$pseudotime)) / max(plot_df$pseudotime)
p<-ggplot(plot_df, aes(x=pseudotime, y=scaled_exp, group=gene)) +
xlab("pseudotime") +
ylab("average expression") +
ggtitle(paste0('Average Gene Expression in ', term)) +
geom_line(color = RColorBrewer::brewer.pal(n = 4, 'Set2')[1]) + theme_bw()
ggsave(file.path(TARGET_dir, paste0(term, "_dynamic_gene_line_avg.png")), plot = p, width = 8, height = 5)
p<-ggplot(plot_df, aes(x=pseudotime, y=scaled_exp, group=gene)) +
xlab("pseudotime") +
ylab("average expression") +
ggtitle(paste0('Average Gene Expression in ', term)) +
geom_line(color = RColorBrewer::brewer.pal(n = 4, 'Set2')[2]) + theme_bw()
ggsave(file.path(TARGET_dir, paste0(term, "_dynamic_gene_line_avg.png")), plot = p, width = 8, height = 5)
p<-ggplot(plot_df, aes(x=pseudotime, y=scaled_exp, group=gene)) +
xlab("pseudotime") +
ylab("average expression") +
ggtitle(paste0('Average Gene Expression in ', term)) +
geom_line(color = RColorBrewer::brewer.pal(n = 4, 'Set2')[3]) + theme_bw()
ggsave(file.path(TARGET_dir, paste0(term, "_dynamic_gene_line_avg.png")), plot = p, width = 8, height = 5)
# plot out the Cytoplasmic translation
term = 'cytoplasmic translation (GO:0002181)'
GO_terms = read.csv(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_trachea", "Late Trachea Cells_sig_GO_biological_early.csv"), row.names = 1)
target_genes = GO_terms[GO_terms$Term == term, 'Genes']
target_genes = stringr::str_split(target_genes, pattern = ";")[[1]]
norm_exp = monocle3::normalized_counts(cds)
norm_exp = as.matrix(norm_exp)
index_list = vector()
for(gene in target_genes) {
index_list = c(index_list, which(tolower(gene) == tolower(rownames(norm_exp))))
}
norm_exp = norm_exp[index_list, ]
intersecting_genes = rownames(norm_exp)
norm_exp = monocle3::normalized_counts(cds)
norm_exp = as.matrix(norm_exp)
norm_exp = norm_exp[intersecting_genes, ]
# this will change
#norm_exp = norm_exp[apply(norm_exp, MARGIN = 1, FUN = max) > 1, ]
pt = monocle3::pseudotime(cds)
pt = data.frame(pseudotime = pt)
plot_df = cbind(pt, t(norm_exp[, rownames(pt)]))
smoothed_df = data.frame()
cds[, ]
cds[, monocle3::clusters(cds)]
cds[, monocle3::clusters(cds) != 9]
#############################
# plot out the Golgi Vesicle gene expression
cds = readRDS(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_trachea", "monocle3_no_batch_correct_object.rds"))
cds = cds[, monocle3::clusters(cds) != 9] # remove the branch from the main trajectory
term = 'Golgi vesicle transport (GO:0048193)'
GO_terms = read.csv(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_trachea", "Middle Trachea Cells_sig_GO_biological_early.csv"), row.names = 1)
target_genes = GO_terms[GO_terms$Term == term, 'Genes']
target_genes = stringr::str_split(target_genes, pattern = ";")[[1]]
norm_exp = monocle3::normalized_counts(cds)
norm_exp = as.matrix(norm_exp)
index_list = vector()
for(gene in target_genes) {
index_list = c(index_list, which(tolower(gene) == tolower(rownames(norm_exp))))
}
norm_exp = norm_exp[index_list, ]
intersecting_genes = rownames(norm_exp)
norm_exp = monocle3::normalized_counts(cds)
norm_exp = as.matrix(norm_exp)
norm_exp = norm_exp[intersecting_genes, ]
# this will change
#norm_exp = norm_exp[apply(norm_exp, MARGIN = 1, FUN = max) > 1, ]
pt = monocle3::pseudotime(cds)
pt = data.frame(pseudotime = pt)
plot_df = cbind(pt, t(norm_exp[, rownames(pt)]))
smoothed_df = data.frame()
for(gene in colnames(plot_df)) {
if(gene == 'pseudotime') {
next
}
else {
yy = ksmooth(plot_df[, 'pseudotime'], plot_df[, gene], kernel="normal", bandwidth = 3, x.points=plot_df[, 'pseudotime'])
if(nrow(smoothed_df) == 0) {
smoothed_df = data.frame('pseudotime' = yy$x)
}
smoothed_df[, gene] = yy$y
}
}
smoothed_df$pseudotime = NULL
smoothed_df = t(smoothed_df)
scaled_exp = t(scale(t(smoothed_df)))
sorted_genes = names(sort(apply(scaled_exp, MARGIN = 1, FUN = which.max)))
scaled_exp = scaled_exp[sorted_genes, ]
png(filename = file.path(TARGET_dir, paste0(term, "_dynamic_gene_heatmap.png")), height = 2000, width = 1000, res = 200)
pheatmap(scaled_exp[sorted_genes, ], cluster_cols = FALSE, cluster_rows = FALSE)
dev.off()
convert_line_plot <- function(scaled_exp) {
plot_df = data.frame()
for(gene in rownames(scaled_exp)) {
temp_plot = data.frame(pseudotime = seq(1, ncol(scaled_exp)),
scaled_exp = scaled_exp[gene, ],
gene = gene)
plot_df = rbind(plot_df, temp_plot)
}
plot_df$pseudotime = plot_df$pseudotime / max(plot_df$pseudotime)
return(plot_df)
}
plot_df = data.frame(pseudotime = seq(1, ncol(scaled_exp)),
scaled_exp =   apply(scaled_exp, MARGIN = 2, FUN = mean),
gene = 'vesicle transport related genes (average)')
plot_df$pseudotime = (plot_df$pseudotime - min(plot_df$pseudotime)) / max(plot_df$pseudotime)
p<-ggplot(plot_df, aes(x=pseudotime, y=scaled_exp, group=gene)) +
xlab("pseudotime") +
ylab("average expression") +
ggtitle(paste0('Average Gene Expression in ', term)) +
geom_line(color = RColorBrewer::brewer.pal(n = 4, 'Set2')[3]) + theme_bw()
ggsave(file.path(TARGET_dir, paste0(term, "_dynamic_gene_line_avg.png")), plot = p, width = 8, height = 5)
# plot out the Cytoplasmic translation
term = 'cytoplasmic translation (GO:0002181)'
GO_terms = read.csv(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_trachea", "Late Trachea Cells_sig_GO_biological_early.csv"), row.names = 1)
target_genes = GO_terms[GO_terms$Term == term, 'Genes']
target_genes = stringr::str_split(target_genes, pattern = ";")[[1]]
norm_exp = monocle3::normalized_counts(cds)
norm_exp = as.matrix(norm_exp)
index_list = vector()
for(gene in target_genes) {
index_list = c(index_list, which(tolower(gene) == tolower(rownames(norm_exp))))
}
norm_exp = norm_exp[index_list, ]
intersecting_genes = rownames(norm_exp)
norm_exp = monocle3::normalized_counts(cds)
norm_exp = as.matrix(norm_exp)
norm_exp = norm_exp[intersecting_genes, ]
# this will change
#norm_exp = norm_exp[apply(norm_exp, MARGIN = 1, FUN = max) > 1, ]
pt = monocle3::pseudotime(cds)
pt = data.frame(pseudotime = pt)
plot_df = cbind(pt, t(norm_exp[, rownames(pt)]))
smoothed_df = data.frame()
for(gene in colnames(plot_df)) {
if(gene == 'pseudotime') {
next
}
else {
yy = ksmooth(plot_df[, 'pseudotime'], plot_df[, gene], kernel="normal", bandwidth = 3, x.points=plot_df[, 'pseudotime'])
if(nrow(smoothed_df) == 0) {
smoothed_df = data.frame('pseudotime' = yy$x)
}
smoothed_df[, gene] = yy$y
}
}
smoothed_df$pseudotime = NULL
smoothed_df = t(smoothed_df)
scaled_exp = t(scale(t(smoothed_df)))
sorted_genes = names(sort(apply(scaled_exp, MARGIN = 1, FUN = which.max)))
scaled_exp = scaled_exp[sorted_genes, ]
png(filename = file.path(TARGET_dir, paste0(term, "_dynamic_gene_heatmap.png")), height = 2000, width = 1000, res = 200)
pheatmap(scaled_exp[sorted_genes, ], cluster_cols = FALSE, cluster_rows = FALSE)
dev.off()
convert_line_plot <- function(scaled_exp) {
plot_df = data.frame()
for(gene in rownames(scaled_exp)) {
temp_plot = data.frame(pseudotime = seq(1, ncol(scaled_exp)),
scaled_exp = scaled_exp[gene, ],
gene = gene)
plot_df = rbind(plot_df, temp_plot)
}
plot_df$pseudotime = plot_df$pseudotime / max(plot_df$pseudotime)
return(plot_df)
}
plot_df = data.frame(pseudotime = seq(1, ncol(scaled_exp)),
scaled_exp =   apply(scaled_exp, MARGIN = 2, FUN = mean),
gene = 'translation related genes (average)')
plot_df$pseudotime = (plot_df$pseudotime - min(plot_df$pseudotime)) / max(plot_df$pseudotime)
p<-ggplot(plot_df, aes(x=pseudotime, y=scaled_exp, group=gene)) +
xlab("pseudotime") +
ylab("average expression") +
ggtitle(paste0('Average Gene Expression in ', term)) +
geom_line(color = RColorBrewer::brewer.pal(n = 4, 'Set2')[2]) + theme_bw()
p
ggsave(file.path(TARGET_dir, paste0(term, "_dynamic_gene_line_avg.png")), plot = p, width = 8, height = 5)
##############################################
# this is plot out the dynamically expressed TFs
ATres = readRDS(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_salivary_gland", 'raw_associationTest.rds'))
ATres = ATres[!is.na(ATres$pvalue), ]
ATres$adj_p = p.adjust(ATres$pvalue, method = 'fdr')
ATres = ATres[ATres$adj_p < 0.05, ]
pathway_list = readRDS('accessory_data/GO_Biological_Processes_2018/GO_Biological_Process.rds')
TF_tab = read.csv("accessory_data/Drosophila_TFs/all_candidates.csv", sep = '\t')
TF_tab = TF_tab[TF_tab$verdict_DNA_BD != "NO", ]
i_TFs = intersect(TF_tab$symbol, rownames(ATres))
target_genes = i_TFs
norm_exp = monocle3::normalized_counts(cds)
norm_exp = as.matrix(norm_exp)
index_list = vector()
for(gene in target_genes) {
index_list = c(index_list, which(tolower(gene) == tolower(rownames(norm_exp))))
}
norm_exp = norm_exp[index_list, ]
intersecting_genes = rownames(norm_exp)
norm_exp = monocle3::normalized_counts(cds)
norm_exp = as.matrix(norm_exp)
norm_exp = norm_exp[intersecting_genes, ]
# this will change
#norm_exp = norm_exp[apply(norm_exp, MARGIN = 1, FUN = max) > 1, ]
pt = monocle3::pseudotime(cds)
pt = data.frame(pseudotime = pt)
plot_df = cbind(pt, t(norm_exp[, rownames(pt)]))
smoothed_df = data.frame()
for(gene in colnames(plot_df)) {
if(gene == 'pseudotime') {
next
}
else {
yy = ksmooth(plot_df[, 'pseudotime'], plot_df[, gene], kernel="normal", bandwidth = 3, x.points=plot_df[, 'pseudotime'])
if(nrow(smoothed_df) == 0) {
smoothed_df = data.frame('pseudotime' = yy$x)
}
smoothed_df[, gene] = yy$y
}
}
smoothed_df$pseudotime = NULL
smoothed_df = t(smoothed_df)
scaled_exp = t(scale(t(smoothed_df)))
sorted_genes = names(sort(apply(scaled_exp, MARGIN = 1, FUN = which.max)))
scaled_exp = scaled_exp[sorted_genes, ]
png(filename = file.path(TARGET_dir, paste0("TF_dynamic_gene_heatmap.png")), height = 2000, width = 1000, res = 200)
pheatmap(scaled_exp[sorted_genes, ], cluster_cols = FALSE, cluster_rows = FALSE)
dev.off()
dev.off()
png(filename = file.path(TARGET_dir, paste0("TF_dynamic_gene_heatmap.png")), height = 2000, width = 1000, res = 200)
pheatmap(scaled_exp[sorted_genes, ], cluster_cols = FALSE, cluster_rows = FALSE)
dev.off()
convert_line_plot <- function(scaled_exp) {
plot_df = data.frame()
for(gene in rownames(scaled_exp)) {
temp_plot = data.frame(pseudotime = seq(1, ncol(scaled_exp)),
scaled_exp = scaled_exp[gene, ],
gene = gene)
plot_df = rbind(plot_df, temp_plot)
}
plot_df$pseudotime = plot_df$pseudotime / max(plot_df$pseudotime)
return(plot_df)
}
rank_sum_test = read.csv(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_trachea", 'rank_sum_test.csv'), row.names = 1)
rank_sum_test = rank_sum_test[rank_sum_test$padj < 0.05, ]
rank_sum_test = rank_sum_test[rank_sum_test$logFC > 0.3, ]
unique(plot_df$gene[plot_df$gene %in% rank_sum_test$feature])
rank_sum_test = read.csv(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_trachea", 'rank_sum_test.csv'), row.names = 1)
rank_sum_test = rank_sum_test[rank_sum_test$padj < 0.05, ]
rank_sum_test = rank_sum_test[rank_sum_test$logFC > 0.3, ]
unique(plot_df$gene[plot_df$gene %in% rank_sum_test$feature])
rank_sum_test = read.csv(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_trachea", 'rank_sum_test.csv'), row.names = 1)
rank_sum_test = rank_sum_test[rank_sum_test$padj < 0.05, ]
#rank_sum_test = rank_sum_test[rank_sum_test$logFC > 0.3, ]
unique(plot_df$gene[plot_df$gene %in% rank_sum_test$feature])
plot_df$gene
plot_df = convert_line_plot(scaled_exp)
rank_sum_test = read.csv(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_trachea", 'rank_sum_test.csv'), row.names = 1)
rank_sum_test = rank_sum_test[rank_sum_test$padj < 0.05, ]
rank_sum_test = rank_sum_test[rank_sum_test$logFC > 0.3, ]
unique(plot_df$gene[plot_df$gene %in% rank_sum_test$feature])
plot_df$gene
unique(plot_df$gene)
unique(rank_sum_test$feature)
rank_sum_test = read.csv(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_trachea", 'rank_sum_test.csv'), row.names = 1)
rank_sum_test = rank_sum_test[rank_sum_test$padj < 0.05, ]
#rank_sum_test = rank_sum_test[rank_sum_test$logFC > 0.3, ]
unique(plot_df$gene[plot_df$gene %in% rank_sum_test$feature])
rank_sum_test = rank_sum_test[rank_sum_test$logFC > 0.1, ]
unique(plot_df$gene[plot_df$gene %in% rank_sum_test$feature])
plot_df = convert_line_plot(scaled_exp)
rank_sum_test = read.csv(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_trachea", 'rank_sum_test.csv'), row.names = 1)
rank_sum_test = rank_sum_test[rank_sum_test$padj < 0.05, ]
rank_sum_test = rank_sum_test[rank_sum_test$logFC > 0.1, ]
unique(plot_df$gene[plot_df$gene %in% rank_sum_test$feature])
#sg_TFs = intersect(pathway_list[["salivary gland development (GO:0007431)"]], TF_tab$symbol)
scaled_exp = scaled_exp[rownames(scaled_exp) %in% unique(plot_df$gene[plot_df$gene %in% rank_sum_test$feature]), ]
plot_df = convert_line_plot(scaled_exp)
plot_df$pseudotime = (plot_df$pseudotime - min(plot_df$pseudotime)) / max(plot_df$pseudotime)
# interesting genes
#list_A = c("Scr", 'exd', 'fkh', 'trh')
sub_plot_df = plot_df
p<-ggplot(sub_plot_df, aes(x=pseudotime, y=scaled_exp, group=gene)) +
xlab("pseudotime") +
ylab("average expression") +
geom_line(aes(color = gene)) + theme_bw()
p
sub_plot_df = sub_plot_df[sub_plot_df$gene == 'rb', ]
p<-ggplot(sub_plot_df, aes(x=pseudotime, y=scaled_exp, group=gene)) +
xlab("pseudotime") +
ylab("average expression") +
geom_line(aes(color = gene)) + theme_bw()
p
sub_plot_df
# interesting genes
#list_A = c("Scr", 'exd', 'fkh', 'trh')
sub_plot_df = plot_df
sub_plot_df = sub_plot_df[sub_plot_df$gene == 'rib', ]
p<-ggplot(sub_plot_df, aes(x=pseudotime, y=scaled_exp, group=gene)) +
xlab("pseudotime") +
ylab("average expression") +
geom_line(aes(color = gene)) + theme_bw()
p
# interesting genes
#list_A = c("Scr", 'exd', 'fkh', 'trh')
sub_plot_df = plot_df
sub_plot_df = sub_plot_df[sub_plot_df$gene == 'CrebA', ]
p<-ggplot(sub_plot_df, aes(x=pseudotime, y=scaled_exp, group=gene)) +
xlab("pseudotime") +
ylab("average expression") +
geom_line(aes(color = gene)) + theme_bw()
p
View(pathway_list)
# interesting genes
# genes in development of trachea
Trachea_genes = pathway_list[["open tracheal system development (GO:0007424)"]]
sub_plot_df = plot_df
sub_plot_df = sub_plot_df[sub_plot_df$gene %in% Trachea_genes, ]
p<-ggplot(sub_plot_df, aes(x=pseudotime, y=scaled_exp, group=gene)) +
xlab("pseudotime") +
ylab("average expression") +
geom_line(aes(color = gene)) + theme_bw()
p
# interesting genes
# genes in development of trachea
Trachea_genes = pathway_list[["dorsal closure (GO:0007391)"]]
sub_plot_df = plot_df
sub_plot_df = sub_plot_df[sub_plot_df$gene %in% Trachea_genes, ]
p<-ggplot(sub_plot_df, aes(x=pseudotime, y=scaled_exp, group=gene)) +
xlab("pseudotime") +
ylab("average expression") +
geom_line(aes(color = gene)) + theme_bw()
pathway_list[["dorsal closure (GO:0007391)"]]p
p
# interesting genes
# genes in development of trachea
Trachea_genes = pathway_list[["open tracheal system development (GO:0007424)"]]
sub_plot_df = plot_df
sub_plot_df = sub_plot_df[sub_plot_df$gene %in% Trachea_genes, ]
p<-ggplot(sub_plot_df, aes(x=pseudotime, y=scaled_exp, group=gene)) +
xlab("pseudotime") +
ylab("average expression") +
geom_line(aes(color = gene)) + theme_bw()
p
p<-ggplot(sub_plot_df, aes(x=pseudotime, y=scaled_exp, group=gene)) +
xlab("pseudotime") +
ylab("average expression") +
geom_line(aes(color = gene)) + theme_bw()
p
'CrebA' %in% Trachea_genes
pathway_list[["epithelial cell migration, open tracheal system (GO:0007427)"]]
pathway_list[["regulation of tube diameter, open tracheal system (GO:0035158)"]]
pathway_list[["regulation of tube length, open tracheal system (GO:0035159)"]]
pathway_list[["trachea morphogenesis (GO:0060439)"]]
pathway_list[["terminal branching, open tracheal system (GO:0007430)"]]
sub_plot_df = plot_df
sub_plot_df = sub_plot_df[sub_plot_df$gene %in% Trachea_genes, ]
p<-ggplot(sub_plot_df, aes(x=pseudotime, y=scaled_exp, group=gene)) +
xlab("pseudotime") +
ylab("average expression") +
geom_line(aes(color = gene)) + theme_bw()
p
ggsave(file.path(TARGET_dir, "list_A_dynamic_gene_line_avg.png"), plot = p, width = 8, height = 5)
