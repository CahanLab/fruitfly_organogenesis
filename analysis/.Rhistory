X = unique(x = data.features$id),
FUN = function(ident) {
data.use <- data.features[data.features$id == ident, 1:(ncol(x = data.features) - 1), drop = FALSE]
avg.exp <- apply(
X = data.use,
MARGIN = 2,
FUN = function(x) {
return(mean(x = expm1(x = x)))
}
)
pct.exp <- apply(X = data.use, MARGIN = 2, FUN = PercentAbove, threshold = 0)
return(list(avg.exp = avg.exp, pct.exp = pct.exp))
}
)
names(x = data.plot) <- unique(x = data.features$id)
if (cluster.idents) {
mat <- do.call(
what = rbind,
args = lapply(X = data.plot, FUN = unlist)
)
mat <- scale(x = mat)
id.levels <- id.levels[hclust(d = dist(x = mat))$order]
}
data.plot <- lapply(
X = names(x = data.plot),
FUN = function(x) {
data.use <- as.data.frame(x = data.plot[[x]])
data.use$features.plot <- rownames(x = data.use)
data.use$id <- x
return(data.use)
}
)
data.plot <- do.call(what = 'rbind', args = data.plot)
if (!is.null(x = id.levels)) {
data.plot$id <- factor(x = data.plot$id, levels = id.levels)
}
ngroup <- length(x = levels(x = data.plot$id))
if (ngroup == 1) {
scale <- FALSE
warning(
"Only one identity present, the expression values will be not scaled",
call. = FALSE,
immediate. = TRUE
)
} else if (ngroup < 5 & scale) {
warning(
"Scaling data with a low number of groups may produce misleading results",
call. = FALSE,
immediate. = TRUE
)
}
avg.exp.scaled <- sapply(
X = unique(x = data.plot$features.plot),
FUN = function(x) {
data.use <- data.plot[data.plot$features.plot == x, 'avg.exp']
if (scale) {
data.use <- scale(x = data.use)
data.use <- MinMax(data = data.use, min = col.min, max = col.max)
} else {
data.use <- log1p(x = data.use)
}
return(data.use)
}
)
avg.exp.scaled <- as.vector(x = t(x = avg.exp.scaled))
if (split.colors) {
avg.exp.scaled <- as.numeric(x = cut(x = avg.exp.scaled, breaks = 20))
}
data.plot$avg.exp.scaled <- avg.exp.scaled
data.plot$features.plot <- factor(
x = data.plot$features.plot,
levels = features
)
data.plot$pct.exp[data.plot$pct.exp < dot.min] <- NA
data.plot$pct.exp <- data.plot$pct.exp * 100
if (split.colors) {
splits.use <- vapply(
X = as.character(x = data.plot$id),
FUN = gsub,
FUN.VALUE = character(length = 1L),
pattern =  paste0(
'^((',
paste(sort(x = levels(x = object), decreasing = TRUE), collapse = '|'),
')_)'
),
replacement = '',
USE.NAMES = FALSE
)
data.plot$colors <- mapply(
FUN = function(color, value) {
return(colorRampPalette(colors = c('grey', color))(20)[value])
},
color = cols[splits.use],
value = avg.exp.scaled
)
}
color.by <- ifelse(test = split.colors, yes = 'colors', no = 'avg.exp.scaled')
if (!is.na(x = scale.min)) {
data.plot[data.plot$pct.exp < scale.min, 'pct.exp'] <- scale.min
}
if (!is.na(x = scale.max)) {
data.plot[data.plot$pct.exp > scale.max, 'pct.exp'] <- scale.max
}
if (!is.null(x = feature.groups)) {
data.plot$feature.groups <- factor(
x = feature.groups[data.plot$features.plot],
levels = unique(x = feature.groups)
)
}
return(data.plot)
}
filter_genes <- function(plot_df) {
good_genes = c()
for(temp_gene in unique(plot_df$features.plot)) {
subset_plot_df = plot_df[plot_df$features.plot == temp_gene, ]
if(max(subset_plot_df$pct.exp) > 1) {
good_genes = c(good_genes, temp_gene)
}
}
return(good_genes)
}
'trol' %in% rownames(object)
'Ndg' %in% rownames(object)
'wb' %in% rownames(object)
##### plot new main figure for plasmatocytes #####
gene_list = list()
gene_list[['collagen']] = c("vkg", "Col4a1")
gene_list[['Hydroxylase']] = c("Plod", "PH4alphaEFB")
gene_list[['laminins']] = c("LanA", "LanB1", "LanB2", "wb")
gene_list[['basement']] = c("Ppn", "Pxn", "SPARC", 'Tig', 'trol', 'Ndg')
gene_list[['phagocytic_receptor']] = c("drpr", 'crq', 'NimC4', 'Sr-CI', 'PGRP-LC')
gene_list[['Thioester-containing']] = c("NimB1", 'NimB3', "NimB4", "NimB5")
gene_list[['engulfment']] = c("SCAR", "Rac1", "Rac2", 'chic')
gene_list[['rabs']] = c("Rab5", "Rab7", "Lamp1")
gene_list[['cathepsin']] = c("cathD", "CtsB1")
gene_list[['insulin']] = c("Ilp4", "Ilp6")
big_plot_df = data.frame()
for(temp_cat in names(gene_list)) {
temp_plot_df = modified_dotPlot_df(object, features = gene_list[[temp_cat]], group.by = 'manual_celltypes')
temp_plot_df$matrisome_type = temp_cat
big_plot_df = rbind(big_plot_df, temp_plot_df)
}
reordered_categories = c("collagen", "Hydroxylase", "laminins", "basement", "phagocytic_receptor", "Thioester-containing", "engulfment", "rabs", "cathepsin", "insulin")
big_plot_df$matrisome_type = factor(big_plot_df$matrisome_type, levels = reordered_categories)
big_plot_df$id = factor(big_plot_df$id, levels = sort(unique(big_plot_df$id), decreasing = TRUE))
p <- ggplot(data = big_plot_df, mapping = aes_string(y = 'id', x = 'features.plot')) +
geom_point(mapping = aes_string(size = 'pct.exp', color = 'avg.exp.scaled')) +
guides(size = guide_legend(title = 'percent expressed')) +
guides(color = guide_colorbar(title = 'scaled average expression')) +
scale_colour_viridis_c() +
labs(
x = 'Matrisome Genes',
y = 'Cell Types'
) +
theme_classic()  +
facet_grid(
cols = vars(matrisome_type),
scales = "free_x",
space = "free_x",
switch = "y"
) +
theme(
panel.spacing = unit(x = 1, units = "lines"),
strip.background = element_blank()
) +
theme(strip.text.x = element_blank(), axis.text.x=element_text(angle=45, vjust = 1, hjust=1)) +
ggtitle("Stage 10-12 Embryos")
ggsave(filename = file.path(TARGET_dir, "plasmatocytes_genes_focused.png"), plot = p, width = 14, height = 7)
TARGET_dir
# making plots for matrisome
# Fig 6B
# Supp Fig 7B, 10
TARGET_dir = file.path("results", ANALYSIS_VERSION, "figure_plots", 'wt13_matrisome')
object = readRDS(file.path("results", ANALYSIS_VERSION, "manual_annotation_wt13/manual_celltype_object4.rds"))
matrisome_df = read.csv("accessory_data/matrisome_data/drosophila_matrisome.csv")
interesting_cat_list = c("Basement Membrane", "Basement Membrane; Laminin", 'Insulin Family', "Other", "Prolyl 4-Hydroxylase")
# the below function as a modification from Seurat Dotplot https://github.com/satijalab/seurat/blob/HEAD/R/visualization.R
# only return the plotting DF
modified_dotPlot_df <- function(
object,
assay = NULL,
features,
cols = c("lightgrey", "blue"),
col.min = -2.5,
col.max = 2.5,
dot.min = 0,
dot.scale = 6,
idents = NULL,
group.by = NULL,
split.by = NULL,
cluster.idents = FALSE,
scale = TRUE,
scale.by = 'radius',
scale.min = NA,
scale.max = NA
) {
assay <- assay %||% DefaultAssay(object = object)
DefaultAssay(object = object) <- assay
split.colors <- !is.null(x = split.by) && !any(cols %in% rownames(x = brewer.pal.info))
scale.func <- switch(
EXPR = scale.by,
'size' = scale_size,
'radius' = scale_radius,
stop("'scale.by' must be either 'size' or 'radius'")
)
feature.groups <- NULL
if (is.list(features) | any(!is.na(names(features)))) {
feature.groups <- unlist(x = sapply(
X = 1:length(features),
FUN = function(x) {
return(rep(x = names(x = features)[x], each = length(features[[x]])))
}
))
if (any(is.na(x = feature.groups))) {
warning(
"Some feature groups are unnamed.",
call. = FALSE,
immediate. = TRUE
)
}
features <- unlist(x = features)
names(x = feature.groups) <- features
}
cells <- unlist(x = CellsByIdentities(object = object, idents = idents))
data.features <- FetchData(object = object, vars = features, cells = cells)
data.features$id <- if (is.null(x = group.by)) {
Idents(object = object)[cells, drop = TRUE]
} else {
object[[group.by, drop = TRUE]][cells, drop = TRUE]
}
if (!is.factor(x = data.features$id)) {
data.features$id <- factor(x = data.features$id)
}
id.levels <- levels(x = data.features$id)
data.features$id <- as.vector(x = data.features$id)
if (!is.null(x = split.by)) {
splits <- object[[split.by, drop = TRUE]][cells, drop = TRUE]
if (split.colors) {
if (length(x = unique(x = splits)) > length(x = cols)) {
stop("Not enough colors for the number of groups")
}
cols <- cols[1:length(x = unique(x = splits))]
names(x = cols) <- unique(x = splits)
}
data.features$id <- paste(data.features$id, splits, sep = '_')
unique.splits <- unique(x = splits)
id.levels <- paste0(rep(x = id.levels, each = length(x = unique.splits)), "_", rep(x = unique(x = splits), times = length(x = id.levels)))
}
data.plot <- lapply(
X = unique(x = data.features$id),
FUN = function(ident) {
data.use <- data.features[data.features$id == ident, 1:(ncol(x = data.features) - 1), drop = FALSE]
avg.exp <- apply(
X = data.use,
MARGIN = 2,
FUN = function(x) {
return(mean(x = expm1(x = x)))
}
)
pct.exp <- apply(X = data.use, MARGIN = 2, FUN = PercentAbove, threshold = 0)
return(list(avg.exp = avg.exp, pct.exp = pct.exp))
}
)
names(x = data.plot) <- unique(x = data.features$id)
if (cluster.idents) {
mat <- do.call(
what = rbind,
args = lapply(X = data.plot, FUN = unlist)
)
mat <- scale(x = mat)
id.levels <- id.levels[hclust(d = dist(x = mat))$order]
}
data.plot <- lapply(
X = names(x = data.plot),
FUN = function(x) {
data.use <- as.data.frame(x = data.plot[[x]])
data.use$features.plot <- rownames(x = data.use)
data.use$id <- x
return(data.use)
}
)
data.plot <- do.call(what = 'rbind', args = data.plot)
if (!is.null(x = id.levels)) {
data.plot$id <- factor(x = data.plot$id, levels = id.levels)
}
ngroup <- length(x = levels(x = data.plot$id))
if (ngroup == 1) {
scale <- FALSE
warning(
"Only one identity present, the expression values will be not scaled",
call. = FALSE,
immediate. = TRUE
)
} else if (ngroup < 5 & scale) {
warning(
"Scaling data with a low number of groups may produce misleading results",
call. = FALSE,
immediate. = TRUE
)
}
avg.exp.scaled <- sapply(
X = unique(x = data.plot$features.plot),
FUN = function(x) {
data.use <- data.plot[data.plot$features.plot == x, 'avg.exp']
if (scale) {
data.use <- scale(x = data.use)
data.use <- MinMax(data = data.use, min = col.min, max = col.max)
} else {
data.use <- log1p(x = data.use)
}
return(data.use)
}
)
avg.exp.scaled <- as.vector(x = t(x = avg.exp.scaled))
if (split.colors) {
avg.exp.scaled <- as.numeric(x = cut(x = avg.exp.scaled, breaks = 20))
}
data.plot$avg.exp.scaled <- avg.exp.scaled
data.plot$features.plot <- factor(
x = data.plot$features.plot,
levels = features
)
data.plot$pct.exp[data.plot$pct.exp < dot.min] <- NA
data.plot$pct.exp <- data.plot$pct.exp * 100
if (split.colors) {
splits.use <- vapply(
X = as.character(x = data.plot$id),
FUN = gsub,
FUN.VALUE = character(length = 1L),
pattern =  paste0(
'^((',
paste(sort(x = levels(x = object), decreasing = TRUE), collapse = '|'),
')_)'
),
replacement = '',
USE.NAMES = FALSE
)
data.plot$colors <- mapply(
FUN = function(color, value) {
return(colorRampPalette(colors = c('grey', color))(20)[value])
},
color = cols[splits.use],
value = avg.exp.scaled
)
}
color.by <- ifelse(test = split.colors, yes = 'colors', no = 'avg.exp.scaled')
if (!is.na(x = scale.min)) {
data.plot[data.plot$pct.exp < scale.min, 'pct.exp'] <- scale.min
}
if (!is.na(x = scale.max)) {
data.plot[data.plot$pct.exp > scale.max, 'pct.exp'] <- scale.max
}
if (!is.null(x = feature.groups)) {
data.plot$feature.groups <- factor(
x = feature.groups[data.plot$features.plot],
levels = unique(x = feature.groups)
)
}
return(data.plot)
}
filter_genes <- function(plot_df) {
good_genes = c()
for(temp_gene in unique(plot_df$features.plot)) {
subset_plot_df = plot_df[plot_df$features.plot == temp_gene, ]
if(max(subset_plot_df$pct.exp) > 1) {
good_genes = c(good_genes, temp_gene)
}
}
return(good_genes)
}
##### this is to plot out the focused plasmatocytes data #####
gene_list = list()
gene_list[['collagen']] = c("vkg", "Col4a1")
gene_list[['Hydroxylase']] = c("Plod", "PH4alphaEFB")
gene_list[['laminins']] = c("LanA", "LanB1", "LanB2", "wb")
gene_list[['basement']] = c("Ppn", "Pxn", "SPARC", 'Tig', 'trol', 'Ndg')
gene_list[['phagocytic_receptor']] = c("drpr", 'crq', 'NimC4', 'Sr-CI', 'PGRP-LC')
gene_list[['Thioester-containing']] = c("NimB1", 'NimB3', "NimB4", "NimB5")
gene_list[['engulfment']] = c("SCAR", "Rac1", "Rac2", 'chic')
gene_list[['rabs']] = c("Rab5", "Rab7", "Lamp1")
gene_list[['cathepsin']] = c("cathD", "CtsB1")
gene_list[['insulin']] = c("Ilp4", "Ilp6")
big_plot_df = data.frame()
for(temp_cat in names(gene_list)) {
temp_plot_df = modified_dotPlot_df(object, features = gene_list[[temp_cat]], group.by = 'manual_celltypes')
#temp_plot_df$avg.exp.scaled = NULL
temp_plot_df$matrisome_type = temp_cat
big_plot_df = rbind(big_plot_df, temp_plot_df)
}
reordered_categories = c("collagen", "Hydroxylase", "laminins", "basement", "phagocytic_receptor", "Thioester-containing", "engulfment", "rabs", "cathepsin", "insulin")
big_plot_df$matrisome_type = factor(big_plot_df$matrisome_type, levels = reordered_categories)
big_plot_df$id = factor(big_plot_df$id, levels = sort(unique(big_plot_df$id), decreasing = TRUE))
p <- ggplot(data = big_plot_df, mapping = aes_string(y = 'id', x = 'features.plot')) +
geom_point(mapping = aes_string(size = 'pct.exp', color = 'avg.exp.scaled')) +
guides(size = guide_legend(title = 'percent expressed')) +
guides(color = guide_colorbar(title = 'scaled average expression')) +
scale_colour_viridis_c() +
labs(
x = 'Matrisome Genes',
y = 'Cell Types'
) +
theme_classic()  +
facet_grid(
cols = vars(matrisome_type),
scales = "free_x",
space = "free_x",
switch = "y"
) +
theme(
panel.spacing = unit(x = 1, units = "lines"),
strip.background = element_blank()
) +
theme(strip.text.x = element_blank(), axis.text.x=element_text(angle=45, vjust = 1, hjust=1)) +
ggtitle("Stage 13-16 Embryos")
ggsave(filename = file.path(TARGET_dir, "plasmatocytes_genes_focused.png"), plot = p, width = 14, height = 7)
# To reproduce our work, run this script.
# We used MacOS 13.3.1 (a) with an R package environment managed by renv.
# We used R version 4.1.2.
# Make it work on each of our computers
try({setwd("~/Dropbox/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("~/Dropbox (CahanLab)/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("c:/Users/DAndrewLab/Desktop/fruitfly_organogenesis/analysis/")}, silent = T)
renv::activate()
ANALYSIS_VERSION = "v18" # Where to put output
# wildtype rep 3 is presented as wildtype stage 13-16 rep 2 in the manuscript
metadata = read.table(header = T, text=
"sample cellranger
wt_rep1 2021-10-27_scRNA_10x_3prime
wt_rep3 2022-08-11_scRNA_10x_3prime_CellRanger6.1.2
wt_early_rep1 2022-12-07_scRNA_10x_3prime_WT_early
wt_early_rep2 2022-12-13_scRNA_10x_3prime_WT_early2")
SAMPLE = "all"
source("R/set_up_environment.R")
##### verify if there is a difference between early and late tracheal tip cells #####
cds = readRDS("results/v18/figure_plots/clean_sharable_data/trachea_specific/trachea_monocle3_object.rds")
cds@assays@data$counts
cds@assays@data
norm_exp = monocle3::normalized_counts(cds)
View(norm_exp)
meta_tab = cds@metadata
meta_tab = cds@colData
View(meta_tab)
meta_tab[1:5, ]
meta_tab = meta_tab[meta_tab$subtypes == 'Tracheal Tip Cells', ]
dim(meta_tab)
norm_exp = norm_exp[, rownames(meta_tab)]
rank_sum_results = presto::wilcoxauc(norm_exp, meta_tab$experimental_condition)
View(rank_sum_results)
early_sum_results = rank_sum_results[rank_sum_results$group == 'early', ]
ranks <- early_sum_results$logFC
names(ranks) <- early_sum_results$feature
pathway_list = readRDS('accessory_data/GO_Biological_Processes_2018/GO_Biological_Process.rds')
fgseaRes <- fgsea(pathways = pathway_list,
stats = ranks,
minSize=10,
maxSize=500)
View(fgseaRes)
View(early_sum_results)
plot_cells(cds, genes = 'nur')
plot_cells(cds, genes = 'nur', cell_size = 0.9)
View(fgseaRes)
View(early_sum_results)
early_sum_results$abs_logFC = abs(early_sum_results$logFC)
early_sum_results$category = NA
early_sum_results[early_sum_results$logFC > 0, 'category'] = 'stage10-12 Tip Cells'
early_sum_results[early_sum_results$logFC < 0, 'category'] = 'stage13-16 Tip Cells'
colnames(early_sum_results)
ggplot(data = early_sum_results, aes(x = group, y = abs_logFC, fill = category)) +
geom_bar(stat = 'identity')
ggplot(data = early_sum_results, aes(x = feature, y = abs_logFC, fill = category)) +
geom_bar(stat = 'identity')
early_sum_results = early_sum_results[order(early_sum_results$abs_logFC, decreasing = TRUE), ]
early_sum_results = early_sum_results[1:20, ]
ggplot(data = early_sum_results, aes(x = feature, y = abs_logFC, fill = category)) +
geom_bar(stat = 'identity')
ggplot(data = early_sum_results, aes(x = feature, y = abs_logFC, fill = category)) +
geom_bar(stat = 'identity') + coord_flip()
ggplot(data = early_sum_results, aes(x = reorder(feature, -abs_logFC), y = abs_logFC, fill = category)) +
geom_bar(stat = 'identity') + coord_flip()
ggplot(data = early_sum_results, aes(x = reorder(feature, abs_logFC), y = abs_logFC, fill = category)) +
geom_bar(stat = 'identity') + coord_flip()
ggplot(data = early_sum_results, aes(x = reorder(feature, abs_logFC), y = abs_logFC, fill = category)) +
geom_bar(stat = 'identity') + coord_flip() +
xlab("absolute logFC")
ggplot(data = early_sum_results, aes(x = reorder(feature, abs_logFC), y = abs_logFC, fill = category)) +
geom_bar(stat = 'identity') + coord_flip() +
ylab("absolute logFC") +
xlab("differentially expressed genes")
library(cowplot)
ggplot(data = early_sum_results, aes(x = reorder(feature, abs_logFC), y = abs_logFC, fill = category)) +
geom_bar(stat = 'identity') + coord_flip() +
ylab("absolute logFC") +
xlab("differentially expressed genes") +
theme_half_open()
##### verify if there is a difference between early and late tracheal tip cells #####
library(cowplot)
p = ggplot(data = early_sum_results, aes(x = reorder(feature, abs_logFC), y = abs_logFC, fill = category)) +
geom_bar(stat = 'identity') + coord_flip() +
ylab("absolute logFC") +
xlab("differentially expressed genes") +
theme_half_open()
ggsave(filename = file.path(TARGET_dir, "DE_genes_tip_cells.png"), plot = p, width = 5, height = 5)
# this script contain analysis to address reviewer comments
# but the end results may not end up in the manuscript
set.seed(123)
TARGET_dir = file.path("results", ANALYSIS_VERSION, "reviewer_comments")
p = ggplot(data = early_sum_results, aes(x = reorder(feature, abs_logFC), y = abs_logFC, fill = category)) +
geom_bar(stat = 'identity') + coord_flip() +
ylab("absolute logFC") +
xlab("differentially expressed genes") +
theme_half_open()
ggsave(filename = file.path(TARGET_dir, "DE_genes_tip_cells.png"), plot = p, width = 5, height = 5)
