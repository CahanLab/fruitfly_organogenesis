sub_plot_df = plot_df
p<-ggplot(sub_plot_df, aes(x=pseudotime, y=scaled_exp, group=gene)) +
xlab("pseudotime") +
ylab("average expression") +
geom_line(aes(color = gene)) + theme_bw()
sub_plot_df
ATres = readRDS(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_salivary_gland", 'raw_associationTest.rds'))
ATres = ATres[!is.na(ATres$pvalue), ]
ATres$adj_p = p.adjust(ATres$pvalue, method = 'fdr')
ATres = ATres[ATres$adj_p < 0.05, ]
pathway_list = readRDS('accessory_data/GO_Biological_Processes_2018/GO_Biological_Process.rds')
TF_tab = read.csv("accessory_data/Drosophila_TFs/all_candidates.csv", sep = '\t')
TF_tab = TF_tab[TF_tab$verdict_DNA_BD != "NO", ]
i_TFs = intersect(TF_tab$symbol, rownames(ATres))
ts_TFs = intersect(pathway_list[["open tracheal system development (GO:0007424)"]], TF_tab$symbol)
target_genes = intersect(i_TFs, ts_TFs)
norm_exp = monocle3::normalized_counts(cds)
norm_exp = as.matrix(norm_exp)
norm_exp = norm_exp[target_genes, ]
# this will change
#norm_exp = norm_exp[apply(norm_exp, MARGIN = 1, FUN = max) > 1, ]
pt = monocle3::pseudotime(cds)
pt = data.frame(pseudotime = pt)
plot_df = cbind(pt, t(norm_exp[, rownames(pt)]))
smoothed_df = data.frame()
for(gene in colnames(plot_df)) {
if(gene == 'pseudotime') {
next
}
else {
yy = ksmooth(plot_df[, 'pseudotime'], plot_df[, gene], kernel="normal", bandwidth = 3, x.points=plot_df[, 'pseudotime'])
if(nrow(smoothed_df) == 0) {
smoothed_df = data.frame('pseudotime' = yy$x)
}
smoothed_df[, gene] = yy$y
}
}
smoothed_df$pseudotime = NULL
smoothed_df = t(smoothed_df)
scaled_exp = t(scale(t(smoothed_df)))
sorted_genes = names(sort(apply(scaled_exp, MARGIN = 1, FUN = which.max)))
scaled_exp = scaled_exp[sorted_genes, ]
png(filename = file.path(TARGET_dir, paste0("TF_dynamic_gene_heatmap.png")), height = 2000, width = 1000, res = 200)
pheatmap(scaled_exp[sorted_genes, ], cluster_cols = FALSE, cluster_rows = FALSE)
dev.off()
convert_line_plot <- function(scaled_exp) {
plot_df = data.frame()
for(gene in rownames(scaled_exp)) {
temp_plot = data.frame(pseudotime = seq(1, ncol(scaled_exp)),
scaled_exp = scaled_exp[gene, ],
gene = gene)
plot_df = rbind(plot_df, temp_plot)
}
plot_df$pseudotime = plot_df$pseudotime / max(plot_df$pseudotime)
return(plot_df)
}
ATres = ATres[target_genes, ]
ATres = ATres[order(ATres$meanLogFC, decreasing = TRUE), ]
rank_sum_test = read.csv(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_trachea", 'rank_sum_test.csv'), row.names = 1)
rank_sum_test = rank_sum_test[rank_sum_test$padj < 0.05, ]
rank_sum_test = rank_sum_test[rank_sum_test$logFC > 0.1, ]
target_genes = target_genes[target_genes %in% rank_sum_test$feature]
scaled_exp = scaled_exp[target_genes, ]
plot_df = convert_line_plot(scaled_exp)
plot_df$pseudotime = (plot_df$pseudotime - min(plot_df$pseudotime)) / max(plot_df$pseudotime)
sub_plot_df = plot_df
p<-ggplot(sub_plot_df, aes(x=pseudotime, y=scaled_exp, group=gene)) +
xlab("pseudotime") +
ylab("average expression") +
geom_line(aes(color = gene)) + theme_bw()
p
ggsave(file.path(TARGET_dir, "list_A_dynamic_gene_line_avg.png"), plot = p, width = 12, height = 5)
library(monocle3)
library(ggplot2)
library(RColorBrewer)
library(dbplyr)
TARGET_dir = file.path("results", ANALYSIS_VERSION, "figure_plots", 'refined_wt13_early12_trachea')
dir.create(TARGET_dir, recursive = TRUE)
cds = readRDS(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_trachea", "monocle3_no_batch_correct_object.rds"))
UMAP_coord = cds@int_colData$reducedDims$UMAP
colnames(UMAP_coord) = c("UMAP_1", "UMAP_2")
UMAP_coord = as.data.frame(UMAP_coord)
UMAP_coord$clusters = as.vector(monocle3::clusters(cds))
UMAP_coord$pseudotime = as.vector(monocle3::pseudotime(cds))
UMAP_coord$batch = as.vector(cds@colData$batch)
UMAP_coord[UMAP_coord$batch == 'early_rep_1', 'batch'] = 'Early rep 1'
UMAP_coord[UMAP_coord$batch == 'early_rep_2', 'batch'] = 'Early rep 2'
UMAP_coord[UMAP_coord$batch == 'late_rep_1', 'batch'] = 'Late rep 1'
UMAP_coord[UMAP_coord$batch == 'late_rep_3', 'batch'] = 'Late rep 2'
UMAP_coord$cell_type = cds@colData$cell_type
UMAP_coord[UMAP_coord$cell_type == 'Branching Trachea Cells', 'cell_type'] = 'Tip Cells'
p = ggplot(UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color = pseudotime)) +
geom_point() +
theme_minimal() +
scale_color_viridis_c(option = "plasma") +
guides(fill=guide_legend(title="pseudo-time"))
ggsave(filename = file.path(TARGET_dir, "pseudotime.png"), plot = p, width = 8, height = 6)
p = ggplot(UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color = batch)) +
geom_point() +
theme_minimal() +
scale_color_brewer(palette = 'Set1')
ggsave(filename = file.path(TARGET_dir, "batch.png"), plot = p, width = 8, height = 6)
p = ggplot(UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color = clusters)) +
geom_point() +
theme_minimal() +
scale_color_brewer(palette = 'Set3')
ggsave(filename = file.path(TARGET_dir, "cluster.png"), plot = p, width = 8, height = 6)
p = ggplot(UMAP_coord, aes(x=reorder(batch, pseudotime), y=pseudotime, fill = batch)) +
geom_violin() +
geom_boxplot(width=0.1) +
theme_minimal() +
scale_fill_brewer(palette = 'Set1') +
ylab("pseudotime") +
xlab("batch")
ggsave(filename = file.path(TARGET_dir, "violin_pseudotime.png"), plot = p, width = 8, height = 6)
p = ggplot(UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color = cell_type)) +
guides(color=guide_legend(title="")) +
geom_point() +
theme_minimal() +
scale_color_brewer(palette = 'Set2', breaks=c('Early Trachea Cells', 'Middle Trachea Cells', 'Tip Cells', 'Late Trachea Cells'))
ggsave(filename = file.path(TARGET_dir, "celltypes.png"), plot = p, width = 8, height = 6)
norm_exp = monocle3::normalized_counts(cds)
# find the TFs sepcific to the tip cells
rank_sum_test = read.csv(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_trachea", 'rank_sum_test.csv'), row.names = 1)
rank_sum_test = rank_sum_test[rank_sum_test$padj < 0.05, ]
rank_sum_test = rank_sum_test[rank_sum_test$logFC > 0.1, ]
unique(rank_sum_test$group)
''
tip_test = rank_sum_test[rank_sum_test$group == '"Branching Trachea Cells"', ]
TF_tab = read.csv("accessory_data/Drosophila_TFs/all_candidates.csv", sep = '\t')
TF_tab = TF_tab[TF_tab$verdict_DNA_BD != "NO", ]
i_TFs = intersect(TF_tab$symbol, tip_test$feature)
# find the TFs sepcific to the tip cells
rank_sum_test = read.csv(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_trachea", 'rank_sum_test.csv'), row.names = 1)
rank_sum_test = rank_sum_test[rank_sum_test$padj < 0.05, ]
rank_sum_test = rank_sum_test[rank_sum_test$logFC > 0, ]
tip_test = rank_sum_test[rank_sum_test$group == '"Branching Trachea Cells"', ]
TF_tab = read.csv("accessory_data/Drosophila_TFs/all_candidates.csv", sep = '\t')
TF_tab = TF_tab[TF_tab$verdict_DNA_BD != "NO", ]
i_TFs = intersect(TF_tab$symbol, tip_test$feature)
# find the TFs sepcific to the tip cells
rank_sum_test = read.csv(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_trachea", 'rank_sum_test.csv'), row.names = 1)
rank_sum_test = rank_sum_test[rank_sum_test$padj < 0.05, ]
rank_sum_test = rank_sum_test[rank_sum_test$logFC > 0.1, ]
tip_test = rank_sum_test[rank_sum_test$group == "Branching Trachea Cells", ]
TF_tab = read.csv("accessory_data/Drosophila_TFs/all_candidates.csv", sep = '\t')
TF_tab = TF_tab[TF_tab$verdict_DNA_BD != "NO", ]
i_TFs = intersect(TF_tab$symbol, tip_test$feature)
tip_test = rank_sum_test[rank_sum_test$group == "Branching Trachea Cells", ]
View(tip_test)
TF_tab = read.csv("accessory_data/Drosophila_TFs/all_candidates.csv", sep = '\t')
TF_tab = TF_tab[TF_tab$verdict_DNA_BD != "NO", ]
i_TFs = intersect(TF_tab$symbol, tip_test$feature)
TF_tab$symbol
tip_test$feature
library(Seurat)
library(monocle3)
library(presto)
library(pheatmap)
library(ggplot2)
library(tradeSeq)
set.seed(123)
TARGET_dir = file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_CNS")
dir.create(TARGET_dir)
wt_late_object = readRDS(file.path("results", ANALYSIS_VERSION, "manual_annotation_wt13/manual_celltype_object3.rds"))
##########################
# TODO the below will be changed as time goes on
wt_early_object = readRDS(file.path("results", ANALYSIS_VERSION, "early_wt12_integrated/BDGP_automated_annotation_object.rds"))
table(wt_early_object$Integrated_tentativeCellType)
##########################
# TODO the below will be changed as time goes on
wt_early_object = readRDS(file.path("results", ANALYSIS_VERSION, "manual_annotation_early_wt12/manual_celltype_object1.rds"))
table(wt_early_object@meta.data$manual_celltypes)
sub_wt_early_object = subset(wt_early_object, subset = manual_celltypes == 'CNS')
sub_wt_early_object$experimental_condition = 'early'
sub_wt_late_object = subset(wt_late_object, subset = manual_celltypes == "CNS")
sub_wt_late_object$experimental_condition = 'late'
combined_ct_object = merge(sub_wt_early_object, sub_wt_late_object)
object = Seurat::CreateSeuratObject(combined_ct_object@assays$RNA@counts, project = 'CNS')
object@meta.data$experimental_condition = combined_ct_object@meta.data$experimental_condition
object@meta.data$batch = paste0(combined_ct_object@meta.data$experimental_condition, "_", combined_ct_object@meta.data$batch)
object = Seurat::NormalizeData(object)
cellCycleMarkers = read.csv("accessory_data/cellCycleMarkers.csv", skip = 1, header = T)
object %<>% CellCycleScoring(s.features = cellCycleMarkers$S.phase.markers., g2m.features = cellCycleMarkers$G2.M.phase.markers.)
# start monocle3
expression_matrix = object@assays$RNA@counts
cell_metadata = object@meta.data
gene_annotation = object@assays$RNA@meta.features
gene_annotation$gene_short_name = rownames(gene_annotation)
cds <- new_cell_data_set(expression_matrix,
cell_metadata = cell_metadata,
gene_metadata = gene_annotation)
cds <- preprocess_cds(cds, num_dim = 100)
cds <- reduce_dimension(cds)
plot_cells(cds, label_groups_by_cluster=TRUE,   color_cells_by = "batch", cell_size = 1, label_cell_groups = FALSE)
?new_cell_data_set
cds <- preprocess_cds(cds, num_dim = 20)
cds <- reduce_dimension(cds)
plot_cells(cds, label_groups_by_cluster=TRUE,  color_cells_by = "batch", cell_size = 1, label_cell_groups = FALSE)
plot_cells(cds,
genes=c("mira"),
label_cell_groups=FALSE,
show_trajectory_graph=FALSE, cell_size = 2)
cds <- preprocess_cds(cds, num_dim = 100)
cds <- align_cds(cds, num_dim = 100, alignment_group = "batch")
cds <- reduce_dimension(cds)
plot_cells(cds, label_groups_by_cluster=TRUE,  color_cells_by = "batch", cell_size = 1, label_cell_groups = FALSE)
plot_cells(cds,
genes=c("mira"),
label_cell_groups=FALSE,
show_trajectory_graph=FALSE, cell_size = 2)
plot_cells(cds,
genes=c("tap"),
label_cell_groups=FALSE,
show_trajectory_graph=FALSE, cell_size = 2)
plot_cells(cds,
genes=c("hey"),
label_cell_groups=FALSE,
show_trajectory_graph=FALSE, cell_size = 2)
plot_cells(cds,
genes=c("Hey"),
label_cell_groups=FALSE,
show_trajectory_graph=FALSE, cell_size = 2)
plot_cells(cds, label_groups_by_cluster=TRUE,  color_cells_by = "batch", cell_size = 1, label_cell_groups = FALSE)
test_data = readRDS("../../salivary_gland_ribbon/analysis/results/v18/wt_late_early_trachea/monocle3_batch_correct_object.rds")
plot_cells(test_data, genes = 'Soi6')
plot_cells(test_data, genes = 'Osi6')
plot_cells(test_data, genes = 'Osi6', cell_size = 2)
plot_cells(test_data, genes = 'Osi17', cell_size = 2)
plot_cells(test_data, genes = 'btl', cell_size = 2)
test_data_1 = readRDS("../../salivary_gland_ribbon/analysis/results/v18/wt_late_early_salivary_gland/monocle3_batch_correct_object.rds")
plot_cells(test_data_1, genes = 'eyg')
plot_cells(test_data_1, genes = 'eyg', cell_size = 2)
plot_cells(test_data_1, genes = 'toe', cell_size = 2)
plot_cells(test_data_1, genes = 'trh', cell_size = 2)
plot_cells(test_data_1, genes = 'sage', cell_size = 2)
plot_cells(test_data_1, genes = 'fkh', cell_size = 2)
plot_cells(test_data_1, genes = 'CrebA', cell_size = 2)
plot_cells(test_data, genes = 'trh', cell_size = 2)
plot_cells(test_data, genes = 'Mipp1', cell_size = 2)
plot_cells(test_data, genes = 'bnl', cell_size = 2)
plot_cells(test_data, genes = 'shg', cell_size = 2)
plot_cells(test_data, genes = 'grh', cell_size = 2)
plot_cells(test_data, genes = 'rib', cell_size = 2)
plot_cells(test_data, group_cells_by = 'batch', cell_size = 2)
plot_cells(test_data_1, genes = 'eyg', cell_size = 2)
plot_cells(test_data_1, genes = 'sage', cell_size = 2)
plot_cells(test_data, genes = 'Osi17', cell_size = 2)
plot_cells(test_data, genes = 'Osi6', cell_size = 2)
plot_cells(test_data, alignment_group = 'batch', cell_size = 2)
plot_cells(test_data, color_cells_by = 'batch', cell_size = 2)
# To reproduce our work, run this script.
# We used Ubuntu 20.04 with an R package environment managed by renv.
# We used R version 4.1.2.
# Make it work on each of our computers
try({setwd("~/Dropbox/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("~/Dropbox (CahanLab)/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("c:/Users/DAndrewLab/Desktop/fruitfly_organogenesis/analysis/")}, silent = T)
renv::activate()
ANALYSIS_VERSION = "v18" # Where to put output
metadata = read.table(header = T, text=
"sample cellranger
wt_rep1 2021-10-27_scRNA_10x_3prime
wt_rep3 2022-08-11_scRNA_10x_3prime_CellRanger6.1.2
wt_early_rep1 2022-12-07_scRNA_10x_3prime_WT_early
wt_early_rep2 2022-12-13_scRNA_10x_3prime_WT_early2")
SAMPLE = "all"
source("R/set_up_environment.R")
library(Seurat)
library(monocle3)
library(presto)
library(pheatmap)
library(ggplot2)
library(tradeSeq)
set.seed(123)
TARGET_dir = file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_salivary_gland_batch")
dir.create(TARGET_dir)
wt_late_object = readRDS(file.path("results", ANALYSIS_VERSION, "manual_annotation_wt13/manual_celltype_object3.rds"))
##########################
# TODO the below will be changed as time goes on
wt_early_object = readRDS(file.path("results", ANALYSIS_VERSION, "early_wt12_integrated/BDGP_automated_annotation_object.rds"))
sub_wt_early_object = subset(wt_early_object, subset = Integrated_tentativeCellType == 'salivary gland body primordium')
cds <- preprocess_cds(cds, num_dim = 100)
cds <- new_cell_data_set(expression_matrix,
cell_metadata = cell_metadata,
gene_metadata = gene_annotation)
set.seed(123)
TARGET_dir = file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_salivary_gland_batch")
dir.create(TARGET_dir)
wt_late_object = readRDS(file.path("results", ANALYSIS_VERSION, "manual_annotation_wt13/manual_celltype_object3.rds"))
##########################
# TODO the below will be changed as time goes on
wt_early_object = readRDS(file.path("results", ANALYSIS_VERSION, "early_wt12_integrated/BDGP_automated_annotation_object.rds"))
sub_wt_early_object = subset(wt_early_object, subset = Integrated_tentativeCellType == 'salivary gland body primordium')
sub_wt_early_object$experimental_condition = 'early'
sub_wt_late_object = subset(wt_late_object, subset = manual_celltypes == "Salivary Gland")
sub_wt_late_object$experimental_condition = 'late'
combined_ct_object = merge(sub_wt_early_object, sub_wt_late_object)
object = Seurat::CreateSeuratObject(combined_ct_object@assays$RNA@counts, project = 'salivary_glands')
object@meta.data$experimental_condition = combined_ct_object@meta.data$experimental_condition
object@meta.data$batch = paste0(combined_ct_object@meta.data$experimental_condition, "_", combined_ct_object@meta.data$batch)
object = Seurat::NormalizeData(object)
cellCycleMarkers = read.csv("accessory_data/cellCycleMarkers.csv", skip = 1, header = T)
object %<>% CellCycleScoring(s.features = cellCycleMarkers$S.phase.markers., g2m.features = cellCycleMarkers$G2.M.phase.markers.)
# start monocle3
expression_matrix = object@assays$RNA@counts
cell_metadata = object@meta.data
gene_annotation = object@assays$RNA@meta.features
gene_annotation$gene_short_name = rownames(gene_annotation)
cds <- new_cell_data_set(expression_matrix,
cell_metadata = cell_metadata,
gene_metadata = gene_annotation)
cds <- preprocess_cds(cds, num_dim = 100)
cds <- align_cds(cds, num_dim = 100, alignment_group = "batch")
cds <- reduce_dimension(cds)
plot_cells(cds, label_groups_by_cluster=TRUE,  color_cells_by = "batch", cell_size = 1, label_cell_groups = FALSE)
cds <- preprocess_cds(cds, num_dim = 20)
cds <- align_cds(cds, num_dim = 20, alignment_group = "batch")
cds <- reduce_dimension(cds)
plot_cells(cds, label_groups_by_cluster=TRUE,  color_cells_by = "batch", cell_size = 1, label_cell_groups = FALSE)
plot_cells(cds,
genes=c("eyg"),
label_cell_groups=FALSE,
show_trajectory_graph=FALSE, cell_size = 2)
cds <- preprocess_cds(cds, num_dim = 50)
cds <- align_cds(cds, num_dim = 50, alignment_group = "batch")
cds <- reduce_dimension(cds)
plot_cells(cds, label_groups_by_cluster=TRUE,  color_cells_by = "batch", cell_size = 1, label_cell_groups = FALSE)
plot_cells(cds,
genes=c("eyg"),
label_cell_groups=FALSE,
show_trajectory_graph=FALSE, cell_size = 2)
cds <- preprocess_cds(cds, num_dim = 70)
cds <- preprocess_cds(cds, num_dim = 70)
cds <- align_cds(cds, num_dim = 70, alignment_group = "batch")
cds <- reduce_dimension(cds)
plot_cells(cds,
genes=c("eyg"),
label_cell_groups=FALSE,
show_trajectory_graph=FALSE, cell_size = 2)
cds <- preprocess_cds(cds, num_dim = 10)
cds <- align_cds(cds, num_dim = 10, alignment_group = "batch")
cds <- reduce_dimension(cds)
plot_cells(cds, label_groups_by_cluster=TRUE,  color_cells_by = "batch", cell_size = 1, label_cell_groups = FALSE)
plot_cells(cds,
genes=c("eyg"),
label_cell_groups=FALSE,
show_trajectory_graph=FALSE, cell_size = 2)
library(monocle3)
library(ggplot2)
library(RColorBrewer)
library(dbplyr)
TARGET_dir = file.path("results", ANALYSIS_VERSION, "figure_plots", 'refined_wt13_early12_trachea')
dir.create(TARGET_dir, recursive = TRUE)
cds = readRDS(file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_trachea", "monocle3_no_batch_correct_object.rds"))
UMAP_coord = cds@int_colData$reducedDims$UMAP
colnames(UMAP_coord) = c("UMAP_1", "UMAP_2")
UMAP_coord = as.data.frame(UMAP_coord)
UMAP_coord$clusters = as.vector(monocle3::clusters(cds))
UMAP_coord$pseudotime = as.vector(monocle3::pseudotime(cds))
UMAP_coord$batch = as.vector(cds@colData$batch)
UMAP_coord[UMAP_coord$batch == 'early_rep_1', 'batch'] = 'Early rep 1'
UMAP_coord[UMAP_coord$batch == 'early_rep_2', 'batch'] = 'Early rep 2'
UMAP_coord[UMAP_coord$batch == 'late_rep_1', 'batch'] = 'Late rep 1'
UMAP_coord[UMAP_coord$batch == 'late_rep_3', 'batch'] = 'Late rep 2'
UMAP_coord$cell_type = cds@colData$cell_type
UMAP_coord[UMAP_coord$cell_type == 'Branching Trachea Cells', 'cell_type'] = 'Tip Cells'
p = ggplot(UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color = pseudotime)) +
geom_point() +
theme_minimal() +
scale_color_viridis_c(option = "plasma") +
guides(fill=guide_legend(title="pseudo-time"))
ggsave(filename = file.path(TARGET_dir, "pseudotime.png"), plot = p, width = 8, height = 6)
p = ggplot(UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color = batch)) +
geom_point() +
theme_minimal() +
scale_color_brewer(palette = 'Set1')
ggsave(filename = file.path(TARGET_dir, "batch.png"), plot = p, width = 8, height = 6)
p = ggplot(UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color = clusters)) +
geom_point() +
theme_minimal() +
scale_color_brewer(palette = 'Set3')
ggsave(filename = file.path(TARGET_dir, "cluster.png"), plot = p, width = 8, height = 6)
p = ggplot(UMAP_coord, aes(x=reorder(batch, pseudotime), y=pseudotime, fill = batch)) +
geom_violin() +
geom_boxplot(width=0.1) +
theme_minimal() +
scale_fill_brewer(palette = 'Set1') +
ylab("pseudotime") +
xlab("batch")
ggsave(filename = file.path(TARGET_dir, "violin_pseudotime.png"), plot = p, width = 8, height = 6)
p = ggplot(UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color = cell_type)) +
guides(color=guide_legend(title="")) +
geom_point() +
theme_minimal() +
scale_color_brewer(palette = 'Set2', breaks=c('Early Trachea Cells', 'Middle Trachea Cells', 'Tip Cells', 'Late Trachea Cells'))
ggsave(filename = file.path(TARGET_dir, "celltypes.png"), plot = p, width = 8, height = 6)
norm_exp = monocle3::normalized_counts(cds)
UMAP_coord$trh = norm_exp['trh', ]
p = ggplot(UMAP_coord, aes(x=reorder(cell_type, -trh), y=trh, fill = cell_type)) +
geom_violin() +
guides(fill=guide_legend(title="")) +
geom_boxplot(width=0.1) +
theme_minimal() +
scale_fill_brewer(palette = 'Set2') +
ylab("trh normalized expression") +
xlab("cell type")
ggsave(filename = file.path(TARGET_dir, "violin_trh.png"), plot = p, width = 8, height = 6)
p
UMAP_coord$Osi6 = norm_exp['Osi6', ]
p = ggplot(UMAP_coord, aes(x=reorder(cell_type, -Osi6), y=Osi6, fill = cell_type)) +
geom_violin() +
guides(fill=guide_legend(title="")) +
geom_boxplot(width=0.1) +
theme_minimal() +
scale_fill_brewer(palette = 'Set2') +
ylab("Osi6 normalized expression") +
xlab("cell type")
p
ggsave(filename = file.path(TARGET_dir, "violin_Osi6.png"), plot = p, width = 8, height = 6)
p = ggplot(UMAP_coord, aes(x=reorder(cell_type, -Osi17), y=Osi17, fill = cell_type)) +
geom_violin() +
guides(fill=guide_legend(title="")) +
geom_boxplot(width=0.1) +
theme_minimal() +
scale_fill_brewer(palette = 'Set2') +
ylab("Osi17 normalized expression") +
xlab("cell type")
p
UMAP_coord$Osi17 = norm_exp['Osi17', ]
p = ggplot(UMAP_coord, aes(x=reorder(cell_type, -Osi17), y=Osi17, fill = cell_type)) +
geom_violin() +
guides(fill=guide_legend(title="")) +
geom_boxplot(width=0.1) +
theme_minimal() +
scale_fill_brewer(palette = 'Set2') +
ylab("Osi17 normalized expression") +
xlab("cell type")
p
p = ggplot(UMAP_coord, aes(x=reorder(cell_type, -Osi6), y=Osi6, fill = cell_type)) +
geom_violin() +
guides(fill=guide_legend(title="")) +
#geom_boxplot(width=0.1) +
theme_minimal() +
scale_fill_brewer(palette = 'Set2') +
ylab("Osi6 normalized expression") +
xlab("cell type")
p
p = ggplot(UMAP_coord, aes(x=reorder(cell_type, -Osi17), y=Osi17, fill = cell_type)) +
geom_violin() +
guides(fill=guide_legend(title="")) +
#geom_boxplot(width=0.1) +
theme_minimal() +
scale_fill_brewer(palette = 'Set2') +
ylab("Osi17 normalized expression") +
xlab("cell type")
p
p = ggplot(UMAP_coord, aes(x=reorder(cell_type, -Osi6), y=Osi6, fill = cell_type)) +
geom_violin() +
guides(fill=guide_legend(title="")) +
#geom_boxplot(width=0.1) +
theme_minimal() +
scale_fill_brewer(palette = 'Set2') +
ylab("Osi6 normalized expression") +
xlab("cell type")
p
p = ggplot(UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color = Osi6)) +
geom_point() +
theme_minimal() +
scale_color_brewer(palette = 'Set3')
p
p = ggplot(UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color = Osi6)) +
geom_point() +
theme_minimal()
p
p = ggplot(UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color = Osi17)) +
geom_point() +
theme_minimal()
p
p = ggplot(UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color = N)) +
geom_point() +
theme_minimal()
p
p = ggplot(UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color = btl)) +
geom_point() +
theme_minimal()
p
p = ggplot(UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color = trh)) +
geom_point() +
theme_minimal()
p
test_data = readRDS("../../salivary_gland_ribbon/analysis/results/v18/wt_late_early_trachea/monocle3_batch_correct_object.rds")
library(monocle3)
plot_cells(test_data, genes = 'Osi6')
plot_cells(test_data, genes = 'Osi6', cell_size = 2)
plot_cells(test_data, genes = 'trh', cell_size = 2)
plot_cells(test_data, genes = 'btl', cell_size = 2)
plot_cells(test_data, group_cells_by = "batch", cell_size = 2)
plot_cells(test_data, color_cells_by = "batch", cell_size = 2)
plot_cells(test_data, genes = 'fkh', cell_size = 2)
plot_cells(test_data, genes = 'grh', cell_size = 2)
plot_cells(test_data, genes = 'Tom', cell_size = 2)
plot_cells(test_data, genes = 'Tom', cell_size = 2)
plot_cells(cds, cell_size = 2)
plot_cells(cds, genes = 'Tom', cell_size = 2)
plot_cells(cds, genes = 'sano', cell_size = 2)
plot_cells(test_data, genes = 'sano', cell_size = 2)
plot_cells(test_data, genes = 'dpy', cell_size = 2)
plot_cells(cds, genes = 'dpy', cell_size = 2)
plot_cells(cds, genes = 'btl', cell_size = 2)
plot_cells(cds, genes = 'CG11905', cell_size = 2)
source("~/Dropbox (CahanLab)/fruitfly_organogenesis/analysis/R/main.R", echo=TRUE)
