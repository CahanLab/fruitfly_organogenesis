object = Seurat::NormalizeData(object)
cellCycleMarkers = read.csv("accessory_data/cellCycleMarkers.csv", skip = 1, header = T)
object %<>% CellCycleScoring(s.features = cellCycleMarkers$S.phase.markers., g2m.features = cellCycleMarkers$G2.M.phase.markers.)
# start monocle3
expression_matrix = object@assays$RNA@counts
cell_metadata = object@meta.data
gene_annotation = object@assays$RNA@meta.features
gene_annotation$gene_short_name = rownames(gene_annotation)
cds <- new_cell_data_set(expression_matrix,
cell_metadata = cell_metadata,
gene_metadata = gene_annotation)
cds <- preprocess_cds(cds, num_dim = 100)
cds <- reduce_dimension(cds)
plot_cells(cds, label_groups_by_cluster=TRUE,  color_cells_by = "batch", cell_size = 1, label_cell_groups = FALSE)
cds <- preprocess_cds(cds, num_dim = 90)
cds <- reduce_dimension(cds)
plot_cells(cds, label_groups_by_cluster=TRUE,  color_cells_by = "batch", cell_size = 1, label_cell_groups = FALSE)
cds <- preprocess_cds(cds, num_dim = 90)
cds <- reduce_dimension(cds)
plot_cells(cds, label_groups_by_cluster=TRUE,  color_cells_by = "batch", cell_size = 1, label_cell_groups = FALSE)
cds <- preprocess_cds(cds, num_dim = 80)
cds <- reduce_dimension(cds)
plot_cells(cds, label_groups_by_cluster=TRUE,  color_cells_by = "batch", cell_size = 1, label_cell_groups = FALSE)
cds <- preprocess_cds(cds, num_dim = 50)
cds <- reduce_dimension(cds)
plot_cells(cds, label_groups_by_cluster=TRUE,  color_cells_by = "batch", cell_size = 1, label_cell_groups = FALSE)
cds <- preprocess_cds(cds, num_dim = 200)
cds <- reduce_dimension(cds)
plot_cells(cds, label_groups_by_cluster=TRUE,  color_cells_by = "batch", cell_size = 1, label_cell_groups = FALSE)
cds <- preprocess_cds(cds, num_dim = 100)
cds <- reduce_dimension(cds)
plot_cells(cds, label_groups_by_cluster=TRUE,  color_cells_by = "batch", cell_size = 1, label_cell_groups = FALSE)
cds <- preprocess_cds(cds, num_dim = 20)
cds <- reduce_dimension(cds)
plot_cells(cds, label_groups_by_cluster=TRUE,  color_cells_by = "batch", cell_size = 1, label_cell_groups = FALSE)
cds <- preprocess_cds(cds, num_dim = 95)
cds <- reduce_dimension(cds)
plot_cells(cds, label_groups_by_cluster=TRUE,  color_cells_by = "batch", cell_size = 1, label_cell_groups = FALSE)
cds <- preprocess_cds(cds, num_dim = 105)
cds <- reduce_dimension(cds)
plot_cells(cds, label_groups_by_cluster=TRUE,  color_cells_by = "batch", cell_size = 1, label_cell_groups = FALSE)
cds <- preprocess_cds(cds, num_dim = 100)
cds <- reduce_dimension(cds)
plot_cells(cds, label_groups_by_cluster=TRUE,  color_cells_by = "batch", cell_size = 1, label_cell_groups = FALSE)
cds <- cluster_cells(cds, resolution = 1e-1)
plot_cells(cds, color_cells_by = "cluster", label_cell_groups = FALSE, cell_size = 1)
cds <- learn_graph(cds)
plot_cells(cds,
color_cells_by = "batch",
label_groups_by_cluster=FALSE,
label_leaves=FALSE,
label_branch_points=FALSE)
cds <- order_cells(cds)
plot_cells(cds,
color_cells_by = "pseudotime",
label_cell_groups=FALSE,
label_leaves=FALSE,
label_branch_points=FALSE,
graph_label_size=1.5, cell_size = 1, show_trajectory_graph = FALSE)
cds <- preprocess_cds(cds, num_dim = 100)
cds <- reduce_dimension(cds)
plot_cells(cds, label_groups_by_cluster=TRUE,  color_cells_by = "batch", cell_size = 1, label_cell_groups = FALSE)
plot_cells(cds,
genes=c("eyg"),
label_cell_groups=FALSE,
show_trajectory_graph=FALSE, cell_size = 2)
cds <- cluster_cells(cds, resolution = 1e-2)
plot_cells(cds, color_cells_by = "cluster", label_cell_groups = FALSE, cell_size = 1)
cds <- learn_graph(cds)
plot_cells(cds,
color_cells_by = "batch",
label_groups_by_cluster=FALSE,
label_leaves=FALSE,
label_branch_points=FALSE)
cds <- order_cells(cds)
plot_cells(cds,
color_cells_by = "pseudotime",
label_cell_groups=FALSE,
label_leaves=FALSE,
label_branch_points=FALSE,
graph_label_size=1.5, cell_size = 1, show_trajectory_graph = FALSE)
# this is where we use TradeSeq to test association
expRaw = expression_matrix[apply(expression_matrix, MARGIN = 1, FUN = function(x){return(sum(x > 0)) }) > 10, ]
pt<-as.data.frame(pseudotime(cds))
colnames(pt)<-"pseudotime"
cw<-as.matrix(rep(1,nrow(pt)))
rownames(cw)<-rownames(pt)
ts<-tradeSeq::fitGAM(as.matrix(expRaw),pseudotime=as.matrix(pt),cellWeights=cw)
saveRDS(ts, file = file.path(TARGET_dir, "tradeseq_fitgam_results.rds"))
ATres<-tradeSeq::associationTest(ts)
saveRDS(ATres, file = file.path(TARGET_dir, 'raw_associationTest.rds'))
ATres = ATres[!is.na(ATres$pvalue), ]
ATres$adj_p = p.adjust(ATres$pvalue)
ATres = ATres[ATres$adj_p < 0.05, ]
write.csv(ATres, file = file.path(TARGET_dir, "significant_associationTest.csv"))
startRes <- startVsEndTest(ts)
#startRes$adj_p = p.adjust(startRes$pvalue)
write.csv(startRes, file = file.path(TARGET_dir, 'raw_startvsendtest.csv'))
startRes$genes = rownames(startRes)
plot_cells(cds,
genes=c("RpL21", "RpL23", "RpL24", 'RpS25'),
label_cell_groups=FALSE,
show_trajectory_graph=FALSE, cell_size = 2)
# plot out the heatmap
cds = readRDS(file.path(TARGET_dir, "monocle3_no_batch_correct_object.rds"))
ATres = readRDS(file.path(TARGET_dir, 'raw_associationTest.rds'))
ATres = ATres[!is.na(ATres$pvalue), ]
ATres$adj_p = p.adjust(ATres$pvalue, method = 'fdr')
ATres = ATres[ATres$adj_p < 0.05, ]
startRes = read.csv(file.path(TARGET_dir, 'raw_startvsendtest.csv'), row.names = 1)
startRes = startRes[!is.na(startRes$pvalue), ]
startRes$adj_p = p.adjust(startRes$pvalue, method = 'fdr')
# start with early genes
startRes = startRes[startRes$adj_p < 0.05, ]
pos_start_res = startRes[startRes$logFClineage1 < 0, ]
norm_exp = monocle3::normalized_counts(cds)
norm_exp = as.matrix(norm_exp)
norm_exp = norm_exp[rownames(pos_start_res), ]
# this will change
#norm_exp = norm_exp[apply(norm_exp, MARGIN = 1, FUN = max) > 1, ]
pt = monocle3::pseudotime(cds)
pt = data.frame(pseudotime = pt)
plot_df = cbind(pt, t(norm_exp[, rownames(pt)]))
smoothed_df = data.frame()
####################################################
# calculate the GO enrichment of the early vs late
library(enrichR)
cds = readRDS(file.path(TARGET_dir, "monocle3_no_batch_correct_object.rds"))
enrichR::setEnrichrSite("FlyEnrichr")
startRes = read.csv(file.path(TARGET_dir, 'raw_startvsendtest.csv'), row.names = 1)
startRes = startRes[!is.na(startRes$pvalue), ]
startRes$adj_p = p.adjust(startRes$pvalue, method = 'fdr')
startRes = startRes[startRes$adj_p < 0.05, ]
startRes_early = startRes[startRes$logFClineage1 < 0, ]
startRes_late = startRes[startRes$logFClineage1 >= 0, ]
enrichment_results = enrichR::enrichr(
genes = rownames(startRes_early),
databases = c(
"GO_Biological_Process_2018",
"GO_Molecular_Function_2018"
)
)
biological_analysis = enrichment_results$GO_Biological_Process_2018
molecular_analysis = enrichment_results$GO_Molecular_Function_2018
write.csv(biological_analysis, file = file.path(TARGET_dir, 'sig_GO_biological_early.csv'))
enrichment_results = enrichR::enrichr(
genes = rownames(startRes_late),
databases = c(
"GO_Biological_Process_2018",
"GO_Molecular_Function_2018"
)
)
biological_analysis = enrichment_results$GO_Biological_Process_2018
molecular_analysis = enrichment_results$GO_Molecular_Function_2018
write.csv(biological_analysis, file = file.path(TARGET_dir, 'sig_GO_biological_late.csv'))
# finish off with transient genes
# start with transient genes
ATres = readRDS(file.path(TARGET_dir, 'raw_associationTest.rds'))
ATres = ATres[!is.na(ATres$pvalue), ]
ATres$adj_p = p.adjust(ATres$pvalue, method = 'fdr')
ATres = ATres[ATres$adj_p < 0.05, ]
startRes = read.csv(file.path(TARGET_dir, 'raw_startvsendtest.csv'), row.names = 1)
startRes = startRes[!is.na(startRes$pvalue), ]
startRes$adj_p = p.adjust(startRes$pvalue, method = 'fdr')
startRes = startRes[startRes$adj_p > 0.05, ]
ATres = ATres[intersect(rownames(startRes), rownames(ATres)), ]
enrichment_results = enrichR::enrichr(
genes = rownames(ATres),
databases = c(
"GO_Biological_Process_2018",
"GO_Molecular_Function_2018"
)
)
biological_analysis = enrichment_results$GO_Biological_Process_2018
molecular_analysis = enrichment_results$GO_Molecular_Function_2018
write.csv(biological_analysis, file = file.path(TARGET_dir, 'sig_GO_biological_transient.csv'))
# To reproduce our work, run this script.
# We used Ubuntu 20.04 with an R package environment managed by renv.
# We used R version 4.1.2.
# Make it work on each of our computers
try({setwd("~/Dropbox/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("~/Dropbox (CahanLab)/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("c:/Users/DAndrewLab/Desktop/fruitfly_organogenesis/analysis/")}, silent = T)
renv::activate()
ANALYSIS_VERSION = "v18" # Where to put output
metadata = read.table(header = T, text=
"sample cellranger
wt_rep1 2021-10-27_scRNA_10x_3prime
wt_rep3 2022-08-11_scRNA_10x_3prime_CellRanger6.1.2
wt_early_rep1 2022-12-07_scRNA_10x_3prime_WT_early
wt_early_rep2 2022-12-13_scRNA_10x_3prime_WT_early2")
SAMPLE = "all"
source("R/set_up_environment.R")
library(Seurat)
library(monocle3)
library(presto)
library(pheatmap)
library(ggplot2)
library(tradeSeq)
set.seed(123)
TARGET_dir = file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_salivary_gland")
dir.create(TARGET_dir)
wt_late_object = readRDS(file.path("results", ANALYSIS_VERSION, "manual_annotation_wt13/manual_celltype_object3.rds"))
library(Seurat)
library(monocle3)
library(presto)
library(pheatmap)
library(ggplot2)
library(tradeSeq)
set.seed(123)
TARGET_dir = file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_salivary_gland")
dir.create(TARGET_dir)
wt_late_object = readRDS(file.path("results", ANALYSIS_VERSION, "manual_annotation_wt13/manual_celltype_object3.rds"))
##########################
# TODO the below will be changed as time goes on
wt_early_object = readRDS(file.path("results", ANALYSIS_VERSION, "early_wt12_integrated/BDGP_automated_annotation_object.rds"))
sub_wt_early_object = subset(wt_early_object, subset = Integrated_tentativeCellType == 'salivary gland body primordium')
sub_wt_early_object$experimental_condition = 'early'
sub_wt_late_object = subset(wt_late_object, subset = manual_celltypes == "Salivary Gland")
sub_wt_late_object$experimental_condition = 'late'
combined_ct_object = merge(sub_wt_early_object, sub_wt_late_object)
object = Seurat::CreateSeuratObject(combined_ct_object@assays$RNA@counts, project = 'salivary_glands')
object@meta.data$experimental_condition = combined_ct_object@meta.data$experimental_condition
object@meta.data$batch = paste0(combined_ct_object@meta.data$experimental_condition, "_", combined_ct_object@meta.data$batch)
object = Seurat::NormalizeData(object)
cellCycleMarkers = read.csv("accessory_data/cellCycleMarkers.csv", skip = 1, header = T)
object %<>% CellCycleScoring(s.features = cellCycleMarkers$S.phase.markers., g2m.features = cellCycleMarkers$G2.M.phase.markers.)
# start monocle3
expression_matrix = object@assays$RNA@counts
cell_metadata = object@meta.data
gene_annotation = object@assays$RNA@meta.features
gene_annotation$gene_short_name = rownames(gene_annotation)
cds <- new_cell_data_set(expression_matrix,
cell_metadata = cell_metadata,
gene_metadata = gene_annotation)
cds <- preprocess_cds(cds, num_dim = 100)
cds <- reduce_dimension(cds)
plot_cells(cds, label_groups_by_cluster=TRUE,  color_cells_by = "batch", cell_size = 1, label_cell_groups = FALSE)
ggsave(file.path(TARGET_dir, 'monocle3_no_batch_corrected_UMAP.png'), width = 8, height = 6)
plot_cells(cds,
genes=c("eyg"),
label_cell_groups=FALSE,
show_trajectory_graph=FALSE, cell_size = 2)
plot_cells(cds,
genes=c("toe"),
label_cell_groups=FALSE,
show_trajectory_graph=FALSE, cell_size = 2)
ggsave(file.path(TARGET_dir, 'monocle3_no_batch_corrected_toe.png'), width = 8, height = 6)
cds <- cluster_cells(cds, resolution = 1e-2)
plot_cells(cds, color_cells_by = "cluster", label_cell_groups = FALSE, cell_size = 1)
marker_test_res <- monocle3::top_markers(cds, group_cells_by="cluster",
reference_cells=1000, cores=8)
write.csv(marker_test_res, file = file.path(TARGET_dir, "top_markers_monocle.csv"))
rank_sum_results = presto::wilcoxauc(normalized_counts(cds), cds@clusters$UMAP$clusters)
write.csv(rank_sum_results, file = file.path(TARGET_dir, "rank_sum_test.csv"))
plot_cells(cds, color_cells_by = "Phase", label_cell_groups = FALSE, cell_size = 1, show_trajectory_graph = FALSE)
ggsave(file.path(TARGET_dir, 'monocle3_no_batch_corrected_phase.png'), width = 8, height = 6)
cds <- learn_graph(cds)
plot_cells(cds,
color_cells_by = "batch",
label_groups_by_cluster=FALSE,
label_leaves=FALSE,
label_branch_points=FALSE)
cds <- order_cells(cds)
plot_cells(cds,
color_cells_by = "pseudotime",
label_cell_groups=FALSE,
label_leaves=FALSE,
label_branch_points=FALSE,
graph_label_size=1.5, cell_size = 1, show_trajectory_graph = FALSE)
ggsave(file.path(TARGET_dir, 'monocle3_no_batch_corrected_pt.png'), width = 8, height = 6)
saveRDS(cds, file = file.path(TARGET_dir, "monocle3_no_batch_correct_object.rds"))
plot_cells(cds,
genes=c("eyg", "CrebA", 'rib', 'wbl', 'toe', 'sage', 'fkh', 'sano', 'pip', 'RpS17', 'RpL24', 'RpL41', 'RpL13A'),
label_cell_groups=FALSE,
show_trajectory_graph=FALSE, cell_size = 2)
cds <- learn_graph(cds)
plot_cells(cds,
color_cells_by = "batch",
label_groups_by_cluster=FALSE,
label_leaves=FALSE,
label_branch_points=FALSE)
cds <- order_cells(cds)
plot_cells(cds,
color_cells_by = "pseudotime",
label_cell_groups=FALSE,
label_leaves=FALSE,
label_branch_points=FALSE,
graph_label_size=1.5, cell_size = 1, show_trajectory_graph = FALSE)
ggsave(file.path(TARGET_dir, 'monocle3_no_batch_corrected_pt.png'), width = 8, height = 6)
saveRDS(cds, file = file.path(TARGET_dir, "monocle3_no_batch_correct_object.rds"))
plot_cells(cds,
genes=c("eyg", "CrebA", 'rib', 'wbl', 'toe', 'sage', 'fkh', 'sano', 'pip', 'RpS17', 'RpL24', 'RpL41', 'RpL13A'),
label_cell_groups=FALSE,
show_trajectory_graph=FALSE, cell_size = 2)
# this is where we use TradeSeq to test association
expRaw = expression_matrix[apply(expression_matrix, MARGIN = 1, FUN = function(x){return(sum(x > 0)) }) > 10, ]
pt<-as.data.frame(pseudotime(cds))
colnames(pt)<-"pseudotime"
cw<-as.matrix(rep(1,nrow(pt)))
rownames(cw)<-rownames(pt)
ts<-tradeSeq::fitGAM(as.matrix(expRaw),pseudotime=as.matrix(pt),cellWeights=cw)
saveRDS(ts, file = file.path(TARGET_dir, "tradeseq_fitgam_results.rds"))
ATres<-tradeSeq::associationTest(ts)
ATres<-tradeSeq::associationTest(ts)
saveRDS(ATres, file = file.path(TARGET_dir, 'raw_associationTest.rds'))
startRes <- startVsEndTest(ts)
#startRes$adj_p = p.adjust(startRes$pvalue)
write.csv(startRes, file = file.path(TARGET_dir, 'raw_startvsendtest.csv'))
startRes$genes = rownames(startRes)
View(startRes)
plot_cells(cds, color_cells_by = "cluster", label_cell_groups = FALSE, cell_size = 1)
old_cds = readRDS("../../salivary_gland_ribbon/analysis/results/v18/refined_wt_late_early_salivary_gland/monocle3_no_batch_correct_object.rds")
plot_cells(old_cds)
plot_cells(old_cds, color_cells_by = 'cluster')
plot_cells(old_cds, color_cells_by = 'batch')
plot_cells(old_cds, color_cells_by = 'batch', cell_size = 1)
plot_cells(cds, color_cells_by = "cluster", label_cell_groups = FALSE, cell_size = 1)
cds <- cluster_cells(cds, resolution = 5e-2)
plot_cells(cds, color_cells_by = "cluster", label_cell_groups = FALSE, cell_size = 1)
cds <- cluster_cells(cds, resolution = 2e-2)
plot_cells(cds, color_cells_by = "cluster", label_cell_groups = FALSE, cell_size = 1)
cds <- cluster_cells(cds, resolution = 3e-2)
plot_cells(cds, color_cells_by = "cluster", label_cell_groups = FALSE, cell_size = 1)
cds <- cluster_cells(cds, resolution = 2e-2)
plot_cells(cds, color_cells_by = "cluster", label_cell_groups = FALSE, cell_size = 1)
cds <- cluster_cells(cds, resolution = 1e-2)
plot_cells(cds, color_cells_by = "cluster", label_cell_groups = FALSE, cell_size = 1)
plot_cells(cds, label_groups_by_cluster=TRUE,  color_cells_by = "batch", cell_size = 1, label_cell_groups = FALSE)
# start with early genes
startRes = read.csv(file = file.path(TARGET_dir, "rank_sum_test.csv"), row.names = 1)
startRes = startRes[startRes$padj < 0.05, ]
pos_start_res = startRes[startRes$logFC < -0.1, ]
norm_exp = monocle3::normalized_counts(cds)
norm_exp = as.matrix(norm_exp)
norm_exp = norm_exp[rownames(pos_start_res), ]
View(pos_start_res)
norm_exp = norm_exp[pos_start_res$feature, ]
# this will change
#norm_exp = norm_exp[apply(norm_exp, MARGIN = 1, FUN = max) > 1, ]
pt = monocle3::pseudotime(cds)
pt = data.frame(pseudotime = pt)
plot_df = cbind(pt, t(norm_exp[, rownames(pt)]))
smoothed_df = data.frame()
for(gene in colnames(plot_df)) {
if(gene == 'pseudotime') {
next
}
else {
yy = ksmooth(plot_df[, 'pseudotime'], plot_df[, gene], kernel="normal", bandwidth = 1.5, x.points=plot_df[, 'pseudotime'])
if(nrow(smoothed_df) == 0) {
smoothed_df = data.frame('pseudotime' = yy$x)
}
smoothed_df[, gene] = yy$y
}
}
smoothed_df$pseudotime = NULL
smoothed_df = t(smoothed_df)
scaled_exp = t(scale(t(smoothed_df)))
sorted_genes = names(sort(apply(scaled_exp, MARGIN = 1, FUN = which.max)))
pheatmap(scaled_exp[sorted_genes, ], cluster_cols = FALSE, cluster_rows = FALSE)
sorted_genes
pos_start_res = startRes[abs(startRes$logFC) < 0.1, ]
startRes = startRes[startRes$padj < 0.05, ]
pos_start_res = startRes[abs(startRes$logFC) > 0.1, ]
startRes = startRes[startRes$padj < 0.05, ]
pos_start_res = startRes[abs(startRes$logFC) > 0.1, ]
norm_exp = monocle3::normalized_counts(cds)
norm_exp = as.matrix(norm_exp)
norm_exp = norm_exp[pos_start_res$feature, ]
View(pos_start_res)
# this will change
#norm_exp = norm_exp[apply(norm_exp, MARGIN = 1, FUN = max) > 1, ]
pt = monocle3::pseudotime(cds)
pt = data.frame(pseudotime = pt)
plot_df = cbind(pt, t(norm_exp[, rownames(pt)]))
smoothed_df = data.frame()
for(gene in colnames(plot_df)) {
if(gene == 'pseudotime') {
next
}
else {
yy = ksmooth(plot_df[, 'pseudotime'], plot_df[, gene], kernel="normal", bandwidth = 1.5, x.points=plot_df[, 'pseudotime'])
if(nrow(smoothed_df) == 0) {
smoothed_df = data.frame('pseudotime' = yy$x)
}
smoothed_df[, gene] = yy$y
}
}
smoothed_df$pseudotime = NULL
smoothed_df = t(smoothed_df)
scaled_exp = t(scale(t(smoothed_df)))
sorted_genes = names(sort(apply(scaled_exp, MARGIN = 1, FUN = which.max)))
pheatmap(scaled_exp[sorted_genes, ], cluster_cols = FALSE, cluster_rows = FALSE)
pheatmap(scaled_exp[sorted_genes, ], cluster_cols = FALSE, cluster_rows = FALSE)
sorted_genes
plot_cells(cds, label_groups_by_cluster=TRUE,  color_cells_by = "batch", cell_size = 1, label_cell_groups = FALSE)
ggsave(file.path(TARGET_dir, 'monocle3_no_batch_corrected_UMAP.png'), width = 8, height = 6)
plot_cells(cds,
genes=c("toe"),
label_cell_groups=FALSE,
show_trajectory_graph=FALSE, cell_size = 2)
ggsave(file.path(TARGET_dir, 'monocle3_no_batch_corrected_toe.png'), width = 8, height = 6)
# To reproduce our work, run this script.
# We used Ubuntu 20.04 with an R package environment managed by renv.
# We used R version 4.1.2.
# Make it work on each of our computers
try({setwd("~/Dropbox/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("~/Dropbox (CahanLab)/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("c:/Users/DAndrewLab/Desktop/fruitfly_organogenesis/analysis/")}, silent = T)
renv::activate()
ANALYSIS_VERSION = "v18" # Where to put output
metadata = read.table(header = T, text=
"sample cellranger
wt_rep1 2021-10-27_scRNA_10x_3prime
wt_rep3 2022-08-11_scRNA_10x_3prime_CellRanger6.1.2
wt_early_rep1 2022-12-07_scRNA_10x_3prime_WT_early
wt_early_rep2 2022-12-13_scRNA_10x_3prime_WT_early2")
SAMPLE = "all"
source("R/set_up_environment.R")
library(Seurat)
library(monocle3)
library(presto)
library(pheatmap)
library(ggplot2)
library(tradeSeq)
set.seed(123)
TARGET_dir = file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_salivary_gland")
dir.create(TARGET_dir)
wt_late_object = readRDS(file.path("results", ANALYSIS_VERSION, "manual_annotation_wt13/manual_celltype_object3.rds"))
##########################
# TODO the below will be changed as time goes on
wt_early_object = readRDS(file.path("results", ANALYSIS_VERSION, "early_wt12_integrated/BDGP_automated_annotation_object.rds"))
sub_wt_early_object = subset(wt_early_object, subset = Integrated_tentativeCellType == 'salivary gland body primordium')
sub_wt_early_object$experimental_condition = 'early'
sub_wt_late_object = subset(wt_late_object, subset = manual_celltypes == "Salivary Gland")
sub_wt_late_object$experimental_condition = 'late'
combined_ct_object = merge(sub_wt_early_object, sub_wt_late_object)
object = Seurat::CreateSeuratObject(combined_ct_object@assays$RNA@counts, project = 'salivary_glands')
object@meta.data$experimental_condition = combined_ct_object@meta.data$experimental_condition
object@meta.data$batch = paste0(combined_ct_object@meta.data$experimental_condition, "_", combined_ct_object@meta.data$batch)
object = Seurat::NormalizeData(object)
cellCycleMarkers = read.csv("accessory_data/cellCycleMarkers.csv", skip = 1, header = T)
object %<>% CellCycleScoring(s.features = cellCycleMarkers$S.phase.markers., g2m.features = cellCycleMarkers$G2.M.phase.markers.)
# start monocle3
expression_matrix = object@assays$RNA@counts
cell_metadata = object@meta.data
gene_annotation = object@assays$RNA@meta.features
gene_annotation$gene_short_name = rownames(gene_annotation)
cds <- new_cell_data_set(expression_matrix,
cell_metadata = cell_metadata,
gene_metadata = gene_annotation)
cds <- preprocess_cds(cds, num_dim = 100)
cds <- reduce_dimension(cds)
plot_cells(cds, label_groups_by_cluster=TRUE,  color_cells_by = "batch", cell_size = 1, label_cell_groups = FALSE)
cds <- preprocess_cds(cds, num_dim = 100)
cds <- reduce_dimension(cds)
plot_cells(cds, label_groups_by_cluster=TRUE,  color_cells_by = "batch", cell_size = 1, label_cell_groups = FALSE)
# To reproduce our work, run this script.
# We used Ubuntu 20.04 with an R package environment managed by renv.
# We used R version 4.1.2.
# Make it work on each of our computers
try({setwd("~/Dropbox/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("~/Dropbox (CahanLab)/fruitfly_organogenesis/analysis")}, silent = T)
try({setwd("c:/Users/DAndrewLab/Desktop/fruitfly_organogenesis/analysis/")}, silent = T)
renv::activate()
ANALYSIS_VERSION = "v18" # Where to put output
metadata = read.table(header = T, text=
"sample cellranger
wt_rep1 2021-10-27_scRNA_10x_3prime
wt_rep3 2022-08-11_scRNA_10x_3prime_CellRanger6.1.2
wt_early_rep1 2022-12-07_scRNA_10x_3prime_WT_early
wt_early_rep2 2022-12-13_scRNA_10x_3prime_WT_early2")
SAMPLE = "all"
source("R/set_up_environment.R")
library(Seurat)
library(monocle3)
library(presto)
library(pheatmap)
library(ggplot2)
library(tradeSeq)
set.seed(123)
TARGET_dir = file.path("results", ANALYSIS_VERSION, "refined_wt_late_early_salivary_gland")
dir.create(TARGET_dir)
wt_late_object = readRDS(file.path("results", ANALYSIS_VERSION, "manual_annotation_wt13/manual_celltype_object3.rds"))
##########################
# TODO the below will be changed as time goes on
wt_early_object = readRDS(file.path("results", ANALYSIS_VERSION, "early_wt12_integrated/BDGP_automated_annotation_object.rds"))
sub_wt_early_object = subset(wt_early_object, subset = Integrated_tentativeCellType == 'salivary gland body primordium')
sub_wt_early_object$experimental_condition = 'early'
########################
sub_wt_late_object = subset(wt_late_object, subset = manual_celltypes == "Salivary Gland")
sub_wt_late_object$experimental_condition = 'late'
combined_ct_object = merge(sub_wt_early_object, sub_wt_late_object)
object = Seurat::CreateSeuratObject(combined_ct_object@assays$RNA@counts, project = 'salivary_glands')
object@meta.data$experimental_condition = combined_ct_object@meta.data$experimental_condition
object@meta.data$batch = paste0(combined_ct_object@meta.data$experimental_condition, "_", combined_ct_object@meta.data$batch)
object = Seurat::NormalizeData(object)
cellCycleMarkers = read.csv("accessory_data/cellCycleMarkers.csv", skip = 1, header = T)
object %<>% CellCycleScoring(s.features = cellCycleMarkers$S.phase.markers., g2m.features = cellCycleMarkers$G2.M.phase.markers.)
# start monocle3
expression_matrix = object@assays$RNA@counts
cell_metadata = object@meta.data
gene_annotation = object@assays$RNA@meta.features
gene_annotation$gene_short_name = rownames(gene_annotation)
cds <- new_cell_data_set(expression_matrix,
cell_metadata = cell_metadata,
gene_metadata = gene_annotation)
cds <- preprocess_cds(cds, num_dim = 100)
cds <- reduce_dimension(cds)
plot_cells(cds, label_groups_by_cluster=TRUE,  color_cells_by = "batch", cell_size = 1, label_cell_groups = FALSE)
plot_cells(cds, label_groups_by_cluster=TRUE,  color_cells_by = "batch", cell_size = 1, label_cell_groups = FALSE)
